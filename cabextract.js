// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(5435);
/* global initializers */ __ATINIT__.push();


/* memory initializer */ allocate([100,105,114,101,99,116,111,114,121,0,0,0,0,0,0,0,102,105,120,0,0,0,0,0,102,105,108,116,101,114,0,0,104,101,108,112,0,0,0,0,108,105,115,116,0,0,0,0,108,111,119,101,114,99,97,115,101,0,0,0,0,0,0,0,112,105,112,101,0,0,0,0,113,117,105,101,116,0,0,0,115,105,110,103,108,101,0,0,116,101,115,116,0,0,0,0,118,101,114,115,105,111,110,0,8,0,0,0,1,0,0,0,0,0,0,0,100,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,102,0,0,0,32,0,0,0,1,0,0,0,0,0,0,0,70,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,104,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,56,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,72,0,0,0,0,0,0,0,0,0,0,0,112,0,0,0,80,0,0,0,0,0,0,0,0,0,0,0,113,0,0,0,88,0,0,0,0,0,0,0,0,0,0,0,115,0,0,0,96,0,0,0,0,0,0,0,0,0,0,0,116,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,115,116,100,111,117,116,0,0,120,1,0,0,0,0,0,0,96,0,0,0,0,0,0,0,100,58,102,70,58,104,108,76,112,113,115,116,118,0,0,0,85,115,97,103,101,58,32,37,115,32,91,111,112,116,105,111,110,115,93,32,91,45,100,32,100,105,114,93,32,60,99,97,98,105,110,101,116,32,102,105,108,101,40,115,41,62,10,10,84,104,105,115,32,119,105,108,108,32,101,120,116,114,97,99,116,32,97,108,108,32,102,105,108,101,115,32,102,114,111,109,32,97,32,99,97,98,105,110,101,116,32,111,114,32,101,120,101,99,117,116,97,98,108,101,32,99,97,98,105,110,101,116,46,10,70,111,114,32,109,117,108,116,105,45,112,97,114,116,32,99,97,98,105,110,101,116,115,44,32,111,110,108,121,32,115,112,101,99,105,102,121,32,116,104,101,32,102,105,114,115,116,32,102,105,108,101,32,105,110,32,116,104,101,32,115,101,116,46,10,10,0,0,0,0,79,112,116,105,111,110,115,58,10,32,32,45,118,32,32,32,45,45,118,101,114,115,105,111,110,32,32,32,32,32,112,114,105,110,116,32,118,101,114,115,105,111,110,32,47,32,108,105,115,116,32,99,97,98,105,110,101,116,10,32,32,45,104,32,32,32,45,45,104,101,108,112,32,32,32,32,32,32,32,32,115,104,111,119,32,116,104,105,115,32,104,101,108,112,32,112,97,103,101,10,32,32,45,108,32,32,32,45,45,108,105,115,116,32,32,32,32,32,32,32,32,108,105,115,116,32,99,111,110,116,101,110,116,115,32,111,102,32,99,97,98,105,110,101,116,10,32,32,45,116,32,32,32,45,45,116,101,115,116,32,32,32,32,32,32,32,32,116,101,115,116,32,99,97,98,105,110,101,116,32,105,110,116,101,103,114,105,116,121,10,32,32,45,113,32,32,32,45,45,113,117,105,101,116,32,32,32,32,32,32,32,111,110,108,121,32,112,114,105,110,116,32,101,114,114,111,114,115,32,97,110,100,32,119,97,114,110,105,110,103,115,10,32,32,45,76,32,32,32,45,45,108,111,119,101,114,99,97,115,101,32,32,32,109,97,107,101,32,102,105,108,101,110,97,109,101,115,32,108,111,119,101,114,99,97,115,101,10,32,32,45,102,32,32,32,45,45,102,105,120,32,32,32,32,32,32,32,32,32,102,105,120,32,40,115,111,109,101,41,32,99,111,114,114,117,112,116,101,100,32,99,97,98,105,110,101,116,115,10,0,0,0,0,0,32,32,45,112,32,32,32,45,45,112,105,112,101,32,32,32,32,32,32,32,32,112,105,112,101,32,101,120,116,114,97,99,116,101,100,32,102,105,108,101,115,32,116,111,32,115,116,100,111,117,116,10,32,32,45,115,32,32,32,45,45,115,105,110,103,108,101,32,32,32,32,32,32,114,101,115,116,114,105,99,116,32,115,101,97,114,99,104,32,116,111,32,99,97,98,115,32,111,110,32,116,104,101,32,99,111,109,109,97,110,100,32,108,105,110,101,10,32,32,45,70,32,32,32,45,45,102,105,108,116,101,114,32,32,32,32,32,32,101,120,116,114,97,99,116,32,111,110,108,121,32,102,105,108,101,115,32,116,104,97,116,32,109,97,116,99,104,32,116,104,101,32,103,105,118,101,110,32,112,97,116,116,101,114,110,10,32,32,45,100,32,32,32,45,45,100,105,114,101,99,116,111,114,121,32,32,32,101,120,116,114,97,99,116,32,97,108,108,32,102,105,108,101,115,32,116,111,32,116,104,101,32,103,105,118,101,110,32,100,105,114,101,99,116,111,114,121,10,10,99,97,98,101,120,116,114,97,99,116,32,37,115,32,40,67,41,32,50,48,48,48,45,50,48,49,49,32,83,116,117,97,114,116,32,67,97,105,101,32,60,107,121,122,101,114,64,52,117,46,110,101,116,62,10,84,104,105,115,32,105,115,32,102,114,101,101,32,115,111,102,116,119,97,114,101,32,119,105,116,104,32,65,66,83,79,76,85,84,69,76,89,32,78,79,32,87,65,82,82,65,78,84,89,46,10,0,0,0,0,0,49,46,52,0,0,0,0,0,37,115,58,32,89,111,117,32,99,97,110,110,111,116,32,117,115,101,32,45,45,116,101,115,116,32,97,110,100,32,45,45,108,105,115,116,32,97,116,32,116,104,101,32,115,97,109,101,32,116,105,109,101,46,10,84,114,121,32,39,37,115,32,45,45,104,101,108,112,39,32,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,46,10,0,0,0,99,97,98,101,120,116,114,97,99,116,32,118,101,114,115,105,111,110,32,37,115,10,0,0,37,115,58,32,78,111,32,99,97,98,105,110,101,116,32,102,105,108,101,115,32,115,112,101,99,105,102,105,101,100,46,10,84,114,121,32,39,37,115,32,45,45,104,101,108,112,39,32,102,111,114,32,109,111,114,101,32,105,110,102,111,114,109,97,116,105,111,110,46,10,0,0,70,65,84,65,76,32,69,82,82,79,82,58,32,108,105,98,109,115,112,97,99,107,32,105,115,32,99,111,109,112,105,108,101,100,32,102,111,114,32,37,100,45,98,105,116,32,102,105,108,101,32,73,79,44,10,32,32,32,32,32,32,32,32,32,32,32,32,32,99,97,98,101,120,116,114,97,99,116,32,105,115,32,99,111,109,112,105,108,101,100,32,102,111,114,32,37,100,45,98,105,116,32,102,105,108,101,32,73,79,46,10,0,70,65,84,65,76,32,69,82,82,79,82,58,32,108,105,98,109,115,112,97,99,107,32,115,101,108,102,45,116,101,115,116,32,114,101,116,117,114,110,101,100,32,37,100,10,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,99,97,110,39,116,32,99,114,101,97,116,101,32,108,105,98,109,115,112,97,99,107,32,67,65,66,32,100,101,99,111,109,112,114,101,115,115,111,114,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,65,108,108,32,100,111,110,101,44,32,101,114,114,111,114,115,32,105,110,32,112,114,111,99,101,115,115,105,110,103,32,37,100,32,102,105,108,101,40,115,41,10,0,0,0,0,0,10,65,108,108,32,100,111,110,101,44,32,110,111,32,101,114,114,111,114,115,46,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,115,107,105,112,112,105,110,103,32,107,110,111,119,110,32,99,97,98,105,110,101,116,10,0,0,0,0,0,37,115,58,32,115,107,105,112,112,105,110,103,32,107,110,111,119,110,32,99,97,98,105,110,101,116,32,40,102,114,111,109,32,37,115,41,10,0,0,0,37,115,58,32,37,115,10,0,37,115,58,32,110,111,32,118,97,108,105,100,32,99,97,98,105,110,101,116,115,32,102,111,117,110,100,10,0,0,0,0,86,105,101,119,105,110,103,32,99,97,98,105,110,101,116,58,32,37,115,10,0,0,0,0,32,70,105,108,101,32,115,105,122,101,32,124,32,68,97,116,101,32,32,32,32,32,32,32,84,105,109,101,32,32,32,32,32,124,32,78,97,109,101,10,0,0,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,43,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,43,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,0,0,0,0,0,37,115,32,99,97,98,105,110,101,116,58,32,37,115,10,0,84,101,115,116,105,110,103,0,69,120,116,114,97,99,116,105,110,103,0,0,0,0,0,0,37,49,48,117,32,124,32,37,48,50,100,46,37,48,50,100,46,37,48,52,100,32,37,48,50,100,58,37,48,50,100,58,37,48,50,100,32,124,32,37,115,10,0,0,0,0,0,0,32,32,37,115,32,32,102,97,105,108,101,100,32,40,37,115,41,10,0,0,0,0,0,0,32,32,37,115,32,32,79,75,32,32,0,0,0,0,0,0,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,37,48,50,120,10,0,0,0,0,0,0,0,37,115,40,37,115,41,58,32,37,115,10,0,0,0,0,0,32,32,101,120,116,114,97,99,116,105,110,103,32,37,115,10,0,0,0,0,0,0,0,0,37,115,58,32,99,97,110,39,116,32,99,114,101,97,116,101,32,102,105,108,101,32,112,97,116,104,10,0,0,0,0,0,67,97,110,39,116,32,97,108,108,111,99,97,116,101,32,111,117,116,112,117,116,32,102,105,108,101,110,97,109,101,32,40,37,117,32,98,121,116,101,115,41,10,0,0,0,0,0,0,47,0,0,0,0,0,0,0,101,114,114,111,114,32,105,110,32,85,84,70,45,56,32,100,101,99,111,100,101,10,0,0,37,115,58,32,99,97,110,39,116,32,102,105,110,100,32,37,115,10,0,0,0,0,0,0,37,115,58,32,101,120,116,101,110,100,115,32,98,97,99,107,119,97,114,100,115,32,116,111,32,37,115,32,40,37,115,41,10,0,0,0,0,0,0,0,37,115,58,32,99,97,110,39,116,32,112,114,101,112,101,110,100,32,37,115,58,32,37,115,10,0,0,0,0,0,0,0,37,115,58,32,101,120,116,101,110,100,115,32,116,111,32,37,115,32,40,37,115,41,10,0,37,115,58,32,99,97,110,39,116,32,97,112,112,101,110,100,32,37,115,58,32,37,115,10,0,0,0,0,0,0,0,0,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,98,97,100,32,67,65,66,32,115,105,103,110,97,116,117,114,101,0,0,0,0,0,0,0,101,114,114,111,114,32,105,110,32,67,65,66,32,100,97,116,97,32,102,111,114,109,97,116,0,0,0,0,0,0,0,0,99,104,101,99,107,115,117,109,32,101,114,114,111,114,0,0,100,101,99,111,109,112,114,101,115,115,105,111,110,32,101,114,114,111,114,0,0,0,0,0,117,110,107,110,111,119,110,32,101,114,114,111,114,0,0,0,37,115,58,32,0,0,0,0,114,98,0,0,0,0,0,0,119,98,0,0,0,0,0,0,114,43,98,0,0,0,0,0,97,98,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,82,82,79,82,59,32,102,105,108,101,32,34,37,115,34,32,99,97,110,110,111,116,32,98,101,32,101,120,116,114,97,99,116,101,100,44,32,99,97,98,105,110,101,116,32,115,101,116,32,105,115,32,105,110,99,111,109,112,108,101,116,101,46,0,0,0,0,0,0,0,0,115,101,108,102,32,38,38,32,115,101,108,102,45,62,100,0,109,115,112,97,99,107,47,99,97,98,100,46,99,0,0,0,99,97,98,100,95,105,110,105,116,95,100,101,99,111,109,112,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,59,32,110,111,110,45,109,97,120,105,109,97,108,32,100,97,116,97,32,98,108,111,99,107,0,87,65,82,78,73,78,71,59,32,98,97,100,32,98,108,111,99,107,32,99,104,101,99,107,115,117,109,32,102,111,117,110,100,0,0,0,0,0,0,0,87,65,82,78,73,78,71,59,32,109,101,114,103,101,100,32,99,97,98,105,110,101,116,115,32,119,105,116,104,32,100,105,102,102,101,114,105,110,103,32,83,101,116,32,73,68,115,46,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,59,32,109,101,114,103,101,100,32,99,97,98,105,110,101,116,115,32,119,105,116,104,32,111,100,100,32,111,114,100,101,114,46,0,0,0,0,0,0,0,0,87,65,82,78,73,78,71,59,32,109,101,114,103,101,100,32,102,105,108,101,32,37,115,32,110,111,116,32,108,105,115,116,101,100,32,105,110,32,98,111,116,104,32,99,97,98,105,110,101,116,115,0,0,0,0,0,87,65,82,78,73,78,71,59,32,112,111,115,115,105,98,108,101,32,37,108,108,100,32,101,120,116,114,97,32,98,121,116,101,115,32,97,116,32,101,110,100,32,111,102,32,102,105,108,101,46,0,0,0,0,0,0,87,65,82,78,73,78,71,59,32,102,105,108,101,32,112,111,115,115,105,98,108,121,32,116,114,117,110,99,97,116,101,100,32,98,121,32,37,108,108,100,32,98,121,116,101,115,46,0,87,65,82,78,73,78,71,59,32,102,111,117,110,100,32,73,110,115,116,97,108,108,83,104,105,101,108,100,32,104,101,97,100,101,114,46,32,84,104,105,115,32,105,115,32,112,114,111,98,97,98,108,121,32,97,110,32,73,110,115,116,97,108,108,83,104,105,101,108,100,32,102,105,108,101,46,32,85,115,101,32,85,78,83,72,73,69,76,68,32,102,114,111,109,32,119,119,119,46,115,121,110,99,101,46,111,114,103,32,116,111,32,117,110,112,97,99,107,32,105,116,46,0,0,0,0,0,0,110,111,32,102,111,108,100,101,114,115,32,105,110,32,99,97,98,105,110,101,116,46,0,0,110,111,32,102,105,108,101,115,32,105,110,32,99,97,98,105,110,101,116,46,0,0,0,0,87,65,82,78,73,78,71,59,32,99,97,98,105,110,101,116,32,118,101,114,115,105,111,110,32,105,115,32,110,111,116,32,49,46,51,0,0,0,0,0,87,65,82,78,73,78,71,59,32,114,101,115,101,114,118,101,100,32,104,101,97,100,101,114,32,62,32,54,48,48,48,48,46,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,10,0,0,0,12,0,0,0,14,0,0,0,16,0,0,0,18,0,0,0,20,0,0,0,22,0,0,0,24,0,0,0,26,0,0,0,28,0,0,0,30,0,0,0,32,0,0,0,0,0,77,83,90,73,80,32,101,114,114,111,114,44,32,37,117,32,98,121,116,101,115,32,111,102,32,100,97,116,97,32,108,111,115,116,46,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0,0,0,1,0,3,0,7,0,15,0,31,0,63,0,127,0,255,0,255,1,255,3,255,7,255,15,255,31,255,63,255,127,255,255,0,0,0,0,0,0,3,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,15,0,17,0,19,0,23,0,27,0,31,0,35,0,43,0,51,0,59,0,67,0,83,0,99,0,115,0,131,0,163,0,195,0,227,0,2,1,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0,1,0,2,0,3,0,4,0,5,0,7,0,9,0,13,0,17,0,25,0,33,0,49,0,65,0,97,0,129,0,193,0,1,1,129,1,1,2,1,3,1,4,1,6,1,8,1,12,1,16,1,24,1,32,1,48,1,64,1,96,0,0,0,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,0,0,0,0,0,0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,32,0,0,0,48,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,192,0,0,0,0,1,0,0,128,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,24,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0,0,0,0,1,2,3,4,5,6,8,10,12,14,18,22,26,30,38,46,54,62,78,94,110,126,158,190,222,254,0,0,0,0,0,0,0,31,0,59,0,90,0,120,0,151,0,181,0,212,0,243,0,17,1,48,1,78,1,109,1,0,0,31,0,60,0,91,0,121,0,152,0,182,0,213,0,244,0,18,1,49,1,79,1,110,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,58,32,105,108,108,101,103,97,108,32,111,112,116,105,111,110,58,32,0,0,0,0,0,0,10,0,0,0,0,0,0,0,58,32,111,112,116,105,111,110,32,114,101,113,117,105,114,101,115,32,97,110,32,97,114,103,117,109,101,110,116,58,32,0,0,0,0,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _mknod(path, mode, dev) {
      // int mknod(const char *path, mode_t mode, dev_t dev);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mknod.html
      path = Pointer_stringify(path);
      // we don't want this in the JS API as the JS API
      // uses mknod to create all nodes.
      switch (mode & 61440) {
        case 32768:
        case 8192:
        case 24576:
        case 4096:
        case 49152:
          break;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      try {
        FS.mknod(path, mode, dev);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _mkdir(path, mode) {
      // int mkdir(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/mkdir.html
      path = Pointer_stringify(path);
      // remove a trailing slash, if one - /a/b/ has basename of '', but
      // we want to create b in the context of this function
      if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
      try {
        FS.mkdir(path, mode, 0);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

   
  Module["_memset"] = _memset;

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
   
  Module["_strlen"] = _strlen; 
  Module["_strcat"] = _strcat;

  function _chmod(path, mode, dontResolveLastLink) {
      // int chmod(const char *path, mode_t mode);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/chmod.html
      // NOTE: dontResolveLastLink is a shortcut for lchmod(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        FS.chmod(path, mode);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)|0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  function _umask(newMask) {
      // mode_t umask(mode_t cmask);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/umask.html
      // NOTE: This value isn't actually used for anything.
      if (_umask.cmask === undefined) _umask.cmask = 0x1FF;  // S_IRWXU | S_IRWXG | S_IRWXO.
      var oldMask = _umask.cmask;
      _umask.cmask = newMask;
      return oldMask;
    }


  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);
  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr;
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60;
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000);
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000);
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000);
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }

   
  Module["_tolower"] = _tolower;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  function _closedir(dirp) {
      // int closedir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/closedir.html
      var fd = _fileno(dirp);
      return _close(fd);
    }

  
  function _readdir_r(dirp, entry, result) {
      // int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        return ___setErrNo(ERRNO_CODES.EBADF);
      }
      var entries;
      try {
        entries = FS.readdir(stream.path);
      } catch (e) {
        return FS.handleFSError(e);
      }
      if (stream.position < 0 || stream.position >= entries.length) {
        HEAP32[((result)>>2)]=0;
        return 0;
      }
      var id;
      var type;
      var name = entries[stream.position];
      var offset = stream.position + 1;
      if (!name.indexOf('.')) {
        id = 1;
        type = 4;
      } else {
        var child = FS.lookupNode(stream.node, name);
        id = child.id;
        type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
               FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
               FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
               8;                             // DT_REG, regular file.
      }
      HEAP32[((entry)>>2)]=id;
      HEAP32[(((entry)+(4))>>2)]=offset;
      HEAP32[(((entry)+(8))>>2)]=name.length + 1;
      for (var i = 0; i < name.length; i++) {
        HEAP8[(((entry + 11)+(i))|0)]=name.charCodeAt(i);
      }
      HEAP8[(((entry + 11)+(i))|0)]=0;
      HEAP8[(((entry)+(10))|0)]=type;
      HEAP32[((result)>>2)]=entry;
      stream.position++;
      return 0;
    }function _readdir(dirp) {
      // struct dirent *readdir(DIR *dirp);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/readdir_r.html
      var stream = FS.getStreamFromPtr(dirp);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      // TODO Is it supposed to be safe to execute multiple readdirs?
      if (!_readdir.entry) _readdir.entry = _malloc(268);
      if (!_readdir.result) _readdir.result = _malloc(4);
      var err = _readdir_r(dirp, _readdir.entry, _readdir.result);
      if (err) {
        ___setErrNo(err);
        return 0;
      }
      return HEAP32[((_readdir.result)>>2)];
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _utime(path, times) {
      // int utime(const char *path, const struct utimbuf *times);
      // http://pubs.opengroup.org/onlinepubs/009695399/basedefs/utime.h.html
      var time;
      if (times) {
        // NOTE: We don't keep track of access timestamps.
        var offset = 4;
        time = HEAP32[(((times)+(offset))>>2)];
        time *= 1000;
      } else {
        time = Date.now();
      }
      path = Pointer_stringify(path);
      try {
        FS.utime(path, time, time);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _opendir(dirname) {
      // DIR *opendir(const char *dirname);
      // http://pubs.opengroup.org/onlinepubs/007908799/xsh/opendir.html
      // NOTE: Calculating absolute path redundantly since we need to associate it
      //       with the opened stream.
      var path = Pointer_stringify(dirname);
      if (!path) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return 0;
      }
      if (!FS.isDir(node.mode)) {
        ___setErrNo(ERRNO_CODES.ENOTDIR);
        return 0;
      }
      var fd = _open(dirname, 0, allocate([0, 0, 0, 0], 'i32', ALLOC_STACK));
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

   
  Module["_strcpy"] = _strcpy;

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _isupper(chr) {
      return chr >= 65 && chr <= 90;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }


FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


var Math_min = Math.min;
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var _stderr=env._stderr|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iii=env.nullFunc_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iii=env.invoke_iii;
  var _readdir_r=env._readdir_r;
  var _send=env._send;
  var _fread=env._fread;
  var _lseek=env._lseek;
  var __reallyNegative=env.__reallyNegative;
  var _vfprintf=env._vfprintf;
  var _chmod=env._chmod;
  var ___assert_fail=env.___assert_fail;
  var _fsync=env._fsync;
  var _fflush=env._fflush;
  var _opendir=env._opendir;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var _utime=env._utime;
  var ___setErrNo=env.___setErrNo;
  var _ferror=env._ferror;
  var __formatString=env.__formatString;
  var _putchar=env._putchar;
  var _fseek=env._fseek;
  var _readdir=env._readdir;
  var _pread=env._pread;
  var _printf=env._printf;
  var _fclose=env._fclose;
  var _umask=env._umask;
  var _localtime=env._localtime;
  var _write=env._write;
  var _ftell=env._ftell;
  var _isupper=env._isupper;
  var ___errno_location=env.___errno_location;
  var _stat=env._stat;
  var _recv=env._recv;
  var _fputc=env._fputc;
  var _mkport=env._mkport;
  var _read=env._read;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _mknod=env._mknod;
  var _mkdir=env._mkdir;
  var _closedir=env._closedir;
  var _fopen=env._fopen;
  var _close=env._close;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}

function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}

function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}

function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}

function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}

function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}

function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}

function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}

function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}

function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $err = 0, $i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer29 = sp + 80|0;
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer24 = sp + 32|0;
 $vararg_buffer21 = sp;
 $vararg_buffer17 = sp + 64|0;
 $vararg_buffer13 = sp + 72|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 48|0;
 $vararg_buffer3 = sp + 40|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 while(1) {
  $3 = $1;
  $4 = $2;
  $5 = (_getopt_long($3,$4,400,112,0)|0);
  $i = $5;
  $6 = ($5|0)!=(-1);
  if (!($6)) {
   break;
  }
  $7 = $i;
  switch ($7|0) {
  case 100:  {
   $8 = HEAP32[4728>>2]|0;
   HEAP32[((336 + 32|0))>>2] = $8;
   break;
  }
  case 102:  {
   HEAP32[((336 + 24|0))>>2] = 1;
   break;
  }
  case 70:  {
   $9 = HEAP32[4728>>2]|0;
   HEAP32[((336 + 36|0))>>2] = $9;
   break;
  }
  case 104:  {
   HEAP32[336>>2] = 1;
   break;
  }
  case 108:  {
   HEAP32[((336 + 12|0))>>2] = 1;
   break;
  }
  case 76:  {
   HEAP32[((336 + 4|0))>>2] = 1;
   break;
  }
  case 112:  {
   HEAP32[((336 + 8|0))>>2] = 1;
   break;
  }
  case 113:  {
   HEAP32[((336 + 16|0))>>2] = 1;
   break;
  }
  case 115:  {
   HEAP32[((336 + 20|0))>>2] = 1;
   break;
  }
  case 116:  {
   HEAP32[((336 + 28|0))>>2] = 1;
   break;
  }
  case 118:  {
   HEAP32[((336 + 12|0))>>2] = 1;
   break;
  }
  default: {
  }
  }
 }
 $10 = HEAP32[336>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = HEAP32[_stderr>>2]|0;
  $13 = $2;
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer>>2] = $14;
  (_fprintf(($12|0),(416|0),($vararg_buffer|0))|0);
  $15 = HEAP32[_stderr>>2]|0;
  (_fprintf(($15|0),(600|0),($vararg_buffer1|0))|0);
  $16 = HEAP32[_stderr>>2]|0;
  HEAP32[$vararg_buffer3>>2] = 1304;
  (_fprintf(($16|0),(944|0),($vararg_buffer3|0))|0);
  $0 = 1;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 $17 = HEAP32[((336 + 28|0))>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = HEAP32[((336 + 12|0))>>2]|0;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = HEAP32[_stderr>>2]|0;
   $22 = $2;
   $23 = HEAP32[$22>>2]|0;
   $24 = $2;
   $25 = HEAP32[$24>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $23;
   $vararg_ptr9 = (($vararg_buffer6) + 4|0);
   HEAP32[$vararg_ptr9>>2] = $25;
   (_fprintf(($21|0),(1312|0),($vararg_buffer6|0))|0);
   $0 = 1;
   $92 = $0;
   STACKTOP = sp;return ($92|0);
  }
 }
 $26 = HEAP32[4624>>2]|0;
 $27 = $1;
 $28 = ($26|0)==($27|0);
 if ($28) {
  $29 = HEAP32[((336 + 12|0))>>2]|0;
  $30 = ($29|0)!=(0);
  if ($30) {
   HEAP32[$vararg_buffer10>>2] = 1304;
   (_printf((1408|0),($vararg_buffer10|0))|0);
   $0 = 0;
   $92 = $0;
   STACKTOP = sp;return ($92|0);
  } else {
   $31 = HEAP32[_stderr>>2]|0;
   $32 = $2;
   $33 = HEAP32[$32>>2]|0;
   $34 = $2;
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$vararg_buffer13>>2] = $33;
   $vararg_ptr16 = (($vararg_buffer13) + 4|0);
   HEAP32[$vararg_ptr16>>2] = $35;
   (_fprintf(($31|0),(1432|0),($vararg_buffer13|0))|0);
   $0 = 1;
   $92 = $0;
   STACKTOP = sp;return ($92|0);
  }
 }
 $36 = HEAP32[((336 + 20|0))>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = HEAP32[4624>>2]|0;
  $i = $38;
  while(1) {
   $39 = $i;
   $40 = $1;
   $41 = ($39|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = $i;
   $43 = $2;
   $44 = (($43) + ($42<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   _memorise_file(312,$45,0);
   $46 = $i;
   $47 = (($46) + 1)|0;
   $i = $47;
  }
 }
 $48 = HEAP32[((336 + 8|0))>>2]|0;
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = HEAP32[((336 + 12|0))>>2]|0;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   HEAP32[((336 + 16|0))>>2] = 1;
  }
 }
 $52 = (_mspack_sys_selftest_internal(4)|0);
 $err = $52;
 $53 = $err;
 $54 = ($53|0)!=(0);
 if ($54) {
  $55 = $err;
  $56 = ($55|0)==(5);
  if ($56) {
   $57 = HEAP32[_stderr>>2]|0;
   HEAP32[$vararg_buffer17>>2] = 64;
   $vararg_ptr20 = (($vararg_buffer17) + 4|0);
   HEAP32[$vararg_ptr20>>2] = 32;
   (_fprintf(($57|0),(1504|0),($vararg_buffer17|0))|0);
  } else {
   $58 = HEAP32[_stderr>>2]|0;
   $59 = $err;
   HEAP32[$vararg_buffer21>>2] = $59;
   (_fprintf(($58|0),(1616|0),($vararg_buffer21|0))|0);
  }
  $0 = 1;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 $60 = (_mspack_create_cab_decompressor(1664)|0);
 HEAP32[304>>2] = $60;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  $62 = HEAP32[_stderr>>2]|0;
  (_fprintf(($62|0),(1712|0),($vararg_buffer24|0))|0);
  $0 = 1;
  $92 = $0;
  STACKTOP = sp;return ($92|0);
 }
 $63 = (_umask(0)|0);
 HEAP32[1760>>2] = $63;
 $64 = HEAP32[1760>>2]|0;
 (_umask(($64|0))|0);
 $65 = HEAP32[304>>2]|0;
 $66 = (($65) + 24|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[304>>2]|0;
 $69 = HEAP32[((336 + 24|0))>>2]|0;
 (FUNCTION_TABLE_iiii[$67 & 15]($68,1,$69)|0);
 $70 = HEAP32[4624>>2]|0;
 $i = $70;
 $err = 0;
 while(1) {
  $71 = $i;
  $72 = $1;
  $73 = ($71|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = $i;
  $75 = $2;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (_process_cabinet($77)|0);
  $79 = $err;
  $80 = (($79) + ($78))|0;
  $err = $80;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $83 = HEAP32[((336 + 16|0))>>2]|0;
 $84 = ($83|0)!=(0);
 if (!($84)) {
  $85 = $err;
  $86 = ($85|0)!=(0);
  if ($86) {
   $87 = $err;
   HEAP32[$vararg_buffer26>>2] = $87;
   (_printf((1768|0),($vararg_buffer26|0))|0);
  } else {
   (_printf((1816|0),($vararg_buffer29|0))|0);
  }
 }
 $88 = HEAP32[304>>2]|0;
 _mspack_destroy_cab_decompressor($88);
 _forget_files(312);
 _forget_files(320);
 _forget_files(328);
 $89 = $err;
 $90 = ($89|0)!=(0);
 $91 = $90 ? 1 : 0;
 $0 = $91;
 $92 = $0;
 STACKTOP = sp;return ($92|0);
}
function _memorise_file($fml,$name,$from) {
 $fml = $fml|0;
 $name = $name|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fm = 0, $st_buf = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $st_buf = sp;
 $0 = $fml;
 $1 = $name;
 $2 = $from;
 $3 = $1;
 $4 = (_stat(($3|0),($st_buf|0))|0);
 $5 = ($4|0)!=(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (_malloc(16)|0);
 $fm = $6;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$st_buf>>2]|0;
 $9 = $fm;
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = $8;
 $11 = (($st_buf) + 72|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $fm;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = $12;
 $15 = $2;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $2;
  $18 = (_strlen(($17|0))|0);
  $19 = (($18) + 1)|0;
  $20 = (_malloc($19)|0);
  $23 = $20;
 } else {
  $23 = 0;
 }
 $21 = $fm;
 $22 = (($21) + 12|0);
 HEAP32[$22>>2] = $23;
 $24 = $fm;
 $25 = (($24) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = $fm;
  $29 = (($28) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $2;
  (_strcpy(($30|0),($31|0))|0);
 }
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = $fm;
 HEAP32[$34>>2] = $33;
 $35 = $fm;
 $36 = $0;
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function _process_cabinet($basename) {
 $basename = $basename|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $basecab = 0, $cab = 0, $cab2 = 0;
 var $errors = 0, $file = 0, $fname_offset = 0, $from = 0, $isunix = 0, $name = 0, $spaces = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer23 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer5 = 0, $vararg_buffer58 = 0, $vararg_buffer63 = 0;
 var $vararg_buffer66 = 0, $vararg_buffer69 = 0, $vararg_buffer9 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, $vararg_ptr32 = 0, $vararg_ptr36 = 0, $vararg_ptr4 = 0, $vararg_ptr43 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0;
 var $vararg_ptr50 = 0, $vararg_ptr51 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr55 = 0, $vararg_ptr56 = 0, $vararg_ptr57 = 0, $vararg_ptr61 = 0, $vararg_ptr62 = 0, $vararg_ptr72 = 0, $vararg_ptr8 = 0, $viewhdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $vararg_buffer69 = sp + 208|0;
 $vararg_buffer66 = sp + 24|0;
 $vararg_buffer63 = sp + 32|0;
 $vararg_buffer58 = sp + 160|0;
 $vararg_buffer40 = sp + 88|0;
 $vararg_buffer37 = sp + 80|0;
 $vararg_buffer33 = sp + 152|0;
 $vararg_buffer23 = sp + 176|0;
 $vararg_buffer19 = sp + 40|0;
 $vararg_buffer17 = sp;
 $vararg_buffer15 = sp + 56|0;
 $vararg_buffer12 = sp + 8|0;
 $vararg_buffer9 = sp + 48|0;
 $vararg_buffer5 = sp + 16|0;
 $vararg_buffer1 = sp + 72|0;
 $vararg_buffer = sp + 64|0;
 $from = sp + 228|0;
 $1 = $basename;
 $viewhdr = 0;
 $errors = 0;
 $2 = HEAP32[328>>2]|0;
 $3 = $1;
 $4 = (_recall_file($2,$3,$from)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = HEAP32[320>>2]|0;
  $7 = $1;
  $8 = (_recall_file($6,$7,$from)|0);
  $9 = ($8|0)!=(0);
  if (!($9)) {
   $17 = $1;
   _memorise_file(328,$17,0);
   $18 = HEAP32[304>>2]|0;
   $19 = (($18) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[304>>2]|0;
   $22 = $1;
   $23 = (FUNCTION_TABLE_iii[$20 & 15]($21,$22)|0);
   $basecab = $23;
   $24 = ($23|0)!=(0|0);
   if (!($24)) {
    $25 = HEAP32[304>>2]|0;
    $26 = (($25) + 28|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = HEAP32[304>>2]|0;
    $29 = (FUNCTION_TABLE_ii[$27 & 3]($28)|0);
    $30 = ($29|0)!=(0);
    if ($30) {
     $31 = HEAP32[_stderr>>2]|0;
     $32 = $1;
     $33 = HEAP32[304>>2]|0;
     $34 = (_cab_error($33)|0);
     HEAP32[$vararg_buffer5>>2] = $32;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $34;
     (_fprintf(($31|0),(2088|0),($vararg_buffer5|0))|0);
    } else {
     $35 = HEAP32[_stderr>>2]|0;
     $36 = $1;
     HEAP32[$vararg_buffer9>>2] = $36;
     (_fprintf(($35|0),(2096|0),($vararg_buffer9|0))|0);
    }
    $0 = 1;
    $256 = $0;
    STACKTOP = sp;return ($256|0);
   }
   $37 = $basecab;
   $cab = $37;
   while(1) {
    $38 = $cab;
    $39 = ($38|0)!=(0|0);
    if (!($39)) {
     break;
    }
    $40 = $cab;
    $41 = $1;
    _load_spanning_cabinets($40,$41);
    $42 = $cab;
    $43 = (($42) + 40|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (_unix_path_seperators($44)|0);
    $isunix = $45;
    $46 = $viewhdr;
    $47 = ($46|0)!=(0);
    if (!($47)) {
     $48 = HEAP32[((336 + 12|0))>>2]|0;
     $49 = ($48|0)!=(0);
     if ($49) {
      $50 = HEAP32[((336 + 16|0))>>2]|0;
      $51 = ($50|0)!=(0);
      if (!($51)) {
       $52 = $1;
       HEAP32[$vararg_buffer12>>2] = $52;
       (_printf((2128|0),($vararg_buffer12|0))|0);
      }
      (_printf((2152|0),($vararg_buffer15|0))|0);
      (_printf((2200|0),($vararg_buffer17|0))|0);
     } else {
      $53 = HEAP32[((336 + 16|0))>>2]|0;
      $54 = ($53|0)!=(0);
      if (!($54)) {
       $55 = HEAP32[((336 + 28|0))>>2]|0;
       $56 = ($55|0)!=(0);
       $57 = $56 ? 2272 : 2280;
       $58 = $1;
       HEAP32[$vararg_buffer19>>2] = $57;
       $vararg_ptr22 = (($vararg_buffer19) + 4|0);
       HEAP32[$vararg_ptr22>>2] = $58;
       (_printf((2256|0),($vararg_buffer19|0))|0);
      }
     }
     $viewhdr = 1;
    }
    $59 = HEAP32[((336 + 36|0))>>2]|0;
    $60 = ($59|0)!=(0|0);
    if ($60) {
     $61 = HEAP32[((336 + 32|0))>>2]|0;
     $62 = ($61|0)!=(0|0);
     if ($62) {
      $63 = HEAP32[((336 + 32|0))>>2]|0;
      $64 = (_strlen(($63|0))|0);
      $65 = (($64) + 1)|0;
      $66 = $65;
     } else {
      $66 = 0;
     }
     $fname_offset = $66;
    }
    $67 = $cab;
    $68 = (($67) + 40|0);
    $69 = HEAP32[$68>>2]|0;
    $file = $69;
    while(1) {
     $70 = $file;
     $71 = ($70|0)!=(0|0);
     if (!($71)) {
      break;
     }
     $72 = $file;
     $73 = (($72) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = HEAP32[((336 + 32|0))>>2]|0;
     $76 = HEAP32[((336 + 4|0))>>2]|0;
     $77 = $isunix;
     $78 = $file;
     $79 = (($78) + 12|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $80 & 128;
     $82 = (_create_output_name($74,$75,$76,$77,$81)|0);
     $name = $82;
     $83 = ($82|0)!=(0|0);
     do {
      if ($83) {
       $86 = HEAP32[((336 + 36|0))>>2]|0;
       $87 = ($86|0)!=(0|0);
       if ($87) {
        $88 = HEAP32[((336 + 36|0))>>2]|0;
        $89 = $fname_offset;
        $90 = $name;
        $91 = (($90) + ($89)|0);
        $92 = (_rpl_fnmatch($88,$91,16)|0);
        $93 = ($92|0)!=(0);
        if ($93) {
         $94 = $name;
         _free($94);
         break;
        }
       }
       $95 = HEAP32[((336 + 12|0))>>2]|0;
       $96 = ($95|0)!=(0);
       if ($96) {
        $97 = $file;
        $98 = (($97) + 8|0);
        $99 = HEAP32[$98>>2]|0;
        $100 = $file;
        $101 = (($100) + 19|0);
        $102 = HEAP8[$101]|0;
        $103 = $102 << 24 >> 24;
        $104 = $file;
        $105 = (($104) + 20|0);
        $106 = HEAP8[$105]|0;
        $107 = $106 << 24 >> 24;
        $108 = $file;
        $109 = (($108) + 24|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = $file;
        $112 = (($111) + 16|0);
        $113 = HEAP8[$112]|0;
        $114 = $113 << 24 >> 24;
        $115 = $file;
        $116 = (($115) + 17|0);
        $117 = HEAP8[$116]|0;
        $118 = $117 << 24 >> 24;
        $119 = $file;
        $120 = (($119) + 18|0);
        $121 = HEAP8[$120]|0;
        $122 = $121 << 24 >> 24;
        $123 = $name;
        HEAP32[$vararg_buffer23>>2] = $99;
        $vararg_ptr26 = (($vararg_buffer23) + 4|0);
        HEAP32[$vararg_ptr26>>2] = $103;
        $vararg_ptr27 = (($vararg_buffer23) + 8|0);
        HEAP32[$vararg_ptr27>>2] = $107;
        $vararg_ptr28 = (($vararg_buffer23) + 12|0);
        HEAP32[$vararg_ptr28>>2] = $110;
        $vararg_ptr29 = (($vararg_buffer23) + 16|0);
        HEAP32[$vararg_ptr29>>2] = $114;
        $vararg_ptr30 = (($vararg_buffer23) + 20|0);
        HEAP32[$vararg_ptr30>>2] = $118;
        $vararg_ptr31 = (($vararg_buffer23) + 24|0);
        HEAP32[$vararg_ptr31>>2] = $122;
        $vararg_ptr32 = (($vararg_buffer23) + 28|0);
        HEAP32[$vararg_ptr32>>2] = $123;
        (_printf((2296|0),($vararg_buffer23|0))|0);
       } else {
        $124 = HEAP32[((336 + 28|0))>>2]|0;
        $125 = ($124|0)!=(0);
        if ($125) {
         $126 = HEAP32[304>>2]|0;
         $127 = (($126) + 20|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = HEAP32[304>>2]|0;
         $130 = $file;
         $131 = HEAP32[392>>2]|0;
         $132 = (FUNCTION_TABLE_iiii[$128 & 15]($129,$130,$131)|0);
         $133 = ($132|0)!=(0);
         if ($133) {
          $134 = $name;
          $135 = HEAP32[304>>2]|0;
          $136 = (_cab_error($135)|0);
          HEAP32[$vararg_buffer33>>2] = $134;
          $vararg_ptr36 = (($vararg_buffer33) + 4|0);
          HEAP32[$vararg_ptr36>>2] = $136;
          (_printf((2344|0),($vararg_buffer33|0))|0);
          $137 = $errors;
          $138 = (($137) + 1)|0;
          $errors = $138;
         } else {
          $139 = $name;
          $140 = (_strlen(($139|0))|0);
          $141 = (($140) + 8)|0;
          $142 = (($141) + 32)|0;
          $143 = (79 - ($142))|0;
          $spaces = $143;
          $144 = $name;
          HEAP32[$vararg_buffer37>>2] = $144;
          (_printf((2368|0),($vararg_buffer37|0))|0);
          while(1) {
           $145 = $spaces;
           $146 = (($145) + -1)|0;
           $spaces = $146;
           $147 = ($145|0)>(0);
           if (!($147)) {
            break;
           }
           (_putchar(32)|0);
          }
          $148 = HEAP8[2000]|0;
          $149 = $148&255;
          $150 = HEAP8[((2000 + 1|0))]|0;
          $151 = $150&255;
          $152 = HEAP8[((2000 + 2|0))]|0;
          $153 = $152&255;
          $154 = HEAP8[((2000 + 3|0))]|0;
          $155 = $154&255;
          $156 = HEAP8[((2000 + 4|0))]|0;
          $157 = $156&255;
          $158 = HEAP8[((2000 + 5|0))]|0;
          $159 = $158&255;
          $160 = HEAP8[((2000 + 6|0))]|0;
          $161 = $160&255;
          $162 = HEAP8[((2000 + 7|0))]|0;
          $163 = $162&255;
          $164 = HEAP8[((2000 + 8|0))]|0;
          $165 = $164&255;
          $166 = HEAP8[((2000 + 9|0))]|0;
          $167 = $166&255;
          $168 = HEAP8[((2000 + 10|0))]|0;
          $169 = $168&255;
          $170 = HEAP8[((2000 + 11|0))]|0;
          $171 = $170&255;
          $172 = HEAP8[((2000 + 12|0))]|0;
          $173 = $172&255;
          $174 = HEAP8[((2000 + 13|0))]|0;
          $175 = $174&255;
          $176 = HEAP8[((2000 + 14|0))]|0;
          $177 = $176&255;
          $178 = HEAP8[((2000 + 15|0))]|0;
          $179 = $178&255;
          HEAP32[$vararg_buffer40>>2] = $149;
          $vararg_ptr43 = (($vararg_buffer40) + 4|0);
          HEAP32[$vararg_ptr43>>2] = $151;
          $vararg_ptr44 = (($vararg_buffer40) + 8|0);
          HEAP32[$vararg_ptr44>>2] = $153;
          $vararg_ptr45 = (($vararg_buffer40) + 12|0);
          HEAP32[$vararg_ptr45>>2] = $155;
          $vararg_ptr46 = (($vararg_buffer40) + 16|0);
          HEAP32[$vararg_ptr46>>2] = $157;
          $vararg_ptr47 = (($vararg_buffer40) + 20|0);
          HEAP32[$vararg_ptr47>>2] = $159;
          $vararg_ptr48 = (($vararg_buffer40) + 24|0);
          HEAP32[$vararg_ptr48>>2] = $161;
          $vararg_ptr49 = (($vararg_buffer40) + 28|0);
          HEAP32[$vararg_ptr49>>2] = $163;
          $vararg_ptr50 = (($vararg_buffer40) + 32|0);
          HEAP32[$vararg_ptr50>>2] = $165;
          $vararg_ptr51 = (($vararg_buffer40) + 36|0);
          HEAP32[$vararg_ptr51>>2] = $167;
          $vararg_ptr52 = (($vararg_buffer40) + 40|0);
          HEAP32[$vararg_ptr52>>2] = $169;
          $vararg_ptr53 = (($vararg_buffer40) + 44|0);
          HEAP32[$vararg_ptr53>>2] = $171;
          $vararg_ptr54 = (($vararg_buffer40) + 48|0);
          HEAP32[$vararg_ptr54>>2] = $173;
          $vararg_ptr55 = (($vararg_buffer40) + 52|0);
          HEAP32[$vararg_ptr55>>2] = $175;
          $vararg_ptr56 = (($vararg_buffer40) + 56|0);
          HEAP32[$vararg_ptr56>>2] = $177;
          $vararg_ptr57 = (($vararg_buffer40) + 60|0);
          HEAP32[$vararg_ptr57>>2] = $179;
          (_printf((2384|0),($vararg_buffer40|0))|0);
         }
        } else {
         $180 = HEAP32[((336 + 8|0))>>2]|0;
         $181 = ($180|0)!=(0);
         if ($181) {
          $182 = HEAP32[304>>2]|0;
          $183 = (($182) + 20|0);
          $184 = HEAP32[$183>>2]|0;
          $185 = HEAP32[304>>2]|0;
          $186 = $file;
          $187 = HEAP32[384>>2]|0;
          $188 = (FUNCTION_TABLE_iiii[$184 & 15]($185,$186,$187)|0);
          $189 = ($188|0)!=(0);
          if ($189) {
           $190 = HEAP32[_stderr>>2]|0;
           $191 = HEAP32[384>>2]|0;
           $192 = $name;
           $193 = HEAP32[304>>2]|0;
           $194 = (_cab_error($193)|0);
           HEAP32[$vararg_buffer58>>2] = $191;
           $vararg_ptr61 = (($vararg_buffer58) + 4|0);
           HEAP32[$vararg_ptr61>>2] = $192;
           $vararg_ptr62 = (($vararg_buffer58) + 8|0);
           HEAP32[$vararg_ptr62>>2] = $194;
           (_fprintf(($190|0),(2456|0),($vararg_buffer58|0))|0);
           $195 = $errors;
           $196 = (($195) + 1)|0;
           $errors = $196;
          }
         } else {
          $197 = HEAP32[((336 + 16|0))>>2]|0;
          $198 = ($197|0)!=(0);
          if (!($198)) {
           $199 = $name;
           HEAP32[$vararg_buffer63>>2] = $199;
           (_printf((2472|0),($vararg_buffer63|0))|0);
          }
          $200 = $name;
          $201 = (_ensure_filepath($200)|0);
          $202 = ($201|0)!=(0);
          if ($202) {
           $207 = HEAP32[304>>2]|0;
           $208 = (($207) + 20|0);
           $209 = HEAP32[$208>>2]|0;
           $210 = HEAP32[304>>2]|0;
           $211 = $file;
           $212 = $name;
           $213 = (FUNCTION_TABLE_iiii[$209 & 15]($210,$211,$212)|0);
           $214 = ($213|0)!=(0);
           if ($214) {
            $215 = HEAP32[_stderr>>2]|0;
            $216 = $name;
            $217 = HEAP32[304>>2]|0;
            $218 = (_cab_error($217)|0);
            HEAP32[$vararg_buffer69>>2] = $216;
            $vararg_ptr72 = (($vararg_buffer69) + 4|0);
            HEAP32[$vararg_ptr72>>2] = $218;
            (_fprintf(($215|0),(2088|0),($vararg_buffer69|0))|0);
            $219 = $errors;
            $220 = (($219) + 1)|0;
            $errors = $220;
           } else {
            $221 = $file;
            $222 = $name;
            _set_date_and_perm($221,$222);
           }
          } else {
           $203 = HEAP32[_stderr>>2]|0;
           $204 = $name;
           HEAP32[$vararg_buffer66>>2] = $204;
           (_fprintf(($203|0),(2496|0),($vararg_buffer66|0))|0);
           $205 = $errors;
           $206 = (($205) + 1)|0;
           $errors = $206;
          }
         }
        }
       }
       $223 = $name;
       _free($223);
      } else {
       $84 = $errors;
       $85 = (($84) + 1)|0;
       $errors = $85;
      }
     } while(0);
     $224 = $file;
     $225 = HEAP32[$224>>2]|0;
     $file = $225;
    }
    $226 = $cab;
    $227 = (($226) + 16|0);
    $228 = HEAP32[$227>>2]|0;
    $cab2 = $228;
    while(1) {
     $229 = $cab2;
     $230 = ($229|0)!=(0|0);
     if (!($230)) {
      break;
     }
     $231 = $cab2;
     $232 = (($231) + 4|0);
     $233 = HEAP32[$232>>2]|0;
     _free($233);
     $234 = $cab2;
     $235 = (($234) + 16|0);
     $236 = HEAP32[$235>>2]|0;
     $cab2 = $236;
    }
    $237 = $cab;
    $238 = (($237) + 20|0);
    $239 = HEAP32[$238>>2]|0;
    $cab2 = $239;
    while(1) {
     $240 = $cab2;
     $241 = ($240|0)!=(0|0);
     if (!($241)) {
      break;
     }
     $242 = $cab2;
     $243 = (($242) + 4|0);
     $244 = HEAP32[$243>>2]|0;
     _free($244);
     $245 = $cab2;
     $246 = (($245) + 20|0);
     $247 = HEAP32[$246>>2]|0;
     $cab2 = $247;
    }
    $248 = $cab;
    $249 = HEAP32[$248>>2]|0;
    $cab = $249;
   }
   $250 = HEAP32[304>>2]|0;
   $251 = (($250) + 4|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = HEAP32[304>>2]|0;
   $254 = $basecab;
   FUNCTION_TABLE_vii[$252 & 1]($253,$254);
   $255 = $errors;
   $0 = $255;
   $256 = $0;
   STACKTOP = sp;return ($256|0);
  }
 }
 $10 = HEAP32[((336 + 16|0))>>2]|0;
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = HEAP32[$from>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $15 = $1;
   $16 = HEAP32[$from>>2]|0;
   HEAP32[$vararg_buffer1>>2] = $15;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $16;
   (_printf((2048|0),($vararg_buffer1|0))|0);
  } else {
   $14 = $1;
   HEAP32[$vararg_buffer>>2] = $14;
   (_printf((2016|0),($vararg_buffer|0))|0);
  }
 }
 $0 = 0;
 $256 = $0;
 STACKTOP = sp;return ($256|0);
}
function _forget_files($fml) {
 $fml = $fml|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fm = 0, $next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $fml;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $fm = $2;
 while(1) {
  $3 = $fm;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $fm;
  $6 = HEAP32[$5>>2]|0;
  $next = $6;
  $7 = $fm;
  $8 = (($7) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = $fm;
  _free($10);
  $11 = $next;
  $fm = $11;
 }
 $12 = $0;
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function _recall_file($fml,$name,$from) {
 $fml = $fml|0;
 $name = $name|0;
 $from = $from|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fm = 0, $st_buf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $st_buf = sp;
 $1 = $fml;
 $2 = $name;
 $3 = $from;
 $4 = $2;
 $5 = (_stat(($4|0),($st_buf|0))|0);
 $6 = ($5|0)!=(0);
 if ($6) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $7 = $1;
 $fm = $7;
 while(1) {
  $8 = $fm;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   label = 12;
   break;
  }
  $10 = (($st_buf) + 72|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $fm;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)==($14|0);
  if ($15) {
   $16 = HEAP32[$st_buf>>2]|0;
   $17 = $fm;
   $18 = (($17) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    break;
   }
  }
  $27 = $fm;
  $28 = HEAP32[$27>>2]|0;
  $fm = $28;
 }
 if ((label|0) == 12) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $21 = $3;
 $22 = ($21|0)!=(0|0);
 if ($22) {
  $23 = $fm;
  $24 = (($23) + 12|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $3;
  HEAP32[$26>>2] = $25;
 }
 $0 = 1;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _cab_error($cd) {
 $cd = $cd|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cd;
 $2 = $1;
 $3 = (($2) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = (FUNCTION_TABLE_ii[$4 & 3]($5)|0);
 switch ($6|0) {
 case 5: case 4: case 3: case 2:  {
  $7 = (___errno_location()|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_strerror(($8|0))|0);
  $0 = $9;
  break;
 }
 case 8:  {
  $0 = 2800;
  break;
 }
 case 9:  {
  $0 = 2832;
  break;
 }
 case 11:  {
  $0 = 2848;
  break;
 }
 case 6:  {
  $0 = 2760;
  break;
 }
 case 7:  {
  $0 = 2776;
  break;
 }
 default: {
  $0 = 2872;
 }
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function _load_spanning_cabinets($basecab,$basename) {
 $basecab = $basecab|0;
 $basename = $basename|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cab = 0, $cab2 = 0, $name = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr19 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer16 = sp + 40|0;
 $vararg_buffer12 = sp + 56|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 16|0;
 $0 = $basecab;
 $1 = $basename;
 $2 = $0;
 $cab = $2;
 while(1) {
  $3 = $cab;
  $4 = (($3) + 56|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 1;
  $7 = ($6|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $1;
  $9 = $cab;
  $10 = (($9) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_find_cabinet_file($8,$11)|0);
  $name = $12;
  $13 = ($12|0)!=(0|0);
  if (!($13)) {
   label = 4;
   break;
  }
  $19 = HEAP32[((336 + 20|0))>>2]|0;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = HEAP32[312>>2]|0;
   $22 = $name;
   $23 = (_recall_file($21,$22,0)|0);
   $24 = ($23|0)!=(0);
   if (!($24)) {
    label = 7;
    break;
   }
  }
  $25 = HEAP32[((336 + 16|0))>>2]|0;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   $27 = $1;
   $28 = $cab;
   $29 = (($28) + 24|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $cab;
   $32 = (($31) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   HEAP32[$vararg_buffer2>>2] = $27;
   $vararg_ptr5 = (($vararg_buffer2) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $30;
   $vararg_ptr6 = (($vararg_buffer2) + 8|0);
   HEAP32[$vararg_ptr6>>2] = $33;
   (_printf((2632|0),($vararg_buffer2|0))|0);
  }
  $34 = HEAP32[304>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = HEAP32[304>>2]|0;
  $37 = $name;
  $38 = (FUNCTION_TABLE_iii[$35 & 15]($36,$37)|0);
  $cab2 = $38;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   label = 12;
   break;
  }
  $40 = HEAP32[304>>2]|0;
  $41 = (($40) + 16|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[304>>2]|0;
  $44 = $cab;
  $45 = $cab2;
  $46 = (FUNCTION_TABLE_iiii[$42 & 15]($43,$44,$45)|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   label = 12;
   break;
  }
  $62 = $name;
  $63 = $1;
  _memorise_file(320,$62,$63);
  $64 = $cab;
  $65 = (($64) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $cab = $66;
 }
 if ((label|0) == 4) {
  $14 = HEAP32[_stderr>>2]|0;
  $15 = $1;
  $16 = $cab;
  $17 = (($16) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  HEAP32[$vararg_buffer>>2] = $15;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $18;
  (_fprintf(($14|0),(2608|0),($vararg_buffer|0))|0);
 }
 else if ((label|0) == 7) {
 }
 else if ((label|0) == 12) {
  $48 = HEAP32[_stderr>>2]|0;
  $49 = $1;
  $50 = $cab;
  $51 = (($50) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[304>>2]|0;
  $54 = (_cab_error($53)|0);
  HEAP32[$vararg_buffer7>>2] = $49;
  $vararg_ptr10 = (($vararg_buffer7) + 4|0);
  HEAP32[$vararg_ptr10>>2] = $52;
  $vararg_ptr11 = (($vararg_buffer7) + 8|0);
  HEAP32[$vararg_ptr11>>2] = $54;
  (_fprintf(($48|0),(2672|0),($vararg_buffer7|0))|0);
  $55 = $cab2;
  $56 = ($55|0)!=(0|0);
  if ($56) {
   $57 = HEAP32[304>>2]|0;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[304>>2]|0;
   $61 = $cab2;
   FUNCTION_TABLE_vii[$59 & 1]($60,$61);
  }
 }
 $67 = $0;
 $cab = $67;
 while(1) {
  $68 = $cab;
  $69 = (($68) + 56|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $70 & 2;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   label = 33;
   break;
  }
  $73 = $1;
  $74 = $cab;
  $75 = (($74) + 28|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (_find_cabinet_file($73,$76)|0);
  $name = $77;
  $78 = ($77|0)!=(0|0);
  if (!($78)) {
   label = 20;
   break;
  }
  $84 = HEAP32[((336 + 20|0))>>2]|0;
  $85 = ($84|0)!=(0);
  if ($85) {
   $86 = HEAP32[312>>2]|0;
   $87 = $name;
   $88 = (_recall_file($86,$87,0)|0);
   $89 = ($88|0)!=(0);
   if (!($89)) {
    label = 23;
    break;
   }
  }
  $90 = HEAP32[((336 + 16|0))>>2]|0;
  $91 = ($90|0)!=(0);
  if (!($91)) {
   $92 = $1;
   $93 = $cab;
   $94 = (($93) + 28|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $cab;
   $97 = (($96) + 36|0);
   $98 = HEAP32[$97>>2]|0;
   HEAP32[$vararg_buffer16>>2] = $92;
   $vararg_ptr19 = (($vararg_buffer16) + 4|0);
   HEAP32[$vararg_ptr19>>2] = $95;
   $vararg_ptr20 = (($vararg_buffer16) + 8|0);
   HEAP32[$vararg_ptr20>>2] = $98;
   (_printf((2704|0),($vararg_buffer16|0))|0);
  }
  $99 = HEAP32[304>>2]|0;
  $100 = HEAP32[$99>>2]|0;
  $101 = HEAP32[304>>2]|0;
  $102 = $name;
  $103 = (FUNCTION_TABLE_iii[$100 & 15]($101,$102)|0);
  $cab2 = $103;
  $104 = ($103|0)!=(0|0);
  if (!($104)) {
   label = 28;
   break;
  }
  $105 = HEAP32[304>>2]|0;
  $106 = (($105) + 12|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = HEAP32[304>>2]|0;
  $109 = $cab;
  $110 = $cab2;
  $111 = (FUNCTION_TABLE_iiii[$107 & 15]($108,$109,$110)|0);
  $112 = ($111|0)!=(0);
  if ($112) {
   label = 28;
   break;
  }
  $127 = $name;
  $128 = $1;
  _memorise_file(320,$127,$128);
  $129 = $cab;
  $130 = (($129) + 20|0);
  $131 = HEAP32[$130>>2]|0;
  $cab = $131;
 }
 if ((label|0) == 20) {
  $79 = HEAP32[_stderr>>2]|0;
  $80 = $1;
  $81 = $cab;
  $82 = (($81) + 28|0);
  $83 = HEAP32[$82>>2]|0;
  HEAP32[$vararg_buffer12>>2] = $80;
  $vararg_ptr15 = (($vararg_buffer12) + 4|0);
  HEAP32[$vararg_ptr15>>2] = $83;
  (_fprintf(($79|0),(2608|0),($vararg_buffer12|0))|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  $113 = HEAP32[_stderr>>2]|0;
  $114 = $1;
  $115 = $cab;
  $116 = (($115) + 28|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = HEAP32[304>>2]|0;
  $119 = (_cab_error($118)|0);
  HEAP32[$vararg_buffer21>>2] = $114;
  $vararg_ptr24 = (($vararg_buffer21) + 4|0);
  HEAP32[$vararg_ptr24>>2] = $117;
  $vararg_ptr25 = (($vararg_buffer21) + 8|0);
  HEAP32[$vararg_ptr25>>2] = $119;
  (_fprintf(($113|0),(2728|0),($vararg_buffer21|0))|0);
  $120 = $cab2;
  $121 = ($120|0)!=(0|0);
  if ($121) {
   $122 = HEAP32[304>>2]|0;
   $123 = (($122) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = HEAP32[304>>2]|0;
   $126 = $cab2;
   FUNCTION_TABLE_vii[$124 & 1]($125,$126);
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 33) {
  STACKTOP = sp;return;
 }
}
function _unix_path_seperators($files) {
 $files = $files|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $backslash = 0, $c = 0, $fi = 0, $len = 0, $name = 0, $oldlen = 0, $oldname = 0, $p = 0, $p1 = 0, $slash = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $files;
 $slash = 0;
 $backslash = 0;
 $2 = $1;
 $fi = $2;
 while(1) {
  $3 = $fi;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $fi;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $p = $7;
  while(1) {
   $8 = $p;
   $9 = HEAP8[$8]|0;
   $10 = ($9<<24>>24)!=(0);
   if (!($10)) {
    break;
   }
   $11 = $p;
   $12 = HEAP8[$11]|0;
   $13 = $12 << 24 >> 24;
   $14 = ($13|0)==(47);
   if ($14) {
    $slash = 1;
   }
   $15 = $p;
   $16 = HEAP8[$15]|0;
   $17 = $16 << 24 >> 24;
   $18 = ($17|0)==(92);
   if ($18) {
    $backslash = 1;
   }
   $19 = $p;
   $20 = (($19) + 1|0);
   $p = $20;
  }
  $21 = $slash;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)!=(0);
  if ($23) {
   $24 = $backslash;
   $25 = $24 << 24 >> 24;
   $26 = ($25|0)!=(0);
   if ($26) {
    label = 13;
    break;
   }
  }
  $27 = $fi;
  $28 = HEAP32[$27>>2]|0;
  $fi = $28;
 }
 if ((label|0) == 13) {
 }
 $29 = $slash;
 $30 = ($29<<24>>24)!=(0);
 if (!($30)) {
  $0 = 0;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $31 = $backslash;
 $32 = ($31<<24>>24)!=(0);
 if (!($32)) {
  $0 = 1;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  $36 = $fi;
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $p1 = $38;
  while(1) {
   $39 = $p1;
   $40 = (($39) + 1|0);
   $p1 = $40;
   $41 = HEAP8[$39]|0;
   $c = $41;
   $42 = ($41<<24>>24)!=(0);
   if (!($42)) {
    label = 29;
    break;
   }
   $43 = $c;
   $44 = $43 << 24 >> 24;
   $45 = ($44|0)==(92);
   if ($45) {
    label = 25;
    break;
   }
   $46 = $c;
   $47 = $46 << 24 >> 24;
   $48 = ($47|0)==(47);
   if ($48) {
    label = 27;
    break;
   }
  }
  if ((label|0) == 25) {
   $0 = 0;
   $103 = $0;
   STACKTOP = sp;return ($103|0);
  }
  else if ((label|0) == 27) {
   $0 = 1;
   $103 = $0;
   STACKTOP = sp;return ($103|0);
  }
  else if ((label|0) == 29) {
   $0 = 0;
   $103 = $0;
   STACKTOP = sp;return ($103|0);
  }
 }
 $oldname = 0;
 $oldlen = 0;
 $49 = $1;
 $fi = $49;
 while(1) {
  $50 = $fi;
  $51 = ($50|0)!=(0|0);
  if (!($51)) {
   label = 48;
   break;
  }
  $52 = $fi;
  $53 = (($52) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $name = $54;
  $len = 0;
  while(1) {
   $55 = $len;
   $56 = $name;
   $57 = (($56) + ($55)|0);
   $58 = HEAP8[$57]|0;
   $59 = ($58<<24>>24)!=(0);
   if (!($59)) {
    break;
   }
   $60 = $len;
   $61 = $name;
   $62 = (($61) + ($60)|0);
   $63 = HEAP8[$62]|0;
   $64 = $63 << 24 >> 24;
   $65 = ($64|0)==(92);
   if ($65) {
    label = 36;
    break;
   }
   $66 = $len;
   $67 = $name;
   $68 = (($67) + ($66)|0);
   $69 = HEAP8[$68]|0;
   $70 = $69 << 24 >> 24;
   $71 = ($70|0)==(47);
   if ($71) {
    label = 36;
    break;
   }
   $72 = $len;
   $73 = (($72) + 1)|0;
   $len = $73;
  }
  if ((label|0) == 36) {
   label = 0;
  }
  $74 = $len;
  $75 = $name;
  $76 = (($75) + ($74)|0);
  $77 = HEAP8[$76]|0;
  $78 = ($77<<24>>24)!=(0);
  if ($78) {
   $79 = $len;
   $80 = (($79) + 1)|0;
   $len = $80;
  } else {
   $len = 0;
  }
  $81 = $len;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $len;
   $84 = $oldlen;
   $85 = ($83|0)==($84|0);
   if ($85) {
    $86 = $name;
    $87 = $oldname;
    $88 = $len;
    $89 = (_strncmp($86,$87,$88)|0);
    $90 = ($89|0)==(0);
    if ($90) {
     label = 44;
     break;
    }
   }
  }
  $99 = $name;
  $oldname = $99;
  $100 = $len;
  $oldlen = $100;
  $101 = $fi;
  $102 = HEAP32[$101>>2]|0;
  $fi = $102;
 }
 if ((label|0) == 44) {
  $91 = $len;
  $92 = (($91) - 1)|0;
  $93 = $name;
  $94 = (($93) + ($92)|0);
  $95 = HEAP8[$94]|0;
  $96 = $95 << 24 >> 24;
  $97 = ($96|0)==(92);
  $98 = $97 ? 0 : 1;
  $0 = $98;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 else if ((label|0) == 48) {
  $0 = 0;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 return 0|0;
}
function _create_output_name($fname,$dir,$lower,$isunix,$utf8) {
 $fname = $fname|0;
 $dir = $dir|0;
 $lower = $lower|0;
 $isunix = $isunix|0;
 $utf8 = $utf8|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $fe = 0, $name = 0, $p = 0, $sep = 0, $slash = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $1 = $fname;
 $2 = $dir;
 $3 = $lower;
 $4 = $isunix;
 $5 = $utf8;
 $6 = $4;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 47 : 92;
 $9 = $8&255;
 $sep = $9;
 $10 = $4;
 $11 = ($10|0)!=(0);
 $12 = $11 ? 92 : 47;
 $13 = $12&255;
 $slash = $13;
 $14 = $1;
 $15 = (_strlen(($14|0))|0);
 $x = $15;
 $16 = $5;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $x;
  $19 = ($18*6)|0;
  $x = $19;
 }
 $20 = $2;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = $2;
  $23 = (_strlen(($22|0))|0);
  $24 = $x;
  $25 = (($24) + ($23))|0;
  $x = $25;
 }
 $26 = $x;
 $27 = (($26) + 2)|0;
 $x = $27;
 $28 = $x;
 $29 = (_malloc($28)|0);
 $name = $29;
 $30 = ($29|0)!=(0|0);
 if (!($30)) {
  $31 = HEAP32[_stderr>>2]|0;
  $32 = $x;
  HEAP32[$vararg_buffer>>2] = $32;
  (_fprintf(($31|0),(2528|0),($vararg_buffer|0))|0);
  $0 = 0;
  $448 = $0;
  STACKTOP = sp;return ($448|0);
 }
 $33 = $name;
 HEAP8[$33] = 0;
 $34 = $2;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $name;
  $37 = $2;
  (_strcpy(($36|0),($37|0))|0);
  $38 = $name;
  (_strcat(($38|0),(2576|0))|0);
 }
 while(1) {
  $39 = $1;
  $40 = HEAP8[$39]|0;
  $41 = $40&255;
  $42 = $sep;
  $43 = $42&255;
  $44 = ($41|0)==($43|0);
  if (!($44)) {
   break;
  }
  $45 = $1;
  $46 = (($45) + 1|0);
  $1 = $46;
 }
 $47 = $name;
 $48 = (_strlen(($47|0))|0);
 $49 = $name;
 $50 = (($49) + ($48)|0);
 $p = $50;
 $51 = $1;
 $52 = (_strlen(($51|0))|0);
 $53 = $1;
 $54 = (($53) + ($52)|0);
 $fe = $54;
 $55 = $5;
 $56 = ($55|0)!=(0);
 do {
  if ($56) {
   while(1) {
    $57 = $1;
    $58 = $fe;
    $59 = ($57>>>0)>($58>>>0);
    if ($59) {
     break;
    }
    $62 = $1;
    $63 = (($62) + 1|0);
    $1 = $63;
    $64 = HEAP8[$62]|0;
    $c = $64;
    $65 = $64&255;
    $66 = ($65|0)<(128);
    if ($66) {
     $67 = $c;
     $68 = $67&255;
     $x = $68;
    } else {
     $69 = $c;
     $70 = $69&255;
     $71 = ($70|0)>=(192);
     if ($71) {
      $72 = $c;
      $73 = $72&255;
      $74 = ($73|0)<=(223);
      if ($74) {
       $75 = $c;
       $76 = $75&255;
       $77 = $76 & 31;
       $78 = $77 << 6;
       $x = $78;
       $79 = $1;
       $80 = (($79) + 1|0);
       $1 = $80;
       $81 = HEAP8[$79]|0;
       $82 = $81&255;
       $83 = $82 & 63;
       $84 = $x;
       $85 = $84 | $83;
       $x = $85;
      } else {
       label = 21;
      }
     } else {
      label = 21;
     }
     if ((label|0) == 21) {
      label = 0;
      $86 = $c;
      $87 = $86&255;
      $88 = ($87|0)>=(224);
      if ($88) {
       $89 = $c;
       $90 = $89&255;
       $91 = ($90|0)<=(239);
       if ($91) {
        $92 = $c;
        $93 = $92&255;
        $94 = $93 & 15;
        $95 = $94 << 12;
        $x = $95;
        $96 = $1;
        $97 = (($96) + 1|0);
        $1 = $97;
        $98 = HEAP8[$96]|0;
        $99 = $98&255;
        $100 = $99 & 63;
        $101 = $100 << 6;
        $102 = $x;
        $103 = $102 | $101;
        $x = $103;
        $104 = $1;
        $105 = (($104) + 1|0);
        $1 = $105;
        $106 = HEAP8[$104]|0;
        $107 = $106&255;
        $108 = $107 & 63;
        $109 = $x;
        $110 = $109 | $108;
        $x = $110;
       } else {
        label = 24;
       }
      } else {
       label = 24;
      }
      if ((label|0) == 24) {
       label = 0;
       $111 = $c;
       $112 = $111&255;
       $113 = ($112|0)>=(240);
       if ($113) {
        $114 = $c;
        $115 = $114&255;
        $116 = ($115|0)<=(247);
        if ($116) {
         $117 = $c;
         $118 = $117&255;
         $119 = $118 & 7;
         $120 = $119 << 18;
         $x = $120;
         $121 = $1;
         $122 = (($121) + 1|0);
         $1 = $122;
         $123 = HEAP8[$121]|0;
         $124 = $123&255;
         $125 = $124 & 63;
         $126 = $125 << 12;
         $127 = $x;
         $128 = $127 | $126;
         $x = $128;
         $129 = $1;
         $130 = (($129) + 1|0);
         $1 = $130;
         $131 = HEAP8[$129]|0;
         $132 = $131&255;
         $133 = $132 & 63;
         $134 = $133 << 6;
         $135 = $x;
         $136 = $135 | $134;
         $x = $136;
         $137 = $1;
         $138 = (($137) + 1|0);
         $1 = $138;
         $139 = HEAP8[$137]|0;
         $140 = $139&255;
         $141 = $140 & 63;
         $142 = $x;
         $143 = $142 | $141;
         $x = $143;
        } else {
         label = 27;
        }
       } else {
        label = 27;
       }
       if ((label|0) == 27) {
        label = 0;
        $144 = $c;
        $145 = $144&255;
        $146 = ($145|0)>=(248);
        if ($146) {
         $147 = $c;
         $148 = $147&255;
         $149 = ($148|0)<=(251);
         if ($149) {
          $150 = $c;
          $151 = $150&255;
          $152 = $151 & 3;
          $153 = $152 << 24;
          $x = $153;
          $154 = $1;
          $155 = (($154) + 1|0);
          $1 = $155;
          $156 = HEAP8[$154]|0;
          $157 = $156&255;
          $158 = $157 & 63;
          $159 = $158 << 18;
          $160 = $x;
          $161 = $160 | $159;
          $x = $161;
          $162 = $1;
          $163 = (($162) + 1|0);
          $1 = $163;
          $164 = HEAP8[$162]|0;
          $165 = $164&255;
          $166 = $165 & 63;
          $167 = $166 << 12;
          $168 = $x;
          $169 = $168 | $167;
          $x = $169;
          $170 = $1;
          $171 = (($170) + 1|0);
          $1 = $171;
          $172 = HEAP8[$170]|0;
          $173 = $172&255;
          $174 = $173 & 63;
          $175 = $174 << 6;
          $176 = $x;
          $177 = $176 | $175;
          $x = $177;
          $178 = $1;
          $179 = (($178) + 1|0);
          $1 = $179;
          $180 = HEAP8[$178]|0;
          $181 = $180&255;
          $182 = $181 & 63;
          $183 = $x;
          $184 = $183 | $182;
          $x = $184;
         } else {
          label = 30;
         }
        } else {
         label = 30;
        }
        if ((label|0) == 30) {
         label = 0;
         $185 = $c;
         $186 = $185&255;
         $187 = ($186|0)>=(252);
         if ($187) {
          $188 = $c;
          $189 = $188&255;
          $190 = ($189|0)<=(253);
          if ($190) {
           $191 = $c;
           $192 = $191&255;
           $193 = $192 & 1;
           $194 = $193 << 30;
           $x = $194;
           $195 = $1;
           $196 = (($195) + 1|0);
           $1 = $196;
           $197 = HEAP8[$195]|0;
           $198 = $197&255;
           $199 = $198 & 63;
           $200 = $199 << 24;
           $201 = $x;
           $202 = $201 | $200;
           $x = $202;
           $203 = $1;
           $204 = (($203) + 1|0);
           $1 = $204;
           $205 = HEAP8[$203]|0;
           $206 = $205&255;
           $207 = $206 & 63;
           $208 = $207 << 18;
           $209 = $x;
           $210 = $209 | $208;
           $x = $210;
           $211 = $1;
           $212 = (($211) + 1|0);
           $1 = $212;
           $213 = HEAP8[$211]|0;
           $214 = $213&255;
           $215 = $214 & 63;
           $216 = $215 << 12;
           $217 = $x;
           $218 = $217 | $216;
           $x = $218;
           $219 = $1;
           $220 = (($219) + 1|0);
           $1 = $220;
           $221 = HEAP8[$219]|0;
           $222 = $221&255;
           $223 = $222 & 63;
           $224 = $223 << 6;
           $225 = $x;
           $226 = $225 | $224;
           $x = $226;
           $227 = $1;
           $228 = (($227) + 1|0);
           $1 = $228;
           $229 = HEAP8[$227]|0;
           $230 = $229&255;
           $231 = $230 & 63;
           $232 = $x;
           $233 = $232 | $231;
           $x = $233;
          } else {
           label = 33;
          }
         } else {
          label = 33;
         }
         if ((label|0) == 33) {
          label = 0;
          $x = 63;
         }
        }
       }
      }
     }
    }
    $234 = $x;
    $235 = $sep;
    $236 = $235&255;
    $237 = ($234|0)==($236|0);
    if ($237) {
     $x = 47;
    } else {
     $238 = $x;
     $239 = $slash;
     $240 = $239&255;
     $241 = ($238|0)==($240|0);
     if ($241) {
      $x = 92;
     } else {
      $242 = $3;
      $243 = ($242|0)!=(0);
      if ($243) {
       $244 = $x;
       $245 = (_tolower(($244|0))|0);
       $x = $245;
      }
     }
    }
    $246 = $x;
    $247 = ($246>>>0)<(128);
    if ($247) {
     $248 = $x;
     $249 = $248&255;
     $250 = $p;
     $251 = (($250) + 1|0);
     $p = $251;
     HEAP8[$250] = $249;
    } else {
     $252 = $x;
     $253 = ($252>>>0)<(2048);
     if ($253) {
      $254 = $x;
      $255 = $254 >>> 6;
      $256 = 192 | $255;
      $257 = $256&255;
      $258 = $p;
      $259 = (($258) + 1|0);
      $p = $259;
      HEAP8[$258] = $257;
      $260 = $x;
      $261 = $260 & 63;
      $262 = 128 | $261;
      $263 = $262&255;
      $264 = $p;
      $265 = (($264) + 1|0);
      $p = $265;
      HEAP8[$264] = $263;
     } else {
      $266 = $x;
      $267 = ($266>>>0)<(65536);
      if ($267) {
       $268 = $x;
       $269 = $268 >>> 12;
       $270 = 224 | $269;
       $271 = $270&255;
       $272 = $p;
       $273 = (($272) + 1|0);
       $p = $273;
       HEAP8[$272] = $271;
       $274 = $x;
       $275 = $274 >>> 6;
       $276 = $275 & 63;
       $277 = 128 | $276;
       $278 = $277&255;
       $279 = $p;
       $280 = (($279) + 1|0);
       $p = $280;
       HEAP8[$279] = $278;
       $281 = $x;
       $282 = $281 & 63;
       $283 = 128 | $282;
       $284 = $283&255;
       $285 = $p;
       $286 = (($285) + 1|0);
       $p = $286;
       HEAP8[$285] = $284;
      } else {
       $287 = $x;
       $288 = ($287>>>0)<(2097152);
       if ($288) {
        $289 = $x;
        $290 = $289 >>> 18;
        $291 = 240 | $290;
        $292 = $291&255;
        $293 = $p;
        $294 = (($293) + 1|0);
        $p = $294;
        HEAP8[$293] = $292;
        $295 = $x;
        $296 = $295 >>> 12;
        $297 = $296 & 63;
        $298 = 128 | $297;
        $299 = $298&255;
        $300 = $p;
        $301 = (($300) + 1|0);
        $p = $301;
        HEAP8[$300] = $299;
        $302 = $x;
        $303 = $302 >>> 6;
        $304 = $303 & 63;
        $305 = 128 | $304;
        $306 = $305&255;
        $307 = $p;
        $308 = (($307) + 1|0);
        $p = $308;
        HEAP8[$307] = $306;
        $309 = $x;
        $310 = $309 & 63;
        $311 = 128 | $310;
        $312 = $311&255;
        $313 = $p;
        $314 = (($313) + 1|0);
        $p = $314;
        HEAP8[$313] = $312;
       } else {
        $315 = $x;
        $316 = ($315>>>0)<(67108864);
        if ($316) {
         $317 = $x;
         $318 = $317 >>> 24;
         $319 = 248 | $318;
         $320 = $319&255;
         $321 = $p;
         $322 = (($321) + 1|0);
         $p = $322;
         HEAP8[$321] = $320;
         $323 = $x;
         $324 = $323 >>> 18;
         $325 = $324 & 63;
         $326 = 128 | $325;
         $327 = $326&255;
         $328 = $p;
         $329 = (($328) + 1|0);
         $p = $329;
         HEAP8[$328] = $327;
         $330 = $x;
         $331 = $330 >>> 12;
         $332 = $331 & 63;
         $333 = 128 | $332;
         $334 = $333&255;
         $335 = $p;
         $336 = (($335) + 1|0);
         $p = $336;
         HEAP8[$335] = $334;
         $337 = $x;
         $338 = $337 >>> 6;
         $339 = $338 & 63;
         $340 = 128 | $339;
         $341 = $340&255;
         $342 = $p;
         $343 = (($342) + 1|0);
         $p = $343;
         HEAP8[$342] = $341;
         $344 = $x;
         $345 = $344 & 63;
         $346 = 128 | $345;
         $347 = $346&255;
         $348 = $p;
         $349 = (($348) + 1|0);
         $p = $349;
         HEAP8[$348] = $347;
        } else {
         $350 = $x;
         $351 = $350 >>> 30;
         $352 = 252 | $351;
         $353 = $352&255;
         $354 = $p;
         $355 = (($354) + 1|0);
         $p = $355;
         HEAP8[$354] = $353;
         $356 = $x;
         $357 = $356 >>> 24;
         $358 = $357 & 63;
         $359 = 128 | $358;
         $360 = $359&255;
         $361 = $p;
         $362 = (($361) + 1|0);
         $p = $362;
         HEAP8[$361] = $360;
         $363 = $x;
         $364 = $363 >>> 18;
         $365 = $364 & 63;
         $366 = 128 | $365;
         $367 = $366&255;
         $368 = $p;
         $369 = (($368) + 1|0);
         $p = $369;
         HEAP8[$368] = $367;
         $370 = $x;
         $371 = $370 >>> 12;
         $372 = $371 & 63;
         $373 = 128 | $372;
         $374 = $373&255;
         $375 = $p;
         $376 = (($375) + 1|0);
         $p = $376;
         HEAP8[$375] = $374;
         $377 = $x;
         $378 = $377 >>> 6;
         $379 = $378 & 63;
         $380 = 128 | $379;
         $381 = $380&255;
         $382 = $p;
         $383 = (($382) + 1|0);
         $p = $383;
         HEAP8[$382] = $381;
         $384 = $x;
         $385 = $384 & 63;
         $386 = 128 | $385;
         $387 = $386&255;
         $388 = $p;
         $389 = (($388) + 1|0);
         $p = $389;
         HEAP8[$388] = $387;
        }
       }
      }
     }
    }
    $390 = $x;
    $391 = ($390|0)!=(0);
    if (!($391)) {
     label = 64;
     break;
    }
   }
   if ((label|0) == 64) {
    break;
   }
   $60 = HEAP32[_stderr>>2]|0;
   (_fprintf(($60|0),(2584|0),($vararg_buffer1|0))|0);
   $61 = $name;
   _free($61);
   $0 = 0;
   $448 = $0;
   STACKTOP = sp;return ($448|0);
  } else {
   while(1) {
    $392 = $1;
    $393 = (($392) + 1|0);
    $1 = $393;
    $394 = HEAP8[$392]|0;
    $c = $394;
    $395 = $c;
    $396 = $395&255;
    $397 = $sep;
    $398 = $397&255;
    $399 = ($396|0)==($398|0);
    if ($399) {
     $c = 47;
    } else {
     $400 = $c;
     $401 = $400&255;
     $402 = $slash;
     $403 = $402&255;
     $404 = ($401|0)==($403|0);
     if ($404) {
      $c = 92;
     } else {
      $405 = $3;
      $406 = ($405|0)!=(0);
      if ($406) {
       $407 = $c;
       $408 = $407&255;
       $409 = (_tolower(($408|0))|0);
       $410 = $409&255;
       $c = $410;
      }
     }
    }
    $411 = $c;
    $412 = $p;
    $413 = (($412) + 1|0);
    $p = $413;
    HEAP8[$412] = $411;
    $414 = ($411<<24>>24)!=(0);
    if (!($414)) {
     break;
    }
   }
  }
 } while(0);
 $415 = $2;
 $416 = ($415|0)!=(0|0);
 if ($416) {
  $417 = $2;
  $418 = (_strlen(($417|0))|0);
  $419 = (($418) + 1)|0;
  $422 = $419;
 } else {
  $422 = 0;
 }
 $420 = $name;
 $421 = (($420) + ($422)|0);
 $p = $421;
 while(1) {
  $423 = $p;
  $424 = HEAP8[$423]|0;
  $425 = ($424<<24>>24)!=(0);
  if (!($425)) {
   break;
  }
  $426 = $p;
  $427 = HEAP8[$426]|0;
  $428 = $427&255;
  $429 = ($428|0)==(46);
  if ($429) {
   $430 = $p;
   $431 = (($430) + 1|0);
   $432 = HEAP8[$431]|0;
   $433 = $432&255;
   $434 = ($433|0)==(46);
   if ($434) {
    $435 = $p;
    $436 = (($435) + 2|0);
    $437 = HEAP8[$436]|0;
    $438 = $437&255;
    $439 = ($438|0)==(47);
    if ($439) {
     $440 = $p;
     $441 = (($440) + 1|0);
     HEAP8[$441] = 120;
     $442 = $p;
     HEAP8[$442] = 120;
     $443 = $p;
     $444 = (($443) + 2|0);
     $p = $444;
    }
   }
  }
  $445 = $p;
  $446 = (($445) + 1|0);
  $p = $446;
 }
 $447 = $name;
 $0 = $447;
 $448 = $0;
 STACKTOP = sp;return ($448|0);
}
function _ensure_filepath($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ok = 0, $p = 0, $st_buf = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $st_buf = sp + 8|0;
 $1 = $path;
 $2 = $1;
 $3 = (($2) + 1|0);
 $p = $3;
 while(1) {
  $4 = $p;
  $5 = HEAP8[$4]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   label = 13;
   break;
  }
  $7 = $p;
  $8 = HEAP8[$7]|0;
  $9 = $8 << 24 >> 24;
  $10 = ($9|0)!=(47);
  if ($10) {
  } else {
   $11 = $p;
   HEAP8[$11] = 0;
   $12 = $1;
   $13 = (_stat(($12|0),($st_buf|0))|0);
   $14 = ($13|0)==(0);
   if ($14) {
    $15 = (($st_buf) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 61440;
    $18 = ($17|0)==(16384);
    $20 = $18;
   } else {
    $20 = 0;
   }
   $19 = $20&1;
   $ok = $19;
   $21 = $ok;
   $22 = ($21|0)!=(0);
   if (!($22)) {
    $23 = $1;
    $24 = HEAP32[1760>>2]|0;
    $25 = $24 ^ -1;
    $26 = 511 & $25;
    $27 = (_mkdir(($23|0),($26|0))|0);
    $28 = ($27|0)==(0);
    $29 = $28&1;
    $ok = $29;
   }
   $30 = $p;
   HEAP8[$30] = 47;
   $31 = $ok;
   $32 = ($31|0)!=(0);
   if (!($32)) {
    label = 10;
    break;
   }
  }
  $33 = $p;
  $34 = (($33) + 1|0);
  $p = $34;
 }
 if ((label|0) == 10) {
  $0 = 0;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 else if ((label|0) == 13) {
  $0 = 1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return 0|0;
}
function _set_date_and_perm($file,$filename) {
 $file = $file|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mode = 0, $tm = 0, $utb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $tm = sp + 8|0;
 $utb = sp;
 $0 = $file;
 $1 = $filename;
 $2 = $0;
 $3 = (($2) + 18|0);
 $4 = HEAP8[$3]|0;
 $5 = $4 << 24 >> 24;
 HEAP32[$tm>>2] = $5;
 $6 = $0;
 $7 = (($6) + 17|0);
 $8 = HEAP8[$7]|0;
 $9 = $8 << 24 >> 24;
 $10 = (($tm) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = $0;
 $12 = (($11) + 16|0);
 $13 = HEAP8[$12]|0;
 $14 = $13 << 24 >> 24;
 $15 = (($tm) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = $0;
 $17 = (($16) + 19|0);
 $18 = HEAP8[$17]|0;
 $19 = $18 << 24 >> 24;
 $20 = (($tm) + 12|0);
 HEAP32[$20>>2] = $19;
 $21 = $0;
 $22 = (($21) + 20|0);
 $23 = HEAP8[$22]|0;
 $24 = $23 << 24 >> 24;
 $25 = (($24) - 1)|0;
 $26 = (($tm) + 16|0);
 HEAP32[$26>>2] = $25;
 $27 = $0;
 $28 = (($27) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) - 1900)|0;
 $31 = (($tm) + 20|0);
 HEAP32[$31>>2] = $30;
 $32 = (($tm) + 32|0);
 HEAP32[$32>>2] = -1;
 $33 = (_mktime($tm)|0);
 $34 = (($utb) + 4|0);
 HEAP32[$34>>2] = $33;
 HEAP32[$utb>>2] = $33;
 $35 = $1;
 (_utime(($35|0),($utb|0))|0);
 $mode = 292;
 $36 = $0;
 $37 = (($36) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & 64;
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $mode;
  $42 = $41 | 73;
  $mode = $42;
 }
 $43 = $0;
 $44 = (($43) + 12|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 & 1;
 $47 = ($46|0)!=(0);
 if ($47) {
  $50 = $1;
  $51 = $mode;
  $52 = HEAP32[1760>>2]|0;
  $53 = $52 ^ -1;
  $54 = $51 & $53;
  (_chmod(($50|0),($54|0))|0);
  STACKTOP = sp;return;
 }
 $48 = $mode;
 $49 = $48 | 146;
 $mode = $49;
 $50 = $1;
 $51 = $mode;
 $52 = HEAP32[1760>>2]|0;
 $53 = $52 ^ -1;
 $54 = $51 & $53;
 (_chmod(($50|0),($54|0))|0);
 STACKTOP = sp;return;
}
function _find_cabinet_file($origcab,$cabname) {
 $origcab = $origcab|0;
 $cabname = $cabname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $cab = 0, $dir = 0;
 var $entry = 0, $found = 0, $len = 0, $st_buf = 0, $tail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $st_buf = sp + 32|0;
 $1 = $origcab;
 $2 = $cabname;
 $found = 0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = HEAP8[$5]|0;
  $7 = ($6<<24>>24)!=(0);
  if ($7) {
   $8 = $1;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $1;
    $11 = (_strrchr($10,47)|0);
    $12 = $11;
   } else {
    $12 = 0;
   }
   $tail = $12;
   $13 = $tail;
   $14 = $1;
   $15 = $13;
   $16 = $14;
   $17 = (($15) - ($16))|0;
   $18 = (($17) + 1)|0;
   $len = $18;
   $19 = $tail;
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $21 = $len;
    $25 = $21;
   } else {
    $25 = 2;
   }
   $22 = $2;
   $23 = (_strlen(($22|0))|0);
   $24 = (($25) + ($23))|0;
   $26 = (($24) + 1)|0;
   $27 = (_malloc($26)|0);
   $cab = $27;
   $28 = ($27|0)!=(0|0);
   if (!($28)) {
    $0 = 0;
    $77 = $0;
    STACKTOP = sp;return ($77|0);
   }
   $29 = $tail;
   $30 = ($29|0)!=(0|0);
   if ($30) {
    $31 = $cab;
    $32 = $1;
    $33 = $len;
    _memcpy(($31|0),($32|0),($33|0))|0;
   } else {
    $34 = $cab;
    HEAP8[$34] = 46;
    $35 = $cab;
    $36 = (($35) + 1|0);
    HEAP8[$36] = 47;
    $len = 2;
   }
   $37 = $len;
   $38 = $cab;
   $39 = (($38) + ($37)|0);
   HEAP8[$39] = 0;
   $40 = $len;
   $41 = $cab;
   $42 = (($41) + ($40)|0);
   $43 = $2;
   (_strcpy(($42|0),($43|0))|0);
   $44 = $cab;
   $45 = (_stat(($44|0),($st_buf|0))|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $found = 1;
   } else {
    $47 = $len;
    $48 = $cab;
    $49 = (($48) + ($47)|0);
    HEAP8[$49] = 0;
    $50 = $cab;
    $51 = (_opendir(($50|0))|0);
    $dir = $51;
    $52 = ($51|0)!=(0|0);
    if ($52) {
     while(1) {
      $53 = $dir;
      $54 = (_readdir(($53|0))|0);
      $entry = $54;
      $55 = ($54|0)!=(0|0);
      if (!($55)) {
       break;
      }
      $56 = $2;
      $57 = $entry;
      $58 = (($57) + 11|0);
      $59 = (_strcasecmp($56,$58)|0);
      $60 = ($59|0)==(0);
      if ($60) {
       label = 21;
       break;
      }
     }
     if ((label|0) == 21) {
      $61 = $cab;
      $62 = $entry;
      $63 = (($62) + 11|0);
      (_strcat(($61|0),($63|0))|0);
      $64 = $cab;
      $65 = (_stat(($64|0),($st_buf|0))|0);
      $66 = ($65|0)==(0);
      $67 = $66&1;
      $found = $67;
     }
     $68 = $dir;
     (_closedir(($68|0))|0);
    }
   }
   $69 = $found;
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = (($st_buf) + 12|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $72 & 61440;
    $74 = ($73|0)==(32768);
    if (!($74)) {
     label = 27;
    }
   } else {
    label = 27;
   }
   if ((label|0) == 27) {
    $75 = $cab;
    _free($75);
    $cab = 0;
   }
   $76 = $cab;
   $0 = $76;
   $77 = $0;
   STACKTOP = sp;return ($77|0);
  }
 }
 $0 = 0;
 $77 = $0;
 STACKTOP = sp;return ($77|0);
}
function _cabx_open($this,$filename,$mode) {
 $this = $this|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $fh = 0, $fmode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $filename;
 $3 = $mode;
 $4 = $2;
 $5 = HEAP32[384>>2]|0;
 $6 = ($4|0)==($5|0);
 if ($6) {
  label = 3;
 } else {
  $7 = $2;
  $8 = HEAP32[392>>2]|0;
  $9 = ($7|0)==($8|0);
  if ($9) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $10 = $3;
   $11 = ($10|0)!=(1);
   if (!($11)) {
    break;
   }
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
 } while(0);
 $12 = $3;
 if ((($12|0) == 3)) {
  $fmode = 2920;
 } else if ((($12|0) == 1)) {
  $fmode = 2904;
 } else if ((($12|0) == 2)) {
  $fmode = 2912;
 } else if ((($12|0) == 0)) {
  $fmode = 2896;
 } else {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;return ($42|0);
 }
 $13 = (_malloc(12)|0);
 $fh = $13;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $2;
  $16 = $fh;
  $17 = (($16) + 4|0);
  HEAP32[$17>>2] = $15;
  $18 = $2;
  $19 = HEAP32[384>>2]|0;
  $20 = ($18|0)==($19|0);
  if ($20) {
   $21 = $fh;
   $22 = (($21) + 8|0);
   HEAP8[$22] = 0;
   $23 = HEAP32[_stdout>>2]|0;
   $24 = $fh;
   HEAP32[$24>>2] = $23;
   $25 = $fh;
   $0 = $25;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
  $26 = $2;
  $27 = HEAP32[392>>2]|0;
  $28 = ($26|0)==($27|0);
  if ($28) {
   $29 = $fh;
   $30 = (($29) + 8|0);
   HEAP8[$30] = 0;
   $31 = $fh;
   HEAP32[$31>>2] = 0;
   _md5_init_ctx(1840);
   $32 = $fh;
   $0 = $32;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
  $33 = $fh;
  $34 = (($33) + 8|0);
  HEAP8[$34] = 1;
  $35 = $2;
  $36 = $fmode;
  $37 = (_fopen(($35|0),($36|0))|0);
  $38 = $fh;
  HEAP32[$38>>2] = $37;
  $39 = ($37|0)!=(0|0);
  if ($39) {
   $40 = $fh;
   $0 = $40;
   $42 = $0;
   STACKTOP = sp;return ($42|0);
  }
  $41 = $fh;
  _free($41);
 }
 $0 = 0;
 $42 = $0;
 STACKTOP = sp;return ($42|0);
}
function _cabx_close($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $file;
 $1 = $0;
 $this = $1;
 $2 = $this;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $this;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[392>>2]|0;
 $8 = ($6|0)==($7|0);
 if ($8) {
  (_md5_finish_ctx(1840,2000)|0);
 } else {
  $9 = $this;
  $10 = (($9) + 8|0);
  $11 = HEAP8[$10]|0;
  $12 = ($11<<24>>24)!=(0);
  if ($12) {
   $13 = $this;
   $14 = HEAP32[$13>>2]|0;
   (_fclose(($14|0))|0);
  }
 }
 $15 = $this;
 _free($15);
 STACKTOP = sp;return;
}
function _cabx_read($file,$buffer,$bytes) {
 $file = $file|0;
 $buffer = $buffer|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $this = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $file;
 $2 = $buffer;
 $3 = $bytes;
 $4 = $1;
 $this = $4;
 $5 = $this;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $this;
   $8 = (($7) + 8|0);
   $9 = HEAP8[$8]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = $2;
    $13 = ($12|0)!=(0|0);
    if ($13) {
     $14 = $3;
     $15 = ($14|0)>=(0);
     if ($15) {
      $16 = $2;
      $17 = $3;
      $18 = $this;
      $19 = HEAP32[$18>>2]|0;
      $20 = (_fread(($16|0),1,($17|0),($19|0))|0);
      $count = $20;
      $21 = $this;
      $22 = HEAP32[$21>>2]|0;
      $23 = (_ferror(($22|0))|0);
      $24 = ($23|0)!=(0);
      if ($24) {
       break;
      }
      $25 = $count;
      $0 = $25;
      $26 = $0;
      STACKTOP = sp;return ($26|0);
     }
    }
   }
  }
 } while(0);
 $0 = -1;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _cabx_write($file,$buffer,$bytes) {
 $file = $file|0;
 $buffer = $buffer|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $this = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $file;
 $2 = $buffer;
 $3 = $bytes;
 $4 = $1;
 $this = $4;
 $5 = $this;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $2;
   $8 = ($7|0)!=(0|0);
   if ($8) {
    $9 = $3;
    $10 = ($9|0)>=(0);
    if ($10) {
     $11 = $this;
     $12 = (($11) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = HEAP32[392>>2]|0;
     $15 = ($13|0)==($14|0);
     if ($15) {
      $16 = $2;
      $17 = $3;
      _md5_process_bytes($16,$17,1840);
      $18 = $3;
      $0 = $18;
      $29 = $0;
      STACKTOP = sp;return ($29|0);
     }
     $19 = $2;
     $20 = $3;
     $21 = $this;
     $22 = HEAP32[$21>>2]|0;
     $23 = (_fwrite(($19|0),1,($20|0),($22|0))|0);
     $count = $23;
     $24 = $this;
     $25 = HEAP32[$24>>2]|0;
     $26 = (_ferror(($25|0))|0);
     $27 = ($26|0)!=(0);
     if ($27) {
      break;
     } else {
      $28 = $count;
      $0 = $28;
      $29 = $0;
      STACKTOP = sp;return ($29|0);
     }
    }
   }
  }
 } while(0);
 $0 = -1;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function _cabx_seek($file,$offset,$mode) {
 $file = $file|0;
 $offset = $offset|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $file;
 $2 = $offset;
 $3 = $mode;
 $4 = $1;
 $this = $4;
 $5 = $this;
 $6 = ($5|0)!=(0|0);
 do {
  if ($6) {
   $7 = $this;
   $8 = (($7) + 8|0);
   $9 = HEAP8[$8]|0;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = $3;
    if ((($12|0) == 0)) {
     $3 = 0;
    } else if ((($12|0) == 1)) {
     $3 = 1;
    } else if ((($12|0) == 2)) {
     $3 = 2;
    } else {
     $0 = -1;
     break;
    }
    $13 = $this;
    $14 = HEAP32[$13>>2]|0;
    $15 = $2;
    $16 = $3;
    $17 = (_fseek(($14|0),($15|0),($16|0))|0);
    $0 = $17;
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $0 = -1;
 }
 $18 = $0;
 STACKTOP = sp;return ($18|0);
}
function _cabx_tell($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $file;
 $1 = $0;
 $this = $1;
 $2 = $this;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $this;
  $5 = (($4) + 8|0);
  $6 = HEAP8[$5]|0;
  $7 = $6 << 24 >> 24;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $this;
   $10 = HEAP32[$9>>2]|0;
   $11 = (_ftell(($10|0))|0);
   $12 = $11;
   STACKTOP = sp;return ($12|0);
  }
 }
 $12 = 0;
 STACKTOP = sp;return ($12|0);
}
function _cabx_msg($file,$format,$varargs) {
 $file = $file|0;
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ap = sp + 8|0;
 $0 = $file;
 $1 = $format;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[_stderr>>2]|0;
  $5 = $0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$vararg_buffer>>2] = $7;
  (_fprintf(($4|0),(2888|0),($vararg_buffer|0))|0);
 }
 HEAP32[$ap>>2] = $varargs;
 $8 = HEAP32[_stderr>>2]|0;
 $9 = $1;
 (_vfprintf(($8|0),($9|0),($ap|0))|0);
 $10 = HEAP32[_stderr>>2]|0;
 (_fputc(10,($10|0))|0);
 $11 = HEAP32[_stderr>>2]|0;
 (_fflush(($11|0))|0);
 STACKTOP = sp;return;
}
function _cabx_alloc($this,$bytes) {
 $this = $this|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $this;
 $1 = $bytes;
 $2 = $1;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _cabx_free($buffer) {
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $buffer;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _cabx_copy($src,$dest,$bytes) {
 $src = $src|0;
 $dest = $dest|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $src;
 $1 = $dest;
 $2 = $bytes;
 $3 = $1;
 $4 = $0;
 $5 = $2;
 _memcpy(($3|0),($4|0),($5|0))|0;
 STACKTOP = sp;return;
}
function _md5_init_ctx($ctx) {
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ctx;
 $1 = $0;
 HEAP32[$1>>2] = 1732584193;
 $2 = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = -271733879;
 $4 = $0;
 $5 = (($4) + 8|0);
 HEAP32[$5>>2] = -1732584194;
 $6 = $0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 271733878;
 $8 = $0;
 $9 = (($8) + 16|0);
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = (($11) + 16|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = (($13) + 24|0);
 HEAP32[$14>>2] = 0;
 STACKTOP = sp;return;
}
function _md5_read_ctx($ctx,$resbuf) {
 $ctx = $ctx|0;
 $resbuf = $resbuf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ctx;
 $1 = $resbuf;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 HEAP32[$4>>2] = $3;
 $5 = $0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = (($8) + 4|0);
 HEAP32[$9>>2] = $7;
 $10 = $0;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $1;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = $12;
 $15 = $0;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $1;
 STACKTOP = sp;return ($20|0);
}
function _md5_finish_ctx($ctx,$resbuf) {
 $ctx = $ctx|0;
 $resbuf = $resbuf|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $bytes = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $ctx;
 $1 = $resbuf;
 $2 = $0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $bytes = $4;
 $5 = $bytes;
 $6 = $0;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + ($5))|0;
 HEAP32[$7>>2] = $9;
 $10 = $0;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $bytes;
 $14 = ($12>>>0)<($13>>>0);
 if ($14) {
  $15 = $0;
  $16 = (($15) + 16|0);
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
 }
 $20 = $bytes;
 $21 = ($20>>>0)>=(56);
 if ($21) {
  $22 = $bytes;
  $23 = (120 - ($22))|0;
  $26 = $23;
 } else {
  $24 = $bytes;
  $25 = (56 - ($24))|0;
  $26 = $25;
 }
 $pad = $26;
 $27 = $bytes;
 $28 = $0;
 $29 = (($28) + 28|0);
 $30 = (($29) + ($27)|0);
 $31 = $pad;
 _memcpy(($30|0),(2928|0),($31|0))|0;
 $32 = $0;
 $33 = (($32) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 << 3;
 $36 = $bytes;
 $37 = $pad;
 $38 = (($36) + ($37))|0;
 $39 = $0;
 $40 = (($39) + 28|0);
 $41 = (($40) + ($38)|0);
 HEAP32[$41>>2] = $35;
 $42 = $0;
 $43 = (($42) + 16|0);
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 << 3;
 $47 = $0;
 $48 = (($47) + 16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 29;
 $51 = $46 | $50;
 $52 = $bytes;
 $53 = $pad;
 $54 = (($52) + ($53))|0;
 $55 = (($54) + 4)|0;
 $56 = $0;
 $57 = (($56) + 28|0);
 $58 = (($57) + ($55)|0);
 HEAP32[$58>>2] = $51;
 $59 = $0;
 $60 = (($59) + 28|0);
 $61 = $bytes;
 $62 = $pad;
 $63 = (($61) + ($62))|0;
 $64 = (($63) + 8)|0;
 $65 = $0;
 _md5_process_block($60,$64,$65);
 $66 = $0;
 $67 = $1;
 $68 = (_md5_read_ctx($66,$67)|0);
 STACKTOP = sp;return ($68|0);
}
function _md5_process_block($buffer,$len,$ctx) {
 $buffer = $buffer|0;
 $len = $len|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $A = 0, $A_save = 0, $B = 0, $B_save = 0, $C = 0, $C_save = 0, $D = 0, $D_save = 0, $correct_words = 0, $cwp = 0, $endp = 0, $nwords = 0, $words = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $correct_words = sp + 56|0;
 $0 = $buffer;
 $1 = $len;
 $2 = $ctx;
 $3 = $0;
 $words = $3;
 $4 = $1;
 $5 = (($4>>>0) / 4)&-1;
 $nwords = $5;
 $6 = $words;
 $7 = $nwords;
 $8 = (($6) + ($7<<2)|0);
 $endp = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $A = $10;
 $11 = $2;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $B = $13;
 $14 = $2;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $C = $16;
 $17 = $2;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $D = $19;
 $20 = $1;
 $21 = $2;
 $22 = (($21) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($20))|0;
 HEAP32[$22>>2] = $24;
 $25 = $2;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $1;
 $29 = ($27>>>0)<($28>>>0);
 if ($29) {
  $30 = $2;
  $31 = (($30) + 16|0);
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
 }
 while(1) {
  $35 = $words;
  $36 = $endp;
  $37 = ($35>>>0)<($36>>>0);
  if (!($37)) {
   break;
  }
  $cwp = $correct_words;
  $38 = $A;
  $A_save = $38;
  $39 = $B;
  $B_save = $39;
  $40 = $C;
  $C_save = $40;
  $41 = $D;
  $D_save = $41;
  $42 = $D;
  $43 = $B;
  $44 = $C;
  $45 = $D;
  $46 = $44 ^ $45;
  $47 = $43 & $46;
  $48 = $42 ^ $47;
  $49 = $words;
  $50 = HEAP32[$49>>2]|0;
  $51 = $cwp;
  $52 = (($51) + 4|0);
  $cwp = $52;
  HEAP32[$51>>2] = $50;
  $53 = (($48) + ($50))|0;
  $54 = (($53) + -680876936)|0;
  $55 = $A;
  $56 = (($55) + ($54))|0;
  $A = $56;
  $57 = $words;
  $58 = (($57) + 4|0);
  $words = $58;
  $59 = $A;
  $60 = $59 << 7;
  $61 = $A;
  $62 = $61 >>> 25;
  $63 = $60 | $62;
  $A = $63;
  $64 = $B;
  $65 = $A;
  $66 = (($65) + ($64))|0;
  $A = $66;
  $67 = $C;
  $68 = $A;
  $69 = $B;
  $70 = $C;
  $71 = $69 ^ $70;
  $72 = $68 & $71;
  $73 = $67 ^ $72;
  $74 = $words;
  $75 = HEAP32[$74>>2]|0;
  $76 = $cwp;
  $77 = (($76) + 4|0);
  $cwp = $77;
  HEAP32[$76>>2] = $75;
  $78 = (($73) + ($75))|0;
  $79 = (($78) + -389564586)|0;
  $80 = $D;
  $81 = (($80) + ($79))|0;
  $D = $81;
  $82 = $words;
  $83 = (($82) + 4|0);
  $words = $83;
  $84 = $D;
  $85 = $84 << 12;
  $86 = $D;
  $87 = $86 >>> 20;
  $88 = $85 | $87;
  $D = $88;
  $89 = $A;
  $90 = $D;
  $91 = (($90) + ($89))|0;
  $D = $91;
  $92 = $B;
  $93 = $D;
  $94 = $A;
  $95 = $B;
  $96 = $94 ^ $95;
  $97 = $93 & $96;
  $98 = $92 ^ $97;
  $99 = $words;
  $100 = HEAP32[$99>>2]|0;
  $101 = $cwp;
  $102 = (($101) + 4|0);
  $cwp = $102;
  HEAP32[$101>>2] = $100;
  $103 = (($98) + ($100))|0;
  $104 = (($103) + 606105819)|0;
  $105 = $C;
  $106 = (($105) + ($104))|0;
  $C = $106;
  $107 = $words;
  $108 = (($107) + 4|0);
  $words = $108;
  $109 = $C;
  $110 = $109 << 17;
  $111 = $C;
  $112 = $111 >>> 15;
  $113 = $110 | $112;
  $C = $113;
  $114 = $D;
  $115 = $C;
  $116 = (($115) + ($114))|0;
  $C = $116;
  $117 = $A;
  $118 = $C;
  $119 = $D;
  $120 = $A;
  $121 = $119 ^ $120;
  $122 = $118 & $121;
  $123 = $117 ^ $122;
  $124 = $words;
  $125 = HEAP32[$124>>2]|0;
  $126 = $cwp;
  $127 = (($126) + 4|0);
  $cwp = $127;
  HEAP32[$126>>2] = $125;
  $128 = (($123) + ($125))|0;
  $129 = (($128) + -1044525330)|0;
  $130 = $B;
  $131 = (($130) + ($129))|0;
  $B = $131;
  $132 = $words;
  $133 = (($132) + 4|0);
  $words = $133;
  $134 = $B;
  $135 = $134 << 22;
  $136 = $B;
  $137 = $136 >>> 10;
  $138 = $135 | $137;
  $B = $138;
  $139 = $C;
  $140 = $B;
  $141 = (($140) + ($139))|0;
  $B = $141;
  $142 = $D;
  $143 = $B;
  $144 = $C;
  $145 = $D;
  $146 = $144 ^ $145;
  $147 = $143 & $146;
  $148 = $142 ^ $147;
  $149 = $words;
  $150 = HEAP32[$149>>2]|0;
  $151 = $cwp;
  $152 = (($151) + 4|0);
  $cwp = $152;
  HEAP32[$151>>2] = $150;
  $153 = (($148) + ($150))|0;
  $154 = (($153) + -176418897)|0;
  $155 = $A;
  $156 = (($155) + ($154))|0;
  $A = $156;
  $157 = $words;
  $158 = (($157) + 4|0);
  $words = $158;
  $159 = $A;
  $160 = $159 << 7;
  $161 = $A;
  $162 = $161 >>> 25;
  $163 = $160 | $162;
  $A = $163;
  $164 = $B;
  $165 = $A;
  $166 = (($165) + ($164))|0;
  $A = $166;
  $167 = $C;
  $168 = $A;
  $169 = $B;
  $170 = $C;
  $171 = $169 ^ $170;
  $172 = $168 & $171;
  $173 = $167 ^ $172;
  $174 = $words;
  $175 = HEAP32[$174>>2]|0;
  $176 = $cwp;
  $177 = (($176) + 4|0);
  $cwp = $177;
  HEAP32[$176>>2] = $175;
  $178 = (($173) + ($175))|0;
  $179 = (($178) + 1200080426)|0;
  $180 = $D;
  $181 = (($180) + ($179))|0;
  $D = $181;
  $182 = $words;
  $183 = (($182) + 4|0);
  $words = $183;
  $184 = $D;
  $185 = $184 << 12;
  $186 = $D;
  $187 = $186 >>> 20;
  $188 = $185 | $187;
  $D = $188;
  $189 = $A;
  $190 = $D;
  $191 = (($190) + ($189))|0;
  $D = $191;
  $192 = $B;
  $193 = $D;
  $194 = $A;
  $195 = $B;
  $196 = $194 ^ $195;
  $197 = $193 & $196;
  $198 = $192 ^ $197;
  $199 = $words;
  $200 = HEAP32[$199>>2]|0;
  $201 = $cwp;
  $202 = (($201) + 4|0);
  $cwp = $202;
  HEAP32[$201>>2] = $200;
  $203 = (($198) + ($200))|0;
  $204 = (($203) + -1473231341)|0;
  $205 = $C;
  $206 = (($205) + ($204))|0;
  $C = $206;
  $207 = $words;
  $208 = (($207) + 4|0);
  $words = $208;
  $209 = $C;
  $210 = $209 << 17;
  $211 = $C;
  $212 = $211 >>> 15;
  $213 = $210 | $212;
  $C = $213;
  $214 = $D;
  $215 = $C;
  $216 = (($215) + ($214))|0;
  $C = $216;
  $217 = $A;
  $218 = $C;
  $219 = $D;
  $220 = $A;
  $221 = $219 ^ $220;
  $222 = $218 & $221;
  $223 = $217 ^ $222;
  $224 = $words;
  $225 = HEAP32[$224>>2]|0;
  $226 = $cwp;
  $227 = (($226) + 4|0);
  $cwp = $227;
  HEAP32[$226>>2] = $225;
  $228 = (($223) + ($225))|0;
  $229 = (($228) + -45705983)|0;
  $230 = $B;
  $231 = (($230) + ($229))|0;
  $B = $231;
  $232 = $words;
  $233 = (($232) + 4|0);
  $words = $233;
  $234 = $B;
  $235 = $234 << 22;
  $236 = $B;
  $237 = $236 >>> 10;
  $238 = $235 | $237;
  $B = $238;
  $239 = $C;
  $240 = $B;
  $241 = (($240) + ($239))|0;
  $B = $241;
  $242 = $D;
  $243 = $B;
  $244 = $C;
  $245 = $D;
  $246 = $244 ^ $245;
  $247 = $243 & $246;
  $248 = $242 ^ $247;
  $249 = $words;
  $250 = HEAP32[$249>>2]|0;
  $251 = $cwp;
  $252 = (($251) + 4|0);
  $cwp = $252;
  HEAP32[$251>>2] = $250;
  $253 = (($248) + ($250))|0;
  $254 = (($253) + 1770035416)|0;
  $255 = $A;
  $256 = (($255) + ($254))|0;
  $A = $256;
  $257 = $words;
  $258 = (($257) + 4|0);
  $words = $258;
  $259 = $A;
  $260 = $259 << 7;
  $261 = $A;
  $262 = $261 >>> 25;
  $263 = $260 | $262;
  $A = $263;
  $264 = $B;
  $265 = $A;
  $266 = (($265) + ($264))|0;
  $A = $266;
  $267 = $C;
  $268 = $A;
  $269 = $B;
  $270 = $C;
  $271 = $269 ^ $270;
  $272 = $268 & $271;
  $273 = $267 ^ $272;
  $274 = $words;
  $275 = HEAP32[$274>>2]|0;
  $276 = $cwp;
  $277 = (($276) + 4|0);
  $cwp = $277;
  HEAP32[$276>>2] = $275;
  $278 = (($273) + ($275))|0;
  $279 = (($278) + -1958414417)|0;
  $280 = $D;
  $281 = (($280) + ($279))|0;
  $D = $281;
  $282 = $words;
  $283 = (($282) + 4|0);
  $words = $283;
  $284 = $D;
  $285 = $284 << 12;
  $286 = $D;
  $287 = $286 >>> 20;
  $288 = $285 | $287;
  $D = $288;
  $289 = $A;
  $290 = $D;
  $291 = (($290) + ($289))|0;
  $D = $291;
  $292 = $B;
  $293 = $D;
  $294 = $A;
  $295 = $B;
  $296 = $294 ^ $295;
  $297 = $293 & $296;
  $298 = $292 ^ $297;
  $299 = $words;
  $300 = HEAP32[$299>>2]|0;
  $301 = $cwp;
  $302 = (($301) + 4|0);
  $cwp = $302;
  HEAP32[$301>>2] = $300;
  $303 = (($298) + ($300))|0;
  $304 = (($303) + -42063)|0;
  $305 = $C;
  $306 = (($305) + ($304))|0;
  $C = $306;
  $307 = $words;
  $308 = (($307) + 4|0);
  $words = $308;
  $309 = $C;
  $310 = $309 << 17;
  $311 = $C;
  $312 = $311 >>> 15;
  $313 = $310 | $312;
  $C = $313;
  $314 = $D;
  $315 = $C;
  $316 = (($315) + ($314))|0;
  $C = $316;
  $317 = $A;
  $318 = $C;
  $319 = $D;
  $320 = $A;
  $321 = $319 ^ $320;
  $322 = $318 & $321;
  $323 = $317 ^ $322;
  $324 = $words;
  $325 = HEAP32[$324>>2]|0;
  $326 = $cwp;
  $327 = (($326) + 4|0);
  $cwp = $327;
  HEAP32[$326>>2] = $325;
  $328 = (($323) + ($325))|0;
  $329 = (($328) + -1990404162)|0;
  $330 = $B;
  $331 = (($330) + ($329))|0;
  $B = $331;
  $332 = $words;
  $333 = (($332) + 4|0);
  $words = $333;
  $334 = $B;
  $335 = $334 << 22;
  $336 = $B;
  $337 = $336 >>> 10;
  $338 = $335 | $337;
  $B = $338;
  $339 = $C;
  $340 = $B;
  $341 = (($340) + ($339))|0;
  $B = $341;
  $342 = $D;
  $343 = $B;
  $344 = $C;
  $345 = $D;
  $346 = $344 ^ $345;
  $347 = $343 & $346;
  $348 = $342 ^ $347;
  $349 = $words;
  $350 = HEAP32[$349>>2]|0;
  $351 = $cwp;
  $352 = (($351) + 4|0);
  $cwp = $352;
  HEAP32[$351>>2] = $350;
  $353 = (($348) + ($350))|0;
  $354 = (($353) + 1804603682)|0;
  $355 = $A;
  $356 = (($355) + ($354))|0;
  $A = $356;
  $357 = $words;
  $358 = (($357) + 4|0);
  $words = $358;
  $359 = $A;
  $360 = $359 << 7;
  $361 = $A;
  $362 = $361 >>> 25;
  $363 = $360 | $362;
  $A = $363;
  $364 = $B;
  $365 = $A;
  $366 = (($365) + ($364))|0;
  $A = $366;
  $367 = $C;
  $368 = $A;
  $369 = $B;
  $370 = $C;
  $371 = $369 ^ $370;
  $372 = $368 & $371;
  $373 = $367 ^ $372;
  $374 = $words;
  $375 = HEAP32[$374>>2]|0;
  $376 = $cwp;
  $377 = (($376) + 4|0);
  $cwp = $377;
  HEAP32[$376>>2] = $375;
  $378 = (($373) + ($375))|0;
  $379 = (($378) + -40341101)|0;
  $380 = $D;
  $381 = (($380) + ($379))|0;
  $D = $381;
  $382 = $words;
  $383 = (($382) + 4|0);
  $words = $383;
  $384 = $D;
  $385 = $384 << 12;
  $386 = $D;
  $387 = $386 >>> 20;
  $388 = $385 | $387;
  $D = $388;
  $389 = $A;
  $390 = $D;
  $391 = (($390) + ($389))|0;
  $D = $391;
  $392 = $B;
  $393 = $D;
  $394 = $A;
  $395 = $B;
  $396 = $394 ^ $395;
  $397 = $393 & $396;
  $398 = $392 ^ $397;
  $399 = $words;
  $400 = HEAP32[$399>>2]|0;
  $401 = $cwp;
  $402 = (($401) + 4|0);
  $cwp = $402;
  HEAP32[$401>>2] = $400;
  $403 = (($398) + ($400))|0;
  $404 = (($403) + -1502002290)|0;
  $405 = $C;
  $406 = (($405) + ($404))|0;
  $C = $406;
  $407 = $words;
  $408 = (($407) + 4|0);
  $words = $408;
  $409 = $C;
  $410 = $409 << 17;
  $411 = $C;
  $412 = $411 >>> 15;
  $413 = $410 | $412;
  $C = $413;
  $414 = $D;
  $415 = $C;
  $416 = (($415) + ($414))|0;
  $C = $416;
  $417 = $A;
  $418 = $C;
  $419 = $D;
  $420 = $A;
  $421 = $419 ^ $420;
  $422 = $418 & $421;
  $423 = $417 ^ $422;
  $424 = $words;
  $425 = HEAP32[$424>>2]|0;
  $426 = $cwp;
  $427 = (($426) + 4|0);
  $cwp = $427;
  HEAP32[$426>>2] = $425;
  $428 = (($423) + ($425))|0;
  $429 = (($428) + 1236535329)|0;
  $430 = $B;
  $431 = (($430) + ($429))|0;
  $B = $431;
  $432 = $words;
  $433 = (($432) + 4|0);
  $words = $433;
  $434 = $B;
  $435 = $434 << 22;
  $436 = $B;
  $437 = $436 >>> 10;
  $438 = $435 | $437;
  $B = $438;
  $439 = $C;
  $440 = $B;
  $441 = (($440) + ($439))|0;
  $B = $441;
  $442 = $C;
  $443 = $D;
  $444 = $B;
  $445 = $C;
  $446 = $444 ^ $445;
  $447 = $443 & $446;
  $448 = $442 ^ $447;
  $449 = (($correct_words) + 4|0);
  $450 = HEAP32[$449>>2]|0;
  $451 = (($448) + ($450))|0;
  $452 = (($451) + -165796510)|0;
  $453 = $A;
  $454 = (($453) + ($452))|0;
  $A = $454;
  $455 = $A;
  $456 = $455 << 5;
  $457 = $A;
  $458 = $457 >>> 27;
  $459 = $456 | $458;
  $A = $459;
  $460 = $B;
  $461 = $A;
  $462 = (($461) + ($460))|0;
  $A = $462;
  $463 = $B;
  $464 = $C;
  $465 = $A;
  $466 = $B;
  $467 = $465 ^ $466;
  $468 = $464 & $467;
  $469 = $463 ^ $468;
  $470 = (($correct_words) + 24|0);
  $471 = HEAP32[$470>>2]|0;
  $472 = (($469) + ($471))|0;
  $473 = (($472) + -1069501632)|0;
  $474 = $D;
  $475 = (($474) + ($473))|0;
  $D = $475;
  $476 = $D;
  $477 = $476 << 9;
  $478 = $D;
  $479 = $478 >>> 23;
  $480 = $477 | $479;
  $D = $480;
  $481 = $A;
  $482 = $D;
  $483 = (($482) + ($481))|0;
  $D = $483;
  $484 = $A;
  $485 = $B;
  $486 = $D;
  $487 = $A;
  $488 = $486 ^ $487;
  $489 = $485 & $488;
  $490 = $484 ^ $489;
  $491 = (($correct_words) + 44|0);
  $492 = HEAP32[$491>>2]|0;
  $493 = (($490) + ($492))|0;
  $494 = (($493) + 643717713)|0;
  $495 = $C;
  $496 = (($495) + ($494))|0;
  $C = $496;
  $497 = $C;
  $498 = $497 << 14;
  $499 = $C;
  $500 = $499 >>> 18;
  $501 = $498 | $500;
  $C = $501;
  $502 = $D;
  $503 = $C;
  $504 = (($503) + ($502))|0;
  $C = $504;
  $505 = $D;
  $506 = $A;
  $507 = $C;
  $508 = $D;
  $509 = $507 ^ $508;
  $510 = $506 & $509;
  $511 = $505 ^ $510;
  $512 = HEAP32[$correct_words>>2]|0;
  $513 = (($511) + ($512))|0;
  $514 = (($513) + -373897302)|0;
  $515 = $B;
  $516 = (($515) + ($514))|0;
  $B = $516;
  $517 = $B;
  $518 = $517 << 20;
  $519 = $B;
  $520 = $519 >>> 12;
  $521 = $518 | $520;
  $B = $521;
  $522 = $C;
  $523 = $B;
  $524 = (($523) + ($522))|0;
  $B = $524;
  $525 = $C;
  $526 = $D;
  $527 = $B;
  $528 = $C;
  $529 = $527 ^ $528;
  $530 = $526 & $529;
  $531 = $525 ^ $530;
  $532 = (($correct_words) + 20|0);
  $533 = HEAP32[$532>>2]|0;
  $534 = (($531) + ($533))|0;
  $535 = (($534) + -701558691)|0;
  $536 = $A;
  $537 = (($536) + ($535))|0;
  $A = $537;
  $538 = $A;
  $539 = $538 << 5;
  $540 = $A;
  $541 = $540 >>> 27;
  $542 = $539 | $541;
  $A = $542;
  $543 = $B;
  $544 = $A;
  $545 = (($544) + ($543))|0;
  $A = $545;
  $546 = $B;
  $547 = $C;
  $548 = $A;
  $549 = $B;
  $550 = $548 ^ $549;
  $551 = $547 & $550;
  $552 = $546 ^ $551;
  $553 = (($correct_words) + 40|0);
  $554 = HEAP32[$553>>2]|0;
  $555 = (($552) + ($554))|0;
  $556 = (($555) + 38016083)|0;
  $557 = $D;
  $558 = (($557) + ($556))|0;
  $D = $558;
  $559 = $D;
  $560 = $559 << 9;
  $561 = $D;
  $562 = $561 >>> 23;
  $563 = $560 | $562;
  $D = $563;
  $564 = $A;
  $565 = $D;
  $566 = (($565) + ($564))|0;
  $D = $566;
  $567 = $A;
  $568 = $B;
  $569 = $D;
  $570 = $A;
  $571 = $569 ^ $570;
  $572 = $568 & $571;
  $573 = $567 ^ $572;
  $574 = (($correct_words) + 60|0);
  $575 = HEAP32[$574>>2]|0;
  $576 = (($573) + ($575))|0;
  $577 = (($576) + -660478335)|0;
  $578 = $C;
  $579 = (($578) + ($577))|0;
  $C = $579;
  $580 = $C;
  $581 = $580 << 14;
  $582 = $C;
  $583 = $582 >>> 18;
  $584 = $581 | $583;
  $C = $584;
  $585 = $D;
  $586 = $C;
  $587 = (($586) + ($585))|0;
  $C = $587;
  $588 = $D;
  $589 = $A;
  $590 = $C;
  $591 = $D;
  $592 = $590 ^ $591;
  $593 = $589 & $592;
  $594 = $588 ^ $593;
  $595 = (($correct_words) + 16|0);
  $596 = HEAP32[$595>>2]|0;
  $597 = (($594) + ($596))|0;
  $598 = (($597) + -405537848)|0;
  $599 = $B;
  $600 = (($599) + ($598))|0;
  $B = $600;
  $601 = $B;
  $602 = $601 << 20;
  $603 = $B;
  $604 = $603 >>> 12;
  $605 = $602 | $604;
  $B = $605;
  $606 = $C;
  $607 = $B;
  $608 = (($607) + ($606))|0;
  $B = $608;
  $609 = $C;
  $610 = $D;
  $611 = $B;
  $612 = $C;
  $613 = $611 ^ $612;
  $614 = $610 & $613;
  $615 = $609 ^ $614;
  $616 = (($correct_words) + 36|0);
  $617 = HEAP32[$616>>2]|0;
  $618 = (($615) + ($617))|0;
  $619 = (($618) + 568446438)|0;
  $620 = $A;
  $621 = (($620) + ($619))|0;
  $A = $621;
  $622 = $A;
  $623 = $622 << 5;
  $624 = $A;
  $625 = $624 >>> 27;
  $626 = $623 | $625;
  $A = $626;
  $627 = $B;
  $628 = $A;
  $629 = (($628) + ($627))|0;
  $A = $629;
  $630 = $B;
  $631 = $C;
  $632 = $A;
  $633 = $B;
  $634 = $632 ^ $633;
  $635 = $631 & $634;
  $636 = $630 ^ $635;
  $637 = (($correct_words) + 56|0);
  $638 = HEAP32[$637>>2]|0;
  $639 = (($636) + ($638))|0;
  $640 = (($639) + -1019803690)|0;
  $641 = $D;
  $642 = (($641) + ($640))|0;
  $D = $642;
  $643 = $D;
  $644 = $643 << 9;
  $645 = $D;
  $646 = $645 >>> 23;
  $647 = $644 | $646;
  $D = $647;
  $648 = $A;
  $649 = $D;
  $650 = (($649) + ($648))|0;
  $D = $650;
  $651 = $A;
  $652 = $B;
  $653 = $D;
  $654 = $A;
  $655 = $653 ^ $654;
  $656 = $652 & $655;
  $657 = $651 ^ $656;
  $658 = (($correct_words) + 12|0);
  $659 = HEAP32[$658>>2]|0;
  $660 = (($657) + ($659))|0;
  $661 = (($660) + -187363961)|0;
  $662 = $C;
  $663 = (($662) + ($661))|0;
  $C = $663;
  $664 = $C;
  $665 = $664 << 14;
  $666 = $C;
  $667 = $666 >>> 18;
  $668 = $665 | $667;
  $C = $668;
  $669 = $D;
  $670 = $C;
  $671 = (($670) + ($669))|0;
  $C = $671;
  $672 = $D;
  $673 = $A;
  $674 = $C;
  $675 = $D;
  $676 = $674 ^ $675;
  $677 = $673 & $676;
  $678 = $672 ^ $677;
  $679 = (($correct_words) + 32|0);
  $680 = HEAP32[$679>>2]|0;
  $681 = (($678) + ($680))|0;
  $682 = (($681) + 1163531501)|0;
  $683 = $B;
  $684 = (($683) + ($682))|0;
  $B = $684;
  $685 = $B;
  $686 = $685 << 20;
  $687 = $B;
  $688 = $687 >>> 12;
  $689 = $686 | $688;
  $B = $689;
  $690 = $C;
  $691 = $B;
  $692 = (($691) + ($690))|0;
  $B = $692;
  $693 = $C;
  $694 = $D;
  $695 = $B;
  $696 = $C;
  $697 = $695 ^ $696;
  $698 = $694 & $697;
  $699 = $693 ^ $698;
  $700 = (($correct_words) + 52|0);
  $701 = HEAP32[$700>>2]|0;
  $702 = (($699) + ($701))|0;
  $703 = (($702) + -1444681467)|0;
  $704 = $A;
  $705 = (($704) + ($703))|0;
  $A = $705;
  $706 = $A;
  $707 = $706 << 5;
  $708 = $A;
  $709 = $708 >>> 27;
  $710 = $707 | $709;
  $A = $710;
  $711 = $B;
  $712 = $A;
  $713 = (($712) + ($711))|0;
  $A = $713;
  $714 = $B;
  $715 = $C;
  $716 = $A;
  $717 = $B;
  $718 = $716 ^ $717;
  $719 = $715 & $718;
  $720 = $714 ^ $719;
  $721 = (($correct_words) + 8|0);
  $722 = HEAP32[$721>>2]|0;
  $723 = (($720) + ($722))|0;
  $724 = (($723) + -51403784)|0;
  $725 = $D;
  $726 = (($725) + ($724))|0;
  $D = $726;
  $727 = $D;
  $728 = $727 << 9;
  $729 = $D;
  $730 = $729 >>> 23;
  $731 = $728 | $730;
  $D = $731;
  $732 = $A;
  $733 = $D;
  $734 = (($733) + ($732))|0;
  $D = $734;
  $735 = $A;
  $736 = $B;
  $737 = $D;
  $738 = $A;
  $739 = $737 ^ $738;
  $740 = $736 & $739;
  $741 = $735 ^ $740;
  $742 = (($correct_words) + 28|0);
  $743 = HEAP32[$742>>2]|0;
  $744 = (($741) + ($743))|0;
  $745 = (($744) + 1735328473)|0;
  $746 = $C;
  $747 = (($746) + ($745))|0;
  $C = $747;
  $748 = $C;
  $749 = $748 << 14;
  $750 = $C;
  $751 = $750 >>> 18;
  $752 = $749 | $751;
  $C = $752;
  $753 = $D;
  $754 = $C;
  $755 = (($754) + ($753))|0;
  $C = $755;
  $756 = $D;
  $757 = $A;
  $758 = $C;
  $759 = $D;
  $760 = $758 ^ $759;
  $761 = $757 & $760;
  $762 = $756 ^ $761;
  $763 = (($correct_words) + 48|0);
  $764 = HEAP32[$763>>2]|0;
  $765 = (($762) + ($764))|0;
  $766 = (($765) + -1926607734)|0;
  $767 = $B;
  $768 = (($767) + ($766))|0;
  $B = $768;
  $769 = $B;
  $770 = $769 << 20;
  $771 = $B;
  $772 = $771 >>> 12;
  $773 = $770 | $772;
  $B = $773;
  $774 = $C;
  $775 = $B;
  $776 = (($775) + ($774))|0;
  $B = $776;
  $777 = $B;
  $778 = $C;
  $779 = $777 ^ $778;
  $780 = $D;
  $781 = $779 ^ $780;
  $782 = (($correct_words) + 20|0);
  $783 = HEAP32[$782>>2]|0;
  $784 = (($781) + ($783))|0;
  $785 = (($784) + -378558)|0;
  $786 = $A;
  $787 = (($786) + ($785))|0;
  $A = $787;
  $788 = $A;
  $789 = $788 << 4;
  $790 = $A;
  $791 = $790 >>> 28;
  $792 = $789 | $791;
  $A = $792;
  $793 = $B;
  $794 = $A;
  $795 = (($794) + ($793))|0;
  $A = $795;
  $796 = $A;
  $797 = $B;
  $798 = $796 ^ $797;
  $799 = $C;
  $800 = $798 ^ $799;
  $801 = (($correct_words) + 32|0);
  $802 = HEAP32[$801>>2]|0;
  $803 = (($800) + ($802))|0;
  $804 = (($803) + -2022574463)|0;
  $805 = $D;
  $806 = (($805) + ($804))|0;
  $D = $806;
  $807 = $D;
  $808 = $807 << 11;
  $809 = $D;
  $810 = $809 >>> 21;
  $811 = $808 | $810;
  $D = $811;
  $812 = $A;
  $813 = $D;
  $814 = (($813) + ($812))|0;
  $D = $814;
  $815 = $D;
  $816 = $A;
  $817 = $815 ^ $816;
  $818 = $B;
  $819 = $817 ^ $818;
  $820 = (($correct_words) + 44|0);
  $821 = HEAP32[$820>>2]|0;
  $822 = (($819) + ($821))|0;
  $823 = (($822) + 1839030562)|0;
  $824 = $C;
  $825 = (($824) + ($823))|0;
  $C = $825;
  $826 = $C;
  $827 = $826 << 16;
  $828 = $C;
  $829 = $828 >>> 16;
  $830 = $827 | $829;
  $C = $830;
  $831 = $D;
  $832 = $C;
  $833 = (($832) + ($831))|0;
  $C = $833;
  $834 = $C;
  $835 = $D;
  $836 = $834 ^ $835;
  $837 = $A;
  $838 = $836 ^ $837;
  $839 = (($correct_words) + 56|0);
  $840 = HEAP32[$839>>2]|0;
  $841 = (($838) + ($840))|0;
  $842 = (($841) + -35309556)|0;
  $843 = $B;
  $844 = (($843) + ($842))|0;
  $B = $844;
  $845 = $B;
  $846 = $845 << 23;
  $847 = $B;
  $848 = $847 >>> 9;
  $849 = $846 | $848;
  $B = $849;
  $850 = $C;
  $851 = $B;
  $852 = (($851) + ($850))|0;
  $B = $852;
  $853 = $B;
  $854 = $C;
  $855 = $853 ^ $854;
  $856 = $D;
  $857 = $855 ^ $856;
  $858 = (($correct_words) + 4|0);
  $859 = HEAP32[$858>>2]|0;
  $860 = (($857) + ($859))|0;
  $861 = (($860) + -1530992060)|0;
  $862 = $A;
  $863 = (($862) + ($861))|0;
  $A = $863;
  $864 = $A;
  $865 = $864 << 4;
  $866 = $A;
  $867 = $866 >>> 28;
  $868 = $865 | $867;
  $A = $868;
  $869 = $B;
  $870 = $A;
  $871 = (($870) + ($869))|0;
  $A = $871;
  $872 = $A;
  $873 = $B;
  $874 = $872 ^ $873;
  $875 = $C;
  $876 = $874 ^ $875;
  $877 = (($correct_words) + 16|0);
  $878 = HEAP32[$877>>2]|0;
  $879 = (($876) + ($878))|0;
  $880 = (($879) + 1272893353)|0;
  $881 = $D;
  $882 = (($881) + ($880))|0;
  $D = $882;
  $883 = $D;
  $884 = $883 << 11;
  $885 = $D;
  $886 = $885 >>> 21;
  $887 = $884 | $886;
  $D = $887;
  $888 = $A;
  $889 = $D;
  $890 = (($889) + ($888))|0;
  $D = $890;
  $891 = $D;
  $892 = $A;
  $893 = $891 ^ $892;
  $894 = $B;
  $895 = $893 ^ $894;
  $896 = (($correct_words) + 28|0);
  $897 = HEAP32[$896>>2]|0;
  $898 = (($895) + ($897))|0;
  $899 = (($898) + -155497632)|0;
  $900 = $C;
  $901 = (($900) + ($899))|0;
  $C = $901;
  $902 = $C;
  $903 = $902 << 16;
  $904 = $C;
  $905 = $904 >>> 16;
  $906 = $903 | $905;
  $C = $906;
  $907 = $D;
  $908 = $C;
  $909 = (($908) + ($907))|0;
  $C = $909;
  $910 = $C;
  $911 = $D;
  $912 = $910 ^ $911;
  $913 = $A;
  $914 = $912 ^ $913;
  $915 = (($correct_words) + 40|0);
  $916 = HEAP32[$915>>2]|0;
  $917 = (($914) + ($916))|0;
  $918 = (($917) + -1094730640)|0;
  $919 = $B;
  $920 = (($919) + ($918))|0;
  $B = $920;
  $921 = $B;
  $922 = $921 << 23;
  $923 = $B;
  $924 = $923 >>> 9;
  $925 = $922 | $924;
  $B = $925;
  $926 = $C;
  $927 = $B;
  $928 = (($927) + ($926))|0;
  $B = $928;
  $929 = $B;
  $930 = $C;
  $931 = $929 ^ $930;
  $932 = $D;
  $933 = $931 ^ $932;
  $934 = (($correct_words) + 52|0);
  $935 = HEAP32[$934>>2]|0;
  $936 = (($933) + ($935))|0;
  $937 = (($936) + 681279174)|0;
  $938 = $A;
  $939 = (($938) + ($937))|0;
  $A = $939;
  $940 = $A;
  $941 = $940 << 4;
  $942 = $A;
  $943 = $942 >>> 28;
  $944 = $941 | $943;
  $A = $944;
  $945 = $B;
  $946 = $A;
  $947 = (($946) + ($945))|0;
  $A = $947;
  $948 = $A;
  $949 = $B;
  $950 = $948 ^ $949;
  $951 = $C;
  $952 = $950 ^ $951;
  $953 = HEAP32[$correct_words>>2]|0;
  $954 = (($952) + ($953))|0;
  $955 = (($954) + -358537222)|0;
  $956 = $D;
  $957 = (($956) + ($955))|0;
  $D = $957;
  $958 = $D;
  $959 = $958 << 11;
  $960 = $D;
  $961 = $960 >>> 21;
  $962 = $959 | $961;
  $D = $962;
  $963 = $A;
  $964 = $D;
  $965 = (($964) + ($963))|0;
  $D = $965;
  $966 = $D;
  $967 = $A;
  $968 = $966 ^ $967;
  $969 = $B;
  $970 = $968 ^ $969;
  $971 = (($correct_words) + 12|0);
  $972 = HEAP32[$971>>2]|0;
  $973 = (($970) + ($972))|0;
  $974 = (($973) + -722521979)|0;
  $975 = $C;
  $976 = (($975) + ($974))|0;
  $C = $976;
  $977 = $C;
  $978 = $977 << 16;
  $979 = $C;
  $980 = $979 >>> 16;
  $981 = $978 | $980;
  $C = $981;
  $982 = $D;
  $983 = $C;
  $984 = (($983) + ($982))|0;
  $C = $984;
  $985 = $C;
  $986 = $D;
  $987 = $985 ^ $986;
  $988 = $A;
  $989 = $987 ^ $988;
  $990 = (($correct_words) + 24|0);
  $991 = HEAP32[$990>>2]|0;
  $992 = (($989) + ($991))|0;
  $993 = (($992) + 76029189)|0;
  $994 = $B;
  $995 = (($994) + ($993))|0;
  $B = $995;
  $996 = $B;
  $997 = $996 << 23;
  $998 = $B;
  $999 = $998 >>> 9;
  $1000 = $997 | $999;
  $B = $1000;
  $1001 = $C;
  $1002 = $B;
  $1003 = (($1002) + ($1001))|0;
  $B = $1003;
  $1004 = $B;
  $1005 = $C;
  $1006 = $1004 ^ $1005;
  $1007 = $D;
  $1008 = $1006 ^ $1007;
  $1009 = (($correct_words) + 36|0);
  $1010 = HEAP32[$1009>>2]|0;
  $1011 = (($1008) + ($1010))|0;
  $1012 = (($1011) + -640364487)|0;
  $1013 = $A;
  $1014 = (($1013) + ($1012))|0;
  $A = $1014;
  $1015 = $A;
  $1016 = $1015 << 4;
  $1017 = $A;
  $1018 = $1017 >>> 28;
  $1019 = $1016 | $1018;
  $A = $1019;
  $1020 = $B;
  $1021 = $A;
  $1022 = (($1021) + ($1020))|0;
  $A = $1022;
  $1023 = $A;
  $1024 = $B;
  $1025 = $1023 ^ $1024;
  $1026 = $C;
  $1027 = $1025 ^ $1026;
  $1028 = (($correct_words) + 48|0);
  $1029 = HEAP32[$1028>>2]|0;
  $1030 = (($1027) + ($1029))|0;
  $1031 = (($1030) + -421815835)|0;
  $1032 = $D;
  $1033 = (($1032) + ($1031))|0;
  $D = $1033;
  $1034 = $D;
  $1035 = $1034 << 11;
  $1036 = $D;
  $1037 = $1036 >>> 21;
  $1038 = $1035 | $1037;
  $D = $1038;
  $1039 = $A;
  $1040 = $D;
  $1041 = (($1040) + ($1039))|0;
  $D = $1041;
  $1042 = $D;
  $1043 = $A;
  $1044 = $1042 ^ $1043;
  $1045 = $B;
  $1046 = $1044 ^ $1045;
  $1047 = (($correct_words) + 60|0);
  $1048 = HEAP32[$1047>>2]|0;
  $1049 = (($1046) + ($1048))|0;
  $1050 = (($1049) + 530742520)|0;
  $1051 = $C;
  $1052 = (($1051) + ($1050))|0;
  $C = $1052;
  $1053 = $C;
  $1054 = $1053 << 16;
  $1055 = $C;
  $1056 = $1055 >>> 16;
  $1057 = $1054 | $1056;
  $C = $1057;
  $1058 = $D;
  $1059 = $C;
  $1060 = (($1059) + ($1058))|0;
  $C = $1060;
  $1061 = $C;
  $1062 = $D;
  $1063 = $1061 ^ $1062;
  $1064 = $A;
  $1065 = $1063 ^ $1064;
  $1066 = (($correct_words) + 8|0);
  $1067 = HEAP32[$1066>>2]|0;
  $1068 = (($1065) + ($1067))|0;
  $1069 = (($1068) + -995338651)|0;
  $1070 = $B;
  $1071 = (($1070) + ($1069))|0;
  $B = $1071;
  $1072 = $B;
  $1073 = $1072 << 23;
  $1074 = $B;
  $1075 = $1074 >>> 9;
  $1076 = $1073 | $1075;
  $B = $1076;
  $1077 = $C;
  $1078 = $B;
  $1079 = (($1078) + ($1077))|0;
  $B = $1079;
  $1080 = $C;
  $1081 = $B;
  $1082 = $D;
  $1083 = $1082 ^ -1;
  $1084 = $1081 | $1083;
  $1085 = $1080 ^ $1084;
  $1086 = HEAP32[$correct_words>>2]|0;
  $1087 = (($1085) + ($1086))|0;
  $1088 = (($1087) + -198630844)|0;
  $1089 = $A;
  $1090 = (($1089) + ($1088))|0;
  $A = $1090;
  $1091 = $A;
  $1092 = $1091 << 6;
  $1093 = $A;
  $1094 = $1093 >>> 26;
  $1095 = $1092 | $1094;
  $A = $1095;
  $1096 = $B;
  $1097 = $A;
  $1098 = (($1097) + ($1096))|0;
  $A = $1098;
  $1099 = $B;
  $1100 = $A;
  $1101 = $C;
  $1102 = $1101 ^ -1;
  $1103 = $1100 | $1102;
  $1104 = $1099 ^ $1103;
  $1105 = (($correct_words) + 28|0);
  $1106 = HEAP32[$1105>>2]|0;
  $1107 = (($1104) + ($1106))|0;
  $1108 = (($1107) + 1126891415)|0;
  $1109 = $D;
  $1110 = (($1109) + ($1108))|0;
  $D = $1110;
  $1111 = $D;
  $1112 = $1111 << 10;
  $1113 = $D;
  $1114 = $1113 >>> 22;
  $1115 = $1112 | $1114;
  $D = $1115;
  $1116 = $A;
  $1117 = $D;
  $1118 = (($1117) + ($1116))|0;
  $D = $1118;
  $1119 = $A;
  $1120 = $D;
  $1121 = $B;
  $1122 = $1121 ^ -1;
  $1123 = $1120 | $1122;
  $1124 = $1119 ^ $1123;
  $1125 = (($correct_words) + 56|0);
  $1126 = HEAP32[$1125>>2]|0;
  $1127 = (($1124) + ($1126))|0;
  $1128 = (($1127) + -1416354905)|0;
  $1129 = $C;
  $1130 = (($1129) + ($1128))|0;
  $C = $1130;
  $1131 = $C;
  $1132 = $1131 << 15;
  $1133 = $C;
  $1134 = $1133 >>> 17;
  $1135 = $1132 | $1134;
  $C = $1135;
  $1136 = $D;
  $1137 = $C;
  $1138 = (($1137) + ($1136))|0;
  $C = $1138;
  $1139 = $D;
  $1140 = $C;
  $1141 = $A;
  $1142 = $1141 ^ -1;
  $1143 = $1140 | $1142;
  $1144 = $1139 ^ $1143;
  $1145 = (($correct_words) + 20|0);
  $1146 = HEAP32[$1145>>2]|0;
  $1147 = (($1144) + ($1146))|0;
  $1148 = (($1147) + -57434055)|0;
  $1149 = $B;
  $1150 = (($1149) + ($1148))|0;
  $B = $1150;
  $1151 = $B;
  $1152 = $1151 << 21;
  $1153 = $B;
  $1154 = $1153 >>> 11;
  $1155 = $1152 | $1154;
  $B = $1155;
  $1156 = $C;
  $1157 = $B;
  $1158 = (($1157) + ($1156))|0;
  $B = $1158;
  $1159 = $C;
  $1160 = $B;
  $1161 = $D;
  $1162 = $1161 ^ -1;
  $1163 = $1160 | $1162;
  $1164 = $1159 ^ $1163;
  $1165 = (($correct_words) + 48|0);
  $1166 = HEAP32[$1165>>2]|0;
  $1167 = (($1164) + ($1166))|0;
  $1168 = (($1167) + 1700485571)|0;
  $1169 = $A;
  $1170 = (($1169) + ($1168))|0;
  $A = $1170;
  $1171 = $A;
  $1172 = $1171 << 6;
  $1173 = $A;
  $1174 = $1173 >>> 26;
  $1175 = $1172 | $1174;
  $A = $1175;
  $1176 = $B;
  $1177 = $A;
  $1178 = (($1177) + ($1176))|0;
  $A = $1178;
  $1179 = $B;
  $1180 = $A;
  $1181 = $C;
  $1182 = $1181 ^ -1;
  $1183 = $1180 | $1182;
  $1184 = $1179 ^ $1183;
  $1185 = (($correct_words) + 12|0);
  $1186 = HEAP32[$1185>>2]|0;
  $1187 = (($1184) + ($1186))|0;
  $1188 = (($1187) + -1894986606)|0;
  $1189 = $D;
  $1190 = (($1189) + ($1188))|0;
  $D = $1190;
  $1191 = $D;
  $1192 = $1191 << 10;
  $1193 = $D;
  $1194 = $1193 >>> 22;
  $1195 = $1192 | $1194;
  $D = $1195;
  $1196 = $A;
  $1197 = $D;
  $1198 = (($1197) + ($1196))|0;
  $D = $1198;
  $1199 = $A;
  $1200 = $D;
  $1201 = $B;
  $1202 = $1201 ^ -1;
  $1203 = $1200 | $1202;
  $1204 = $1199 ^ $1203;
  $1205 = (($correct_words) + 40|0);
  $1206 = HEAP32[$1205>>2]|0;
  $1207 = (($1204) + ($1206))|0;
  $1208 = (($1207) + -1051523)|0;
  $1209 = $C;
  $1210 = (($1209) + ($1208))|0;
  $C = $1210;
  $1211 = $C;
  $1212 = $1211 << 15;
  $1213 = $C;
  $1214 = $1213 >>> 17;
  $1215 = $1212 | $1214;
  $C = $1215;
  $1216 = $D;
  $1217 = $C;
  $1218 = (($1217) + ($1216))|0;
  $C = $1218;
  $1219 = $D;
  $1220 = $C;
  $1221 = $A;
  $1222 = $1221 ^ -1;
  $1223 = $1220 | $1222;
  $1224 = $1219 ^ $1223;
  $1225 = (($correct_words) + 4|0);
  $1226 = HEAP32[$1225>>2]|0;
  $1227 = (($1224) + ($1226))|0;
  $1228 = (($1227) + -2054922799)|0;
  $1229 = $B;
  $1230 = (($1229) + ($1228))|0;
  $B = $1230;
  $1231 = $B;
  $1232 = $1231 << 21;
  $1233 = $B;
  $1234 = $1233 >>> 11;
  $1235 = $1232 | $1234;
  $B = $1235;
  $1236 = $C;
  $1237 = $B;
  $1238 = (($1237) + ($1236))|0;
  $B = $1238;
  $1239 = $C;
  $1240 = $B;
  $1241 = $D;
  $1242 = $1241 ^ -1;
  $1243 = $1240 | $1242;
  $1244 = $1239 ^ $1243;
  $1245 = (($correct_words) + 32|0);
  $1246 = HEAP32[$1245>>2]|0;
  $1247 = (($1244) + ($1246))|0;
  $1248 = (($1247) + 1873313359)|0;
  $1249 = $A;
  $1250 = (($1249) + ($1248))|0;
  $A = $1250;
  $1251 = $A;
  $1252 = $1251 << 6;
  $1253 = $A;
  $1254 = $1253 >>> 26;
  $1255 = $1252 | $1254;
  $A = $1255;
  $1256 = $B;
  $1257 = $A;
  $1258 = (($1257) + ($1256))|0;
  $A = $1258;
  $1259 = $B;
  $1260 = $A;
  $1261 = $C;
  $1262 = $1261 ^ -1;
  $1263 = $1260 | $1262;
  $1264 = $1259 ^ $1263;
  $1265 = (($correct_words) + 60|0);
  $1266 = HEAP32[$1265>>2]|0;
  $1267 = (($1264) + ($1266))|0;
  $1268 = (($1267) + -30611744)|0;
  $1269 = $D;
  $1270 = (($1269) + ($1268))|0;
  $D = $1270;
  $1271 = $D;
  $1272 = $1271 << 10;
  $1273 = $D;
  $1274 = $1273 >>> 22;
  $1275 = $1272 | $1274;
  $D = $1275;
  $1276 = $A;
  $1277 = $D;
  $1278 = (($1277) + ($1276))|0;
  $D = $1278;
  $1279 = $A;
  $1280 = $D;
  $1281 = $B;
  $1282 = $1281 ^ -1;
  $1283 = $1280 | $1282;
  $1284 = $1279 ^ $1283;
  $1285 = (($correct_words) + 24|0);
  $1286 = HEAP32[$1285>>2]|0;
  $1287 = (($1284) + ($1286))|0;
  $1288 = (($1287) + -1560198380)|0;
  $1289 = $C;
  $1290 = (($1289) + ($1288))|0;
  $C = $1290;
  $1291 = $C;
  $1292 = $1291 << 15;
  $1293 = $C;
  $1294 = $1293 >>> 17;
  $1295 = $1292 | $1294;
  $C = $1295;
  $1296 = $D;
  $1297 = $C;
  $1298 = (($1297) + ($1296))|0;
  $C = $1298;
  $1299 = $D;
  $1300 = $C;
  $1301 = $A;
  $1302 = $1301 ^ -1;
  $1303 = $1300 | $1302;
  $1304 = $1299 ^ $1303;
  $1305 = (($correct_words) + 52|0);
  $1306 = HEAP32[$1305>>2]|0;
  $1307 = (($1304) + ($1306))|0;
  $1308 = (($1307) + 1309151649)|0;
  $1309 = $B;
  $1310 = (($1309) + ($1308))|0;
  $B = $1310;
  $1311 = $B;
  $1312 = $1311 << 21;
  $1313 = $B;
  $1314 = $1313 >>> 11;
  $1315 = $1312 | $1314;
  $B = $1315;
  $1316 = $C;
  $1317 = $B;
  $1318 = (($1317) + ($1316))|0;
  $B = $1318;
  $1319 = $C;
  $1320 = $B;
  $1321 = $D;
  $1322 = $1321 ^ -1;
  $1323 = $1320 | $1322;
  $1324 = $1319 ^ $1323;
  $1325 = (($correct_words) + 16|0);
  $1326 = HEAP32[$1325>>2]|0;
  $1327 = (($1324) + ($1326))|0;
  $1328 = (($1327) + -145523070)|0;
  $1329 = $A;
  $1330 = (($1329) + ($1328))|0;
  $A = $1330;
  $1331 = $A;
  $1332 = $1331 << 6;
  $1333 = $A;
  $1334 = $1333 >>> 26;
  $1335 = $1332 | $1334;
  $A = $1335;
  $1336 = $B;
  $1337 = $A;
  $1338 = (($1337) + ($1336))|0;
  $A = $1338;
  $1339 = $B;
  $1340 = $A;
  $1341 = $C;
  $1342 = $1341 ^ -1;
  $1343 = $1340 | $1342;
  $1344 = $1339 ^ $1343;
  $1345 = (($correct_words) + 44|0);
  $1346 = HEAP32[$1345>>2]|0;
  $1347 = (($1344) + ($1346))|0;
  $1348 = (($1347) + -1120210379)|0;
  $1349 = $D;
  $1350 = (($1349) + ($1348))|0;
  $D = $1350;
  $1351 = $D;
  $1352 = $1351 << 10;
  $1353 = $D;
  $1354 = $1353 >>> 22;
  $1355 = $1352 | $1354;
  $D = $1355;
  $1356 = $A;
  $1357 = $D;
  $1358 = (($1357) + ($1356))|0;
  $D = $1358;
  $1359 = $A;
  $1360 = $D;
  $1361 = $B;
  $1362 = $1361 ^ -1;
  $1363 = $1360 | $1362;
  $1364 = $1359 ^ $1363;
  $1365 = (($correct_words) + 8|0);
  $1366 = HEAP32[$1365>>2]|0;
  $1367 = (($1364) + ($1366))|0;
  $1368 = (($1367) + 718787259)|0;
  $1369 = $C;
  $1370 = (($1369) + ($1368))|0;
  $C = $1370;
  $1371 = $C;
  $1372 = $1371 << 15;
  $1373 = $C;
  $1374 = $1373 >>> 17;
  $1375 = $1372 | $1374;
  $C = $1375;
  $1376 = $D;
  $1377 = $C;
  $1378 = (($1377) + ($1376))|0;
  $C = $1378;
  $1379 = $D;
  $1380 = $C;
  $1381 = $A;
  $1382 = $1381 ^ -1;
  $1383 = $1380 | $1382;
  $1384 = $1379 ^ $1383;
  $1385 = (($correct_words) + 36|0);
  $1386 = HEAP32[$1385>>2]|0;
  $1387 = (($1384) + ($1386))|0;
  $1388 = (($1387) + -343485551)|0;
  $1389 = $B;
  $1390 = (($1389) + ($1388))|0;
  $B = $1390;
  $1391 = $B;
  $1392 = $1391 << 21;
  $1393 = $B;
  $1394 = $1393 >>> 11;
  $1395 = $1392 | $1394;
  $B = $1395;
  $1396 = $C;
  $1397 = $B;
  $1398 = (($1397) + ($1396))|0;
  $B = $1398;
  $1399 = $A_save;
  $1400 = $A;
  $1401 = (($1400) + ($1399))|0;
  $A = $1401;
  $1402 = $B_save;
  $1403 = $B;
  $1404 = (($1403) + ($1402))|0;
  $B = $1404;
  $1405 = $C_save;
  $1406 = $C;
  $1407 = (($1406) + ($1405))|0;
  $C = $1407;
  $1408 = $D_save;
  $1409 = $D;
  $1410 = (($1409) + ($1408))|0;
  $D = $1410;
 }
 $1411 = $A;
 $1412 = $2;
 HEAP32[$1412>>2] = $1411;
 $1413 = $B;
 $1414 = $2;
 $1415 = (($1414) + 4|0);
 HEAP32[$1415>>2] = $1413;
 $1416 = $C;
 $1417 = $2;
 $1418 = (($1417) + 8|0);
 HEAP32[$1418>>2] = $1416;
 $1419 = $D;
 $1420 = $2;
 $1421 = (($1420) + 12|0);
 HEAP32[$1421>>2] = $1419;
 STACKTOP = sp;return;
}
function _md5_process_bytes($buffer,$len,$ctx) {
 $buffer = $buffer|0;
 $len = $len|0;
 $ctx = $ctx|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $add = 0, $left_over = 0, $left_over1 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $buffer;
 $1 = $len;
 $2 = $ctx;
 $3 = $2;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = (($7) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $left_over = $9;
  $10 = $left_over;
  $11 = (128 - ($10))|0;
  $12 = $1;
  $13 = ($11>>>0)>($12>>>0);
  if ($13) {
   $14 = $1;
   $17 = $14;
  } else {
   $15 = $left_over;
   $16 = (128 - ($15))|0;
   $17 = $16;
  }
  $add = $17;
  $18 = $left_over;
  $19 = $2;
  $20 = (($19) + 28|0);
  $21 = (($20) + ($18)|0);
  $22 = $0;
  $23 = $add;
  _memcpy(($21|0),($22|0),($23|0))|0;
  $24 = $add;
  $25 = $2;
  $26 = (($25) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24))|0;
  HEAP32[$26>>2] = $28;
  $29 = $2;
  $30 = (($29) + 24|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31>>>0)>(64);
  if ($32) {
   $33 = $2;
   $34 = (($33) + 28|0);
   $35 = $2;
   $36 = (($35) + 24|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $37 & -64;
   $39 = $2;
   _md5_process_block($34,$38,$39);
   $40 = $2;
   $41 = (($40) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 63;
   HEAP32[$41>>2] = $43;
   $44 = $2;
   $45 = (($44) + 28|0);
   $46 = $left_over;
   $47 = $add;
   $48 = (($46) + ($47))|0;
   $49 = $48 & -64;
   $50 = $2;
   $51 = (($50) + 28|0);
   $52 = (($51) + ($49)|0);
   $53 = $2;
   $54 = (($53) + 24|0);
   $55 = HEAP32[$54>>2]|0;
   _memcpy(($45|0),($52|0),($55|0))|0;
  }
  $56 = $0;
  $57 = $add;
  $58 = (($56) + ($57)|0);
  $0 = $58;
  $59 = $add;
  $60 = $1;
  $61 = (($60) - ($59))|0;
  $1 = $61;
 }
 $62 = $1;
 $63 = ($62>>>0)>=(64);
 if ($63) {
  $64 = $0;
  $65 = $64;
  $66 = (($65>>>0) % 4)&-1;
  $67 = ($66|0)!=(0);
  if ($67) {
   while(1) {
    $68 = $1;
    $69 = ($68>>>0)>(64);
    if (!($69)) {
     break;
    }
    $70 = $2;
    $71 = (($70) + 28|0);
    $72 = $0;
    dest=$71+0|0; src=$72+0|0; stop=dest+64|0; do { HEAP8[dest]=HEAP8[src]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $73 = $2;
    $74 = (($73) + 28|0);
    $75 = $2;
    _md5_process_block($74,64,$75);
    $76 = $0;
    $77 = (($76) + 64|0);
    $0 = $77;
    $78 = $1;
    $79 = (($78) - 64)|0;
    $1 = $79;
   }
  } else {
   $80 = $0;
   $81 = $1;
   $82 = $81 & -64;
   $83 = $2;
   _md5_process_block($80,$82,$83);
   $84 = $0;
   $85 = $1;
   $86 = $85 & -64;
   $87 = (($84) + ($86)|0);
   $0 = $87;
   $88 = $1;
   $89 = $88 & 63;
   $1 = $89;
  }
 }
 $90 = $1;
 $91 = ($90>>>0)>(0);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 $92 = $2;
 $93 = (($92) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 $left_over1 = $94;
 $95 = $left_over1;
 $96 = $2;
 $97 = (($96) + 28|0);
 $98 = (($97) + ($95)|0);
 $99 = $0;
 $100 = $1;
 _memcpy(($98|0),($99|0),($100|0))|0;
 $101 = $1;
 $102 = $left_over1;
 $103 = (($102) + ($101))|0;
 $left_over1 = $103;
 $104 = $left_over1;
 $105 = ($104>>>0)>=(64);
 if ($105) {
  $106 = $2;
  $107 = (($106) + 28|0);
  $108 = $2;
  _md5_process_block($107,64,$108);
  $109 = $left_over1;
  $110 = (($109) - 64)|0;
  $left_over1 = $110;
  $111 = $2;
  $112 = (($111) + 28|0);
  $113 = $2;
  $114 = (($113) + 28|0);
  $115 = (($114) + 64|0);
  $116 = $left_over1;
  _memcpy(($112|0),($115|0),($116|0))|0;
 }
 $117 = $left_over1;
 $118 = $2;
 $119 = (($118) + 24|0);
 HEAP32[$119>>2] = $117;
 STACKTOP = sp;return;
}
function _mspack_sys_selftest_internal($offt_size) {
 $offt_size = $offt_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $offt_size;
 $1 = $0;
 $2 = (4)==($1|0);
 $3 = $2 ? 0 : 5;
 STACKTOP = sp;return ($3|0);
}
function _mspack_valid_system($sys) {
 $sys = $sys|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $sys;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)!=(0|0);
  if ($5) {
   $6 = $0;
   $7 = (($6) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $0;
    $11 = (($10) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)!=(0|0);
    if ($13) {
     $14 = $0;
     $15 = (($14) + 12|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($16|0)!=(0|0);
     if ($17) {
      $18 = $0;
      $19 = (($18) + 16|0);
      $20 = HEAP32[$19>>2]|0;
      $21 = ($20|0)!=(0|0);
      if ($21) {
       $22 = $0;
       $23 = (($22) + 20|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = ($24|0)!=(0|0);
       if ($25) {
        $26 = $0;
        $27 = (($26) + 24|0);
        $28 = HEAP32[$27>>2]|0;
        $29 = ($28|0)!=(0|0);
        if ($29) {
         $30 = $0;
         $31 = (($30) + 28|0);
         $32 = HEAP32[$31>>2]|0;
         $33 = ($32|0)!=(0|0);
         if ($33) {
          $34 = $0;
          $35 = (($34) + 32|0);
          $36 = HEAP32[$35>>2]|0;
          $37 = ($36|0)!=(0|0);
          if ($37) {
           $38 = $0;
           $39 = (($38) + 36|0);
           $40 = HEAP32[$39>>2]|0;
           $41 = ($40|0)!=(0|0);
           if ($41) {
            $42 = $0;
            $43 = (($42) + 40|0);
            $44 = HEAP32[$43>>2]|0;
            $45 = ($44|0)==(0|0);
            $47 = $45;
           } else {
            $47 = 0;
           }
          } else {
           $47 = 0;
          }
         } else {
          $47 = 0;
         }
        } else {
         $47 = 0;
        }
       } else {
        $47 = 0;
       }
      } else {
       $47 = 0;
      }
     } else {
      $47 = 0;
     }
    } else {
     $47 = 0;
    }
   } else {
    $47 = 0;
   }
  } else {
   $47 = 0;
  }
 } else {
  $47 = 0;
 }
 $46 = $47&1;
 STACKTOP = sp;return ($46|0);
}
function _mspack_sys_filelen($system,$file,$length) {
 $system = $system|0;
 $file = $file|0;
 $length = $length|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $current = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $system;
 $2 = $file;
 $3 = $length;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if ($7) {
   $8 = $3;
   $9 = ($8|0)!=(0|0);
   if ($9) {
    $10 = $1;
    $11 = (($10) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $2;
    $14 = (FUNCTION_TABLE_ii[$12 & 3]($13)|0);
    $current = $14;
    $15 = $1;
    $16 = (($15) + 16|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $2;
    $19 = (FUNCTION_TABLE_iiii[$17 & 15]($18,0,2)|0);
    $20 = ($19|0)!=(0);
    if ($20) {
     $0 = 5;
     $34 = $0;
     STACKTOP = sp;return ($34|0);
    }
    $21 = $1;
    $22 = (($21) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = $2;
    $25 = (FUNCTION_TABLE_ii[$23 & 3]($24)|0);
    $26 = $3;
    HEAP32[$26>>2] = $25;
    $27 = $1;
    $28 = (($27) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = $2;
    $31 = $current;
    $32 = (FUNCTION_TABLE_iiii[$29 & 15]($30,$31,0)|0);
    $33 = ($32|0)!=(0);
    if ($33) {
     $0 = 5;
     $34 = $0;
     STACKTOP = sp;return ($34|0);
    } else {
     $0 = 0;
     $34 = $0;
     STACKTOP = sp;return ($34|0);
    }
   }
  }
 }
 $0 = 2;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function _mspack_create_cab_decompressor($sys) {
 $sys = $sys|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $sys;
 $self = 0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  $4 = HEAP32[2992>>2]|0;
  $1 = $4;
 }
 $5 = $1;
 $6 = (_mspack_valid_system($5)|0);
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $8 = $1;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = (FUNCTION_TABLE_iii[$10 & 15]($11,60)|0);
 $self = $12;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $self;
  HEAP32[$14>>2] = 2;
  $15 = $self;
  $16 = (($15) + 4|0);
  HEAP32[$16>>2] = 1;
  $17 = $self;
  $18 = (($17) + 8|0);
  HEAP32[$18>>2] = 3;
  $19 = $self;
  $20 = (($19) + 20|0);
  HEAP32[$20>>2] = 5;
  $21 = $self;
  $22 = (($21) + 16|0);
  HEAP32[$22>>2] = 6;
  $23 = $self;
  $24 = (($23) + 12|0);
  HEAP32[$24>>2] = 7;
  $25 = $self;
  $26 = (($25) + 24|0);
  HEAP32[$26>>2] = 8;
  $27 = $self;
  $28 = (($27) + 28|0);
  HEAP32[$28>>2] = 2;
  $29 = $1;
  $30 = $self;
  $31 = (($30) + 36|0);
  HEAP32[$31>>2] = $29;
  $32 = $self;
  $33 = (($32) + 32|0);
  HEAP32[$33>>2] = 0;
  $34 = $self;
  $35 = (($34) + 52|0);
  HEAP32[$35>>2] = 0;
  $36 = $self;
  $37 = (($36) + 40|0);
  HEAP32[$37>>2] = 32768;
  $38 = $self;
  $39 = (($38) + 40|0);
  $40 = (($39) + 4|0);
  HEAP32[$40>>2] = 0;
  $41 = $self;
  $42 = (($41) + 40|0);
  $43 = (($42) + 8|0);
  HEAP32[$43>>2] = 4096;
 }
 $44 = $self;
 $0 = $44;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _cabd_open($base,$filename) {
 $base = $base|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cab = 0, $error = 0, $fh = 0, $self = 0, $sys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $base;
 $2 = $filename;
 $3 = $1;
 $self = $3;
 $cab = 0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $6 = $self;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $sys = $8;
 $9 = $sys;
 $10 = HEAP32[$9>>2]|0;
 $11 = $sys;
 $12 = $2;
 $13 = (FUNCTION_TABLE_iiii[$10 & 15]($11,$12,0)|0);
 $fh = $13;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $sys;
  $16 = (($15) + 28|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $sys;
  $19 = (FUNCTION_TABLE_iii[$17 & 15]($18,68)|0);
  $cab = $19;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = $2;
   $22 = $cab;
   $23 = (($22) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = $sys;
   $25 = $fh;
   $26 = $cab;
   $27 = (_cabd_read_headers($24,$25,$26,0,0)|0);
   $error = $27;
   $28 = $error;
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = $1;
    $31 = $cab;
    _cabd_close($30,$31);
    $cab = 0;
   }
   $32 = $error;
   $33 = $self;
   $34 = (($33) + 52|0);
   HEAP32[$34>>2] = $32;
  } else {
   $35 = $self;
   $36 = (($35) + 52|0);
   HEAP32[$36>>2] = 6;
  }
  $37 = $sys;
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $fh;
  FUNCTION_TABLE_vi[$39 & 3]($40);
 } else {
  $41 = $self;
  $42 = (($41) + 52|0);
  HEAP32[$42>>2] = 2;
 }
 $43 = $cab;
 $0 = $43;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _cabd_close($base,$origcab) {
 $base = $base|0;
 $origcab = $origcab|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cab = 0, $dat = 0, $fi = 0, $fol = 0, $ncab = 0, $ndat = 0, $nfi = 0, $nfol = 0, $self = 0, $sys = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $base;
 $1 = $origcab;
 $2 = $0;
 $self = $2;
 $3 = $0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $self;
 $6 = (($5) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $sys = $7;
 $8 = $self;
 $9 = (($8) + 52|0);
 HEAP32[$9>>2] = 0;
 while(1) {
  $10 = $1;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   break;
  }
  $12 = $1;
  $13 = (($12) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $fi = $14;
  while(1) {
   $15 = $fi;
   $16 = ($15|0)!=(0|0);
   if (!($16)) {
    break;
   }
   $17 = $fi;
   $18 = HEAP32[$17>>2]|0;
   $nfi = $18;
   $19 = $sys;
   $20 = (($19) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $fi;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   FUNCTION_TABLE_vi[$21 & 3]($24);
   $25 = $sys;
   $26 = (($25) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $fi;
   FUNCTION_TABLE_vi[$27 & 3]($28);
   $29 = $nfi;
   $fi = $29;
  }
  $30 = $1;
  $31 = (($30) + 44|0);
  $32 = HEAP32[$31>>2]|0;
  $fol = $32;
  while(1) {
   $33 = $fol;
   $34 = ($33|0)!=(0|0);
   if (!($34)) {
    break;
   }
   $35 = $fol;
   $36 = HEAP32[$35>>2]|0;
   $nfol = $36;
   $37 = $self;
   $38 = (($37) + 32|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = ($39|0)!=(0|0);
   if ($40) {
    $41 = $self;
    $42 = (($41) + 32|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[$43>>2]|0;
    $45 = $fol;
    $46 = ($44|0)==($45|0);
    if ($46) {
     $47 = $self;
     $48 = (($47) + 32|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = (($49) + 76|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)!=(0|0);
     if ($52) {
      $53 = $sys;
      $54 = (($53) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = $self;
      $57 = (($56) + 32|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = (($58) + 76|0);
      $60 = HEAP32[$59>>2]|0;
      FUNCTION_TABLE_vi[$55 & 3]($60);
     }
     $61 = $self;
     _cabd_free_decomp($61);
     $62 = $sys;
     $63 = (($62) + 32|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = $self;
     $66 = (($65) + 32|0);
     $67 = HEAP32[$66>>2]|0;
     FUNCTION_TABLE_vi[$64 & 3]($67);
     $68 = $self;
     $69 = (($68) + 32|0);
     HEAP32[$69>>2] = 0;
    }
   }
   $70 = $fol;
   $71 = (($70) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $dat = $72;
   while(1) {
    $73 = $dat;
    $74 = ($73|0)!=(0|0);
    if (!($74)) {
     break;
    }
    $75 = $dat;
    $76 = HEAP32[$75>>2]|0;
    $ndat = $76;
    $77 = $sys;
    $78 = (($77) + 32|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $dat;
    FUNCTION_TABLE_vi[$79 & 3]($80);
    $81 = $ndat;
    $dat = $81;
   }
   $82 = $sys;
   $83 = (($82) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $fol;
   FUNCTION_TABLE_vi[$84 & 3]($85);
   $86 = $nfol;
   $fol = $86;
  }
  $87 = $1;
  $cab = $87;
  while(1) {
   $88 = $cab;
   $89 = ($88|0)!=(0|0);
   if (!($89)) {
    break;
   }
   $90 = $cab;
   $91 = (($90) + 16|0);
   $92 = HEAP32[$91>>2]|0;
   $ncab = $92;
   $93 = $sys;
   $94 = (($93) + 32|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $cab;
   $97 = (($96) + 24|0);
   $98 = HEAP32[$97>>2]|0;
   FUNCTION_TABLE_vi[$95 & 3]($98);
   $99 = $sys;
   $100 = (($99) + 32|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $cab;
   $103 = (($102) + 28|0);
   $104 = HEAP32[$103>>2]|0;
   FUNCTION_TABLE_vi[$101 & 3]($104);
   $105 = $sys;
   $106 = (($105) + 32|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $cab;
   $109 = (($108) + 32|0);
   $110 = HEAP32[$109>>2]|0;
   FUNCTION_TABLE_vi[$107 & 3]($110);
   $111 = $sys;
   $112 = (($111) + 32|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $cab;
   $115 = (($114) + 36|0);
   $116 = HEAP32[$115>>2]|0;
   FUNCTION_TABLE_vi[$113 & 3]($116);
   $117 = $cab;
   $118 = $1;
   $119 = ($117|0)!=($118|0);
   if ($119) {
    $120 = $sys;
    $121 = (($120) + 32|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = $cab;
    FUNCTION_TABLE_vi[$122 & 3]($123);
   }
   $124 = $ncab;
   $cab = $124;
  }
  $125 = $1;
  $126 = (($125) + 20|0);
  $127 = HEAP32[$126>>2]|0;
  $cab = $127;
  while(1) {
   $128 = $cab;
   $129 = ($128|0)!=(0|0);
   if (!($129)) {
    break;
   }
   $130 = $cab;
   $131 = (($130) + 20|0);
   $132 = HEAP32[$131>>2]|0;
   $ncab = $132;
   $133 = $sys;
   $134 = (($133) + 32|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = $cab;
   $137 = (($136) + 24|0);
   $138 = HEAP32[$137>>2]|0;
   FUNCTION_TABLE_vi[$135 & 3]($138);
   $139 = $sys;
   $140 = (($139) + 32|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = $cab;
   $143 = (($142) + 28|0);
   $144 = HEAP32[$143>>2]|0;
   FUNCTION_TABLE_vi[$141 & 3]($144);
   $145 = $sys;
   $146 = (($145) + 32|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $cab;
   $149 = (($148) + 32|0);
   $150 = HEAP32[$149>>2]|0;
   FUNCTION_TABLE_vi[$147 & 3]($150);
   $151 = $sys;
   $152 = (($151) + 32|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $cab;
   $155 = (($154) + 36|0);
   $156 = HEAP32[$155>>2]|0;
   FUNCTION_TABLE_vi[$153 & 3]($156);
   $157 = $sys;
   $158 = (($157) + 32|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $cab;
   FUNCTION_TABLE_vi[$159 & 3]($160);
   $161 = $ncab;
   $cab = $161;
  }
  $162 = $1;
  $163 = HEAP32[$162>>2]|0;
  $cab = $163;
  $164 = $sys;
  $165 = (($164) + 32|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $1;
  FUNCTION_TABLE_vi[$166 & 3]($167);
  $168 = $cab;
  $1 = $168;
 }
 STACKTOP = sp;return;
}
function _cabd_search($base,$filename) {
 $base = $base|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $cab = 0, $fh = 0, $filelen = 0, $firstlen = 0, $search_buf = 0, $self = 0, $sys = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $cab = sp + 20|0;
 $filelen = sp + 44|0;
 $firstlen = sp + 48|0;
 $1 = $base;
 $2 = $filename;
 $3 = $1;
 $self = $3;
 HEAP32[$cab>>2] = 0;
 HEAP32[$firstlen>>2] = 0;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $6 = $self;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $sys = $8;
 $9 = $sys;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $sys;
 $13 = $self;
 $14 = (($13) + 40|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (FUNCTION_TABLE_iii[$11 & 15]($12,$15)|0);
 $search_buf = $16;
 $17 = $search_buf;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $19 = $self;
  $20 = (($19) + 52|0);
  HEAP32[$20>>2] = 6;
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 $21 = $sys;
 $22 = HEAP32[$21>>2]|0;
 $23 = $sys;
 $24 = $2;
 $25 = (FUNCTION_TABLE_iiii[$22 & 15]($23,$24,0)|0);
 $fh = $25;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = $sys;
  $28 = $fh;
  $29 = (_mspack_sys_filelen($27,$28,$filelen)|0);
  $30 = $self;
  $31 = (($30) + 52|0);
  HEAP32[$31>>2] = $29;
  $32 = ($29|0)!=(0);
  if (!($32)) {
   $33 = $self;
   $34 = $search_buf;
   $35 = $fh;
   $36 = $2;
   $37 = HEAP32[$filelen>>2]|0;
   $38 = (_cabd_find($33,$34,$35,$36,$37,$firstlen,$cab)|0);
   $39 = $self;
   $40 = (($39) + 52|0);
   HEAP32[$40>>2] = $38;
  }
  $41 = HEAP32[$firstlen>>2]|0;
  $42 = ($41|0)!=(0);
  do {
   if ($42) {
    $43 = HEAP32[$firstlen>>2]|0;
    $44 = HEAP32[$filelen>>2]|0;
    $45 = ($43|0)!=($44|0);
    if ($45) {
     $46 = HEAP32[$cab>>2]|0;
     $47 = ($46|0)!=(0|0);
     if ($47) {
      $48 = HEAP32[$cab>>2]|0;
      $49 = (($48) + 8|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0);
      if (!($51)) {
       break;
      }
     }
     $52 = HEAP32[$firstlen>>2]|0;
     $53 = HEAP32[$filelen>>2]|0;
     $54 = ($52|0)<($53|0);
     if ($54) {
      $55 = $sys;
      $56 = (($55) + 24|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = $fh;
      $59 = HEAP32[$filelen>>2]|0;
      $60 = HEAP32[$firstlen>>2]|0;
      $61 = (($59) - ($60))|0;
      HEAP32[$vararg_buffer>>2] = $61;
      FUNCTION_TABLE_viii[$57 & 3]($58,3360,$vararg_buffer);
     } else {
      $62 = $sys;
      $63 = (($62) + 24|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = $fh;
      $66 = HEAP32[$firstlen>>2]|0;
      $67 = HEAP32[$filelen>>2]|0;
      $68 = (($66) - ($67))|0;
      HEAP32[$vararg_buffer1>>2] = $68;
      FUNCTION_TABLE_viii[$64 & 3]($65,3416,$vararg_buffer1);
     }
    }
   }
  } while(0);
  $69 = $sys;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $fh;
  FUNCTION_TABLE_vi[$71 & 3]($72);
 } else {
  $73 = $self;
  $74 = (($73) + 52|0);
  HEAP32[$74>>2] = 2;
 }
 $75 = $sys;
 $76 = (($75) + 32|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $search_buf;
 FUNCTION_TABLE_vi[$77 & 3]($78);
 $79 = HEAP32[$cab>>2]|0;
 $0 = $79;
 $80 = $0;
 STACKTOP = sp;return ($80|0);
}
function _cabd_extract($base,$file,$filename) {
 $base = $base|0;
 $file = $file|0;
 $filename = $filename|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes = 0;
 var $error = 0, $fh = 0, $fol = 0, $self = 0, $sys = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $1 = $base;
 $2 = $file;
 $3 = $filename;
 $4 = $1;
 $self = $4;
 $5 = $self;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 1;
  $318 = $0;
  STACKTOP = sp;return ($318|0);
 }
 $7 = $2;
 $8 = ($7|0)!=(0|0);
 if (!($8)) {
  $9 = $self;
  $10 = (($9) + 52|0);
  HEAP32[$10>>2] = 1;
  $0 = 1;
  $318 = $0;
  STACKTOP = sp;return ($318|0);
 }
 $11 = $self;
 $12 = (($11) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $sys = $13;
 $14 = $2;
 $15 = (($14) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $fol = $16;
 $17 = $fol;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = $fol;
  $20 = (($19) + 24|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)!=(0|0);
  if (!($22)) {
   $23 = $2;
   $24 = (($23) + 32|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $2;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($25) + ($28))|0;
   $30 = (($29>>>0) / 32768)&-1;
   $31 = $fol;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($30>>>0)>($33>>>0);
   if (!($34)) {
    $43 = $self;
    $44 = (($43) + 32|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)!=(0|0);
    do {
     if (!($46)) {
      $47 = $sys;
      $48 = (($47) + 28|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = $sys;
      $51 = (FUNCTION_TABLE_iii[$49 & 15]($50,39004)|0);
      $52 = $self;
      $53 = (($52) + 32|0);
      HEAP32[$53>>2] = $51;
      $54 = $self;
      $55 = (($54) + 32|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)!=(0|0);
      if ($57) {
       $60 = $self;
       $61 = (($60) + 32|0);
       $62 = HEAP32[$61>>2]|0;
       HEAP32[$62>>2] = 0;
       $63 = $self;
       $64 = (($63) + 32|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) + 4|0);
       HEAP32[$66>>2] = 0;
       $67 = $self;
       $68 = (($67) + 32|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (($69) + 16|0);
       $71 = $sys;
       dest=$70+0|0; src=$71+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
       $72 = $self;
       $73 = (($72) + 32|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (($74) + 16|0);
       $76 = (($75) + 8|0);
       HEAP32[$76>>2] = 9;
       $77 = $self;
       $78 = (($77) + 32|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = (($79) + 16|0);
       $81 = (($80) + 12|0);
       HEAP32[$81>>2] = 10;
       $82 = $self;
       $83 = (($82) + 32|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (($84) + 68|0);
       HEAP32[$85>>2] = 0;
       $86 = $self;
       $87 = (($86) + 32|0);
       $88 = HEAP32[$87>>2]|0;
       $89 = (($88) + 76|0);
       HEAP32[$89>>2] = 0;
       $90 = $self;
       $91 = (($90) + 32|0);
       $92 = HEAP32[$91>>2]|0;
       $93 = (($92) + 72|0);
       HEAP32[$93>>2] = 0;
       break;
      }
      $58 = $self;
      $59 = (($58) + 52|0);
      HEAP32[$59>>2] = 6;
      $0 = 6;
      $318 = $0;
      STACKTOP = sp;return ($318|0);
     }
    } while(0);
    $94 = $self;
    $95 = (($94) + 32|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = HEAP32[$96>>2]|0;
    $98 = $fol;
    $99 = ($97|0)!=($98|0);
    if ($99) {
     label = 15;
    } else {
     $100 = $self;
     $101 = (($100) + 32|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = $2;
     $106 = (($105) + 32|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($104>>>0)>($107>>>0);
     if ($108) {
      label = 15;
     }
    }
    do {
     if ((label|0) == 15) {
      $109 = $self;
      $110 = (($109) + 32|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($111) + 76|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)!=(0|0);
      if ($114) {
       $115 = $fol;
       $116 = (($115) + 12|0);
       $117 = (($116) + 4|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = $self;
       $120 = (($119) + 32|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = (($121) + 72|0);
       $123 = HEAP32[$122>>2]|0;
       $124 = ($118|0)!=($123|0);
       if ($124) {
        label = 17;
       }
      } else {
       label = 17;
      }
      do {
       if ((label|0) == 17) {
        $125 = $self;
        $126 = (($125) + 32|0);
        $127 = HEAP32[$126>>2]|0;
        $128 = (($127) + 76|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = ($129|0)!=(0|0);
        if ($130) {
         $131 = $sys;
         $132 = (($131) + 4|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = $self;
         $135 = (($134) + 32|0);
         $136 = HEAP32[$135>>2]|0;
         $137 = (($136) + 76|0);
         $138 = HEAP32[$137>>2]|0;
         FUNCTION_TABLE_vi[$133 & 3]($138);
        }
        $139 = $fol;
        $140 = (($139) + 12|0);
        $141 = (($140) + 4|0);
        $142 = HEAP32[$141>>2]|0;
        $143 = $self;
        $144 = (($143) + 32|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = (($145) + 72|0);
        HEAP32[$146>>2] = $142;
        $147 = $sys;
        $148 = HEAP32[$147>>2]|0;
        $149 = $sys;
        $150 = $fol;
        $151 = (($150) + 12|0);
        $152 = (($151) + 4|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = (($153) + 4|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = (FUNCTION_TABLE_iiii[$148 & 15]($149,$155,0)|0);
        $157 = $self;
        $158 = (($157) + 32|0);
        $159 = HEAP32[$158>>2]|0;
        $160 = (($159) + 76|0);
        HEAP32[$160>>2] = $156;
        $161 = $self;
        $162 = (($161) + 32|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = (($163) + 76|0);
        $165 = HEAP32[$164>>2]|0;
        $166 = ($165|0)!=(0|0);
        if ($166) {
         break;
        }
        $167 = $self;
        $168 = (($167) + 52|0);
        HEAP32[$168>>2] = 2;
        $0 = 2;
        $318 = $0;
        STACKTOP = sp;return ($318|0);
       }
      } while(0);
      $169 = $sys;
      $170 = (($169) + 16|0);
      $171 = HEAP32[$170>>2]|0;
      $172 = $self;
      $173 = (($172) + 32|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (($174) + 76|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = $fol;
      $178 = (($177) + 12|0);
      $179 = (($178) + 8|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = (FUNCTION_TABLE_iiii[$171 & 15]($176,$180,0)|0);
      $182 = ($181|0)!=(0);
      if ($182) {
       $183 = $self;
       $184 = (($183) + 52|0);
       HEAP32[$184>>2] = 5;
       $0 = 5;
       $318 = $0;
       STACKTOP = sp;return ($318|0);
      }
      $185 = $self;
      $186 = $fol;
      $187 = (($186) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = (_cabd_init_decomp($185,$188)|0);
      $190 = ($189|0)!=(0);
      if (!($190)) {
       $194 = $fol;
       $195 = $self;
       $196 = (($195) + 32|0);
       $197 = HEAP32[$196>>2]|0;
       HEAP32[$197>>2] = $194;
       $198 = $fol;
       $199 = (($198) + 12|0);
       $200 = $self;
       $201 = (($200) + 32|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = (($202) + 4|0);
       HEAP32[$203>>2] = $199;
       $204 = $self;
       $205 = (($204) + 32|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = (($206) + 8|0);
       HEAP32[$207>>2] = 0;
       $208 = $self;
       $209 = (($208) + 32|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + 12|0);
       HEAP32[$211>>2] = 0;
       $212 = $self;
       $213 = (($212) + 32|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = (($214) + 92|0);
       $216 = $self;
       $217 = (($216) + 32|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = (($218) + 88|0);
       HEAP32[$219>>2] = $215;
       $220 = $self;
       $221 = (($220) + 32|0);
       $222 = HEAP32[$221>>2]|0;
       $223 = (($222) + 84|0);
       HEAP32[$223>>2] = $215;
       $224 = $self;
       $225 = (($224) + 56|0);
       HEAP32[$225>>2] = 0;
       break;
      }
      $191 = $self;
      $192 = (($191) + 52|0);
      $193 = HEAP32[$192>>2]|0;
      $0 = $193;
      $318 = $0;
      STACKTOP = sp;return ($318|0);
     }
    } while(0);
    $226 = $sys;
    $227 = HEAP32[$226>>2]|0;
    $228 = $sys;
    $229 = $3;
    $230 = (FUNCTION_TABLE_iiii[$227 & 15]($228,$229,1)|0);
    $fh = $230;
    $231 = ($230|0)!=(0|0);
    if (!($231)) {
     $232 = $self;
     $233 = (($232) + 52|0);
     HEAP32[$233>>2] = 2;
     $0 = 2;
     $318 = $0;
     STACKTOP = sp;return ($318|0);
    }
    $234 = $self;
    $235 = (($234) + 52|0);
    HEAP32[$235>>2] = 0;
    $236 = $2;
    $237 = (($236) + 8|0);
    $238 = HEAP32[$237>>2]|0;
    $239 = ($238|0)!=(0);
    if ($239) {
     $240 = $self;
     $241 = (($240) + 32|0);
     $242 = HEAP32[$241>>2]|0;
     $243 = (($242) + 80|0);
     HEAP32[$243>>2] = 0;
     $244 = $2;
     $245 = (($244) + 32|0);
     $246 = HEAP32[$245>>2]|0;
     $247 = $self;
     $248 = (($247) + 32|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (($249) + 8|0);
     $251 = HEAP32[$250>>2]|0;
     $252 = (($246) - ($251))|0;
     $bytes = $252;
     $253 = ($252|0)!=(0);
     if ($253) {
      $254 = $self;
      $255 = (($254) + 32|0);
      $256 = HEAP32[$255>>2]|0;
      $257 = (($256) + 64|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $self;
      $260 = (($259) + 32|0);
      $261 = HEAP32[$260>>2]|0;
      $262 = (($261) + 68|0);
      $263 = HEAP32[$262>>2]|0;
      $264 = $bytes;
      $265 = (FUNCTION_TABLE_iii[$258 & 15]($263,$264)|0);
      $error = $265;
      $266 = $error;
      $267 = ($266|0)==(3);
      if ($267) {
       $268 = $self;
       $269 = (($268) + 56|0);
       $270 = HEAP32[$269>>2]|0;
       $274 = $270;
      } else {
       $271 = $error;
       $274 = $271;
      }
      $272 = $self;
      $273 = (($272) + 52|0);
      HEAP32[$273>>2] = $274;
     }
     $275 = $self;
     $276 = (($275) + 52|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)!=(0);
     if (!($278)) {
      $279 = $fh;
      $280 = $self;
      $281 = (($280) + 32|0);
      $282 = HEAP32[$281>>2]|0;
      $283 = (($282) + 80|0);
      HEAP32[$283>>2] = $279;
      $284 = $self;
      $285 = (($284) + 32|0);
      $286 = HEAP32[$285>>2]|0;
      $287 = (($286) + 64|0);
      $288 = HEAP32[$287>>2]|0;
      $289 = $self;
      $290 = (($289) + 32|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = (($291) + 68|0);
      $293 = HEAP32[$292>>2]|0;
      $294 = $2;
      $295 = (($294) + 8|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (FUNCTION_TABLE_iii[$288 & 15]($293,$296)|0);
      $error = $297;
      $298 = $error;
      $299 = ($298|0)==(3);
      if ($299) {
       $300 = $self;
       $301 = (($300) + 56|0);
       $302 = HEAP32[$301>>2]|0;
       $306 = $302;
      } else {
       $303 = $error;
       $306 = $303;
      }
      $304 = $self;
      $305 = (($304) + 52|0);
      HEAP32[$305>>2] = $306;
     }
    }
    $307 = $sys;
    $308 = (($307) + 4|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = $fh;
    FUNCTION_TABLE_vi[$309 & 3]($310);
    $311 = $self;
    $312 = (($311) + 32|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = (($313) + 80|0);
    HEAP32[$314>>2] = 0;
    $315 = $self;
    $316 = (($315) + 52|0);
    $317 = HEAP32[$316>>2]|0;
    $0 = $317;
    $318 = $0;
    STACKTOP = sp;return ($318|0);
   }
  }
 }
 $35 = $sys;
 $36 = (($35) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $2;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$vararg_buffer>>2] = $40;
 FUNCTION_TABLE_viii[$37 & 3](0,3000,$vararg_buffer);
 $41 = $self;
 $42 = (($41) + 52|0);
 HEAP32[$42>>2] = 8;
 $0 = 8;
 $318 = $0;
 STACKTOP = sp;return ($318|0);
}
function _cabd_prepend($base,$cab,$prevcab) {
 $base = $base|0;
 $cab = $cab|0;
 $prevcab = $prevcab|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $base;
 $1 = $cab;
 $2 = $prevcab;
 $3 = $0;
 $4 = $2;
 $5 = $1;
 $6 = (_cabd_merge($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _cabd_append($base,$cab,$nextcab) {
 $base = $base|0;
 $cab = $cab|0;
 $nextcab = $nextcab|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $base;
 $1 = $cab;
 $2 = $nextcab;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_cabd_merge($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _cabd_param($base,$param,$value) {
 $base = $base|0;
 $param = $param|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $base;
 $2 = $param;
 $3 = $value;
 $4 = $1;
 $self = $4;
 $5 = $self;
 $6 = ($5|0)!=(0|0);
 L1: do {
  if ($6) {
   $7 = $2;
   do {
    if ((($7|0) == 0)) {
     $8 = $3;
     $9 = ($8|0)<(4);
     if ($9) {
      $0 = 1;
      break L1;
     } else {
      $10 = $3;
      $11 = $self;
      $12 = (($11) + 40|0);
      HEAP32[$12>>2] = $10;
      break;
     }
    } else if ((($7|0) == 1)) {
     $13 = $3;
     $14 = $self;
     $15 = (($14) + 40|0);
     $16 = (($15) + 4|0);
     HEAP32[$16>>2] = $13;
    } else if ((($7|0) == 2)) {
     $17 = $3;
     $18 = ($17|0)<(4);
     if ($18) {
      $0 = 1;
      break L1;
     } else {
      $19 = $3;
      $20 = $self;
      $21 = (($20) + 40|0);
      $22 = (($21) + 8|0);
      HEAP32[$22>>2] = $19;
      break;
     }
    } else {
     $0 = 1;
     break L1;
    }
   } while(0);
   $0 = 0;
  } else {
   $0 = 1;
  }
 } while(0);
 $23 = $0;
 STACKTOP = sp;return ($23|0);
}
function _cabd_error($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $base;
 $1 = $0;
 $self = $1;
 $2 = $self;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = $self;
  $5 = (($4) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 } else {
  $7 = 1;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function _mspack_destroy_cab_decompressor($base) {
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self = 0, $sys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $base;
 $1 = $0;
 $self = $1;
 $2 = $self;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $self;
 $5 = (($4) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $sys = $6;
 $7 = $self;
 _cabd_free_decomp($7);
 $8 = $self;
 $9 = (($8) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $self;
  $13 = (($12) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $sys;
   $19 = (($18) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $self;
   $22 = (($21) + 32|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 76|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_vi[$20 & 3]($25);
  }
  $26 = $sys;
  $27 = (($26) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $self;
  $30 = (($29) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vi[$28 & 3]($31);
 }
 $32 = $sys;
 $33 = (($32) + 32|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $self;
 FUNCTION_TABLE_vi[$34 & 3]($35);
 STACKTOP = sp;return;
}
function _cabd_free_decomp($self) {
 $self = $self|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $self;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = $0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(0|0);
  if ($6) {
   $7 = $0;
   $8 = (($7) + 32|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    $12 = $0;
    $13 = (($12) + 32|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 68|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if ($17) {
     $18 = $0;
     $19 = (($18) + 32|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + 60|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = $22 & 15;
     if ((($23|0) == 0)) {
      $24 = $0;
      $25 = (($24) + 32|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($26) + 68|0);
      $28 = HEAP32[$27>>2]|0;
      _noned_free($28);
     } else if ((($23|0) == 1)) {
      $29 = $0;
      $30 = (($29) + 32|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (($31) + 68|0);
      $33 = HEAP32[$32>>2]|0;
      _mszipd_free($33);
     } else if ((($23|0) == 2)) {
      $34 = $0;
      $35 = (($34) + 32|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($36) + 68|0);
      $38 = HEAP32[$37>>2]|0;
      _qtmd_free($38);
     } else if ((($23|0) == 3)) {
      $39 = $0;
      $40 = (($39) + 32|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($41) + 68|0);
      $43 = HEAP32[$42>>2]|0;
      _lzxd_free($43);
     }
     $44 = $0;
     $45 = (($44) + 32|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + 64|0);
     HEAP32[$47>>2] = 0;
     $48 = $0;
     $49 = (($48) + 32|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + 68|0);
     HEAP32[$51>>2] = 0;
     STACKTOP = sp;return;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _noned_free($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $state;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $sys = $4;
 $5 = $sys;
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$7 & 3]($10);
 $11 = $sys;
 $12 = (($11) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 FUNCTION_TABLE_vi[$13 & 3]($14);
 STACKTOP = sp;return;
}
function _cabd_sys_read($file,$buffer,$bytes) {
 $file = $file|0;
 $buffer = $buffer|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avail = 0, $buf = 0, $ignore_cksum = 0;
 var $outlen = 0, $self = 0, $sys = 0, $todo = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $outlen = sp + 40|0;
 $1 = $file;
 $2 = $buffer;
 $3 = $bytes;
 $4 = $1;
 $self = $4;
 $5 = $2;
 $buf = $5;
 $6 = $self;
 $7 = (($6) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $sys = $8;
 $9 = $self;
 $10 = (($9) + 40|0);
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $self;
  $15 = (($14) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 60|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 15;
  $20 = ($19|0)==(1);
  $22 = $20;
 } else {
  $22 = 0;
 }
 $21 = $22&1;
 $ignore_cksum = $21;
 $23 = $3;
 $todo = $23;
 while(1) {
  $24 = $todo;
  $25 = ($24|0)>(0);
  if (!($25)) {
   break;
  }
  $26 = $self;
  $27 = (($26) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 88|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $self;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 84|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $30;
  $37 = $35;
  $38 = (($36) - ($37))|0;
  $avail = $38;
  $39 = $avail;
  $40 = ($39|0)!=(0);
  if ($40) {
   $41 = $avail;
   $42 = $todo;
   $43 = ($41|0)>($42|0);
   if ($43) {
    $44 = $todo;
    $avail = $44;
   }
   $45 = $sys;
   $46 = (($45) + 36|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $self;
   $49 = (($48) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 84|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $buf;
   $54 = $avail;
   FUNCTION_TABLE_viii[$47 & 3]($52,$53,$54);
   $55 = $avail;
   $56 = $self;
   $57 = (($56) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 84|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + ($55)|0);
   HEAP32[$59>>2] = $61;
   $62 = $avail;
   $63 = $buf;
   $64 = (($63) + ($62)|0);
   $buf = $64;
   $65 = $avail;
   $66 = $todo;
   $67 = (($66) - ($65))|0;
   $todo = $67;
  } else {
   $68 = $self;
   $69 = (($68) + 32|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + 1)|0;
   HEAP32[$71>>2] = $73;
   $74 = $self;
   $75 = (($74) + 32|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($72>>>0)>=($79>>>0);
   if ($80) {
    label = 10;
    break;
   }
   $83 = $sys;
   $84 = $self;
   $85 = (($84) + 32|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $ignore_cksum;
   $88 = (_cabd_sys_read_block($83,$86,$outlen,$87)|0);
   $89 = $self;
   $90 = (($89) + 56|0);
   HEAP32[$90>>2] = $88;
   $91 = $self;
   $92 = (($91) + 56|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = ($93|0)!=(0);
   if ($94) {
    label = 12;
    break;
   }
   $95 = $self;
   $96 = (($95) + 32|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 60|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 & 15;
   $101 = ($100|0)==(2);
   if ($101) {
    $102 = $self;
    $103 = (($102) + 32|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 88|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = (($106) + 1|0);
    HEAP32[$105>>2] = $107;
    HEAP8[$106] = -1;
   }
   $108 = $self;
   $109 = (($108) + 32|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + 12|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $self;
   $114 = (($113) + 32|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + 8|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($112>>>0)>=($118>>>0);
   if ($119) {
    $120 = $self;
    $121 = (($120) + 32|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($122) + 60|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = $124 & 15;
    $126 = ($125|0)==(3);
    if ($126) {
     $127 = $self;
     $128 = (($127) + 32|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + 68|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $self;
     $133 = (($132) + 32|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($134) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = (($136) - 1)|0;
     $138 = $137<<15;
     $139 = HEAP32[$outlen>>2]|0;
     $140 = (($138) + ($139))|0;
     _lzxd_set_output_length($131,$140);
    }
   } else {
    $141 = HEAP32[$outlen>>2]|0;
    $142 = ($141|0)!=(32768);
    if ($142) {
     $143 = $self;
     $144 = (($143) + 36|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($145) + 24|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = $self;
     $149 = (($148) + 32|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 76|0);
     $152 = HEAP32[$151>>2]|0;
     FUNCTION_TABLE_viii[$147 & 3]($152,3128,$vararg_buffer);
    }
   }
  }
 }
 if ((label|0) == 10) {
  $81 = $self;
  $82 = (($81) + 56|0);
  HEAP32[$82>>2] = 8;
 }
 else if ((label|0) == 12) {
  $0 = -1;
  $156 = $0;
  STACKTOP = sp;return ($156|0);
 }
 $153 = $3;
 $154 = $todo;
 $155 = (($153) - ($154))|0;
 $0 = $155;
 $156 = $0;
 STACKTOP = sp;return ($156|0);
}
function _cabd_sys_write($file,$buffer,$bytes) {
 $file = $file|0;
 $buffer = $buffer|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $self = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $file;
 $2 = $buffer;
 $3 = $bytes;
 $4 = $1;
 $self = $4;
 $5 = $3;
 $6 = $self;
 $7 = (($6) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($5))|0;
 HEAP32[$9>>2] = $11;
 $12 = $self;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 80|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if ($17) {
  $18 = $self;
  $19 = (($18) + 36|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $self;
  $24 = (($23) + 32|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 80|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $2;
  $29 = $3;
  $30 = (FUNCTION_TABLE_iiii[$22 & 15]($27,$28,$29)|0);
  $0 = $30;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 } else {
  $31 = $3;
  $0 = $31;
  $32 = $0;
  STACKTOP = sp;return ($32|0);
 }
 return 0|0;
}
function _cabd_init_decomp($self,$ct) {
 $self = $self|0;
 $ct = $ct|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fh = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $self;
 $2 = $ct;
 $3 = $1;
 $fh = $3;
 $4 = $1;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  ___assert_fail((3072|0),(3088|0),1100,(3104|0));
  // unreachable;
 }
 $6 = $1;
 $7 = (($6) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  ___assert_fail((3072|0),(3088|0),1100,(3104|0));
  // unreachable;
 }
 $10 = $1;
 _cabd_free_decomp($10);
 $11 = $2;
 $12 = $1;
 $13 = (($12) + 32|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 60|0);
 HEAP32[$15>>2] = $11;
 $16 = $2;
 $17 = $16 & 15;
 if ((($17|0) == 1)) {
  $37 = $1;
  $38 = (($37) + 32|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 64|0);
  HEAP32[$40>>2] = 5;
  $41 = $1;
  $42 = (($41) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 16|0);
  $45 = $fh;
  $46 = $fh;
  $47 = $1;
  $48 = (($47) + 40|0);
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $1;
  $52 = (($51) + 40|0);
  $53 = (($52) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (_mszipd_init($44,$45,$46,$50,$54)|0);
  $56 = $1;
  $57 = (($56) + 32|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 68|0);
  HEAP32[$59>>2] = $55;
 } else if ((($17|0) == 0)) {
  $18 = $1;
  $19 = (($18) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 64|0);
  HEAP32[$21>>2] = 4;
  $22 = $1;
  $23 = (($22) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 16|0);
  $26 = $fh;
  $27 = $fh;
  $28 = $1;
  $29 = (($28) + 40|0);
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_noned_init($25,$26,$27,$31)|0);
  $33 = $1;
  $34 = (($33) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 68|0);
  HEAP32[$36>>2] = $32;
 } else if ((($17|0) == 2)) {
  $60 = $1;
  $61 = (($60) + 32|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 64|0);
  HEAP32[$63>>2] = 6;
  $64 = $1;
  $65 = (($64) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 16|0);
  $68 = $fh;
  $69 = $fh;
  $70 = $2;
  $71 = $70 >>> 8;
  $72 = $71 & 31;
  $73 = $1;
  $74 = (($73) + 40|0);
  $75 = (($74) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (_qtmd_init($67,$68,$69,$72,$76)|0);
  $78 = $1;
  $79 = (($78) + 32|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($80) + 68|0);
  HEAP32[$81>>2] = $77;
 } else if ((($17|0) == 3)) {
  $82 = $1;
  $83 = (($82) + 32|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 64|0);
  HEAP32[$85>>2] = 7;
  $86 = $1;
  $87 = (($86) + 32|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + 16|0);
  $90 = $fh;
  $91 = $fh;
  $92 = $2;
  $93 = $92 >>> 8;
  $94 = $93 & 31;
  $95 = $1;
  $96 = (($95) + 40|0);
  $97 = (($96) + 8|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (_lzxd_init($89,$90,$91,$94,0,$98,0)|0);
  $100 = $1;
  $101 = (($100) + 32|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + 68|0);
  HEAP32[$103>>2] = $99;
 } else {
  $104 = $1;
  $105 = (($104) + 52|0);
  HEAP32[$105>>2] = 8;
  $0 = 8;
  $115 = $0;
  STACKTOP = sp;return ($115|0);
 }
 $106 = $1;
 $107 = (($106) + 32|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (($108) + 68|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = ($110|0)!=(0|0);
 $112 = $111 ? 0 : 6;
 $113 = $1;
 $114 = (($113) + 52|0);
 HEAP32[$114>>2] = $112;
 $0 = $112;
 $115 = $0;
 STACKTOP = sp;return ($115|0);
}
function _noned_decompress($s,$bytes) {
 $s = $s|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $run = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $s;
 $2 = $bytes;
 while(1) {
  $3 = $2;
  $4 = ($3|0)>(0);
  if (!($4)) {
   label = 11;
   break;
  }
  $5 = $2;
  $6 = $1;
  $7 = (($6) + 16|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)>($8|0);
  if ($9) {
   $10 = $1;
   $11 = (($10) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $14 = $12;
  } else {
   $13 = $2;
   $14 = $13;
  }
  $run = $14;
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $1;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $1;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $run;
  $26 = (FUNCTION_TABLE_iiii[$18 & 15]($21,$24,$25)|0);
  $27 = $run;
  $28 = ($26|0)!=($27|0);
  if ($28) {
   label = 7;
   break;
  }
  $29 = $1;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $1;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $1;
  $37 = (($36) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $run;
  $40 = (FUNCTION_TABLE_iiii[$32 & 15]($35,$38,$39)|0);
  $41 = $run;
  $42 = ($40|0)!=($41|0);
  if ($42) {
   label = 9;
   break;
  }
  $43 = $run;
  $44 = $2;
  $45 = (($44) - ($43))|0;
  $2 = $45;
 }
 if ((label|0) == 7) {
  $0 = 3;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 9) {
  $0 = 4;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 else if ((label|0) == 11) {
  $0 = 0;
  $46 = $0;
  STACKTOP = sp;return ($46|0);
 }
 return 0|0;
}
function _noned_init($sys,$in,$out,$bufsize) {
 $sys = $sys|0;
 $in = $in|0;
 $out = $out|0;
 $bufsize = $bufsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $buf = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $sys;
 $1 = $in;
 $2 = $out;
 $3 = $bufsize;
 $4 = $0;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = (FUNCTION_TABLE_iii[$6 & 15]($7,20)|0);
 $state = $8;
 $9 = $0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 $13 = $3;
 $14 = (FUNCTION_TABLE_iii[$11 & 15]($12,$13)|0);
 $buf = $14;
 $15 = $state;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $buf;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $0;
   $20 = $state;
   HEAP32[$20>>2] = $19;
   $21 = $1;
   $22 = $state;
   $23 = (($22) + 4|0);
   HEAP32[$23>>2] = $21;
   $24 = $2;
   $25 = $state;
   $26 = (($25) + 8|0);
   HEAP32[$26>>2] = $24;
   $27 = $buf;
   $28 = $state;
   $29 = (($28) + 12|0);
   HEAP32[$29>>2] = $27;
   $30 = $3;
   $31 = $state;
   $32 = (($31) + 16|0);
   HEAP32[$32>>2] = $30;
   $41 = $state;
   STACKTOP = sp;return ($41|0);
  }
 }
 $33 = $0;
 $34 = (($33) + 32|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $buf;
 FUNCTION_TABLE_vi[$35 & 3]($36);
 $37 = $0;
 $38 = (($37) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $state;
 FUNCTION_TABLE_vi[$39 & 3]($40);
 $state = 0;
 $41 = $state;
 STACKTOP = sp;return ($41|0);
}
function _cabd_sys_read_block($sys,$d,$out,$ignore_cksum) {
 $sys = $sys|0;
 $d = $d|0;
 $out = $out|0;
 $ignore_cksum = $ignore_cksum|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cksum = 0, $hdr = 0, $len = 0, $sum2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $hdr = sp + 40|0;
 $1 = $sys;
 $2 = $d;
 $3 = $out;
 $4 = $ignore_cksum;
 $5 = $2;
 $6 = (($5) + 92|0);
 $7 = $2;
 $8 = (($7) + 88|0);
 HEAP32[$8>>2] = $6;
 $9 = $2;
 $10 = (($9) + 84|0);
 HEAP32[$10>>2] = $6;
 while(1) {
  $11 = $1;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $2;
  $15 = (($14) + 76|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$13 & 15]($16,$hdr,8)|0);
  $18 = ($17|0)!=(8);
  if ($18) {
   label = 3;
   break;
  }
  $19 = $2;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 64|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)!=(0);
  if ($26) {
   $27 = $1;
   $28 = (($27) + 16|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $2;
   $31 = (($30) + 76|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $2;
   $34 = (($33) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 64|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (FUNCTION_TABLE_iiii[$29 & 15]($32,$39,1)|0);
   $41 = ($40|0)!=(0);
   if ($41) {
    label = 6;
    break;
   }
  }
  $42 = (($hdr) + 4|0);
  $43 = (($42) + 1|0);
  $44 = HEAP8[$43]|0;
  $45 = $44&255;
  $46 = $45 << 8;
  $47 = (($hdr) + 4|0);
  $48 = HEAP8[$47]|0;
  $49 = $48&255;
  $50 = $46 | $49;
  $len = $50;
  $51 = $2;
  $52 = (($51) + 88|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $2;
  $55 = (($54) + 84|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $53;
  $58 = $56;
  $59 = (($57) - ($58))|0;
  $60 = $len;
  $61 = (($59) + ($60))|0;
  $62 = ($61|0)>(38912);
  if ($62) {
   label = 8;
   break;
  }
  $63 = (($hdr) + 6|0);
  $64 = (($63) + 1|0);
  $65 = HEAP8[$64]|0;
  $66 = $65&255;
  $67 = $66 << 8;
  $68 = (($hdr) + 6|0);
  $69 = HEAP8[$68]|0;
  $70 = $69&255;
  $71 = $67 | $70;
  $72 = ($71|0)>(32768);
  if ($72) {
   label = 10;
   break;
  }
  $73 = $1;
  $74 = (($73) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $2;
  $77 = (($76) + 76|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $2;
  $80 = (($79) + 88|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $len;
  $83 = (FUNCTION_TABLE_iiii[$75 & 15]($78,$81,$82)|0);
  $84 = $len;
  $85 = ($83|0)!=($84|0);
  if ($85) {
   label = 12;
   break;
  }
  $86 = (($hdr) + 3|0);
  $87 = HEAP8[$86]|0;
  $88 = $87&255;
  $89 = $88 << 24;
  $90 = (($hdr) + 2|0);
  $91 = HEAP8[$90]|0;
  $92 = $91&255;
  $93 = $92 << 16;
  $94 = $89 | $93;
  $95 = (($hdr) + 1|0);
  $96 = HEAP8[$95]|0;
  $97 = $96&255;
  $98 = $97 << 8;
  $99 = $94 | $98;
  $100 = HEAP8[$hdr]|0;
  $101 = $100&255;
  $102 = $99 | $101;
  $cksum = $102;
  $103 = ($102|0)!=(0);
  if ($103) {
   $104 = $2;
   $105 = (($104) + 88|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = $len;
   $108 = (_cabd_checksum($106,$107,0)|0);
   $sum2 = $108;
   $109 = (($hdr) + 4|0);
   $110 = $sum2;
   $111 = (_cabd_checksum($109,4,$110)|0);
   $112 = $cksum;
   $113 = ($111|0)!=($112|0);
   if ($113) {
    $114 = $4;
    $115 = ($114|0)!=(0);
    if (!($115)) {
     label = 16;
     break;
    }
    $116 = $1;
    $117 = (($116) + 24|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = $2;
    $120 = (($119) + 76|0);
    $121 = HEAP32[$120>>2]|0;
    FUNCTION_TABLE_viii[$118 & 3]($121,3160,$vararg_buffer);
   }
  }
  $122 = $len;
  $123 = $2;
  $124 = (($123) + 88|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + ($122)|0);
  HEAP32[$124>>2] = $126;
  $127 = (($hdr) + 6|0);
  $128 = (($127) + 1|0);
  $129 = HEAP8[$128]|0;
  $130 = $129&255;
  $131 = $130 << 8;
  $132 = (($hdr) + 6|0);
  $133 = HEAP8[$132]|0;
  $134 = $133&255;
  $135 = $131 | $134;
  $136 = $3;
  HEAP32[$136>>2] = $135;
  $137 = ($135|0)!=(0);
  if ($137) {
   label = 20;
   break;
  }
  $138 = $1;
  $139 = (($138) + 4|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $2;
  $142 = (($141) + 76|0);
  $143 = HEAP32[$142>>2]|0;
  FUNCTION_TABLE_vi[$140 & 3]($143);
  $144 = $2;
  $145 = (($144) + 76|0);
  HEAP32[$145>>2] = 0;
  $146 = $2;
  $147 = (($146) + 4|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = HEAP32[$148>>2]|0;
  $150 = $2;
  $151 = (($150) + 4|0);
  HEAP32[$151>>2] = $149;
  $152 = ($149|0)!=(0|0);
  if (!($152)) {
   label = 22;
   break;
  }
  $153 = $2;
  $154 = (($153) + 4|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + 4|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = $2;
  $159 = (($158) + 72|0);
  HEAP32[$159>>2] = $157;
  $160 = $1;
  $161 = HEAP32[$160>>2]|0;
  $162 = $1;
  $163 = $2;
  $164 = (($163) + 72|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($165) + 4|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (FUNCTION_TABLE_iiii[$161 & 15]($162,$167,0)|0);
  $169 = $2;
  $170 = (($169) + 76|0);
  HEAP32[$170>>2] = $168;
  $171 = ($168|0)!=(0|0);
  if (!($171)) {
   label = 24;
   break;
  }
  $172 = $1;
  $173 = (($172) + 16|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $2;
  $176 = (($175) + 76|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $2;
  $179 = (($178) + 4|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = (($180) + 8|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (FUNCTION_TABLE_iiii[$174 & 15]($177,$182,0)|0);
  $184 = ($183|0)!=(0);
  if ($184) {
   label = 26;
   break;
  }
  if (!(1)) {
   label = 29;
   break;
  }
 }
 if ((label|0) == 3) {
  $0 = 3;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 6) {
  $0 = 5;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 8) {
  $0 = 8;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 10) {
  $0 = 8;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 12) {
  $0 = 3;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 16) {
  $0 = 9;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 22) {
  $0 = 8;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 24) {
  $0 = 2;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 26) {
  $0 = 5;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 else if ((label|0) == 29) {
  $0 = 0;
  $185 = $0;
  STACKTOP = sp;return ($185|0);
 }
 return 0|0;
}
function _cabd_checksum($data,$bytes,$cksum) {
 $data = $data|0;
 $bytes = $bytes|0;
 $cksum = $cksum|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $ul = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $data;
 $1 = $bytes;
 $2 = $cksum;
 $ul = 0;
 $3 = $1;
 $4 = $3 >>> 2;
 $len = $4;
 while(1) {
  $5 = $len;
  $6 = (($5) + -1)|0;
  $len = $6;
  $7 = ($5|0)!=(0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = HEAP8[$8]|0;
  $10 = $9&255;
  $11 = $0;
  $12 = (($11) + 1|0);
  $13 = HEAP8[$12]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = $10 | $15;
  $17 = $0;
  $18 = (($17) + 2|0);
  $19 = HEAP8[$18]|0;
  $20 = $19&255;
  $21 = $20 << 16;
  $22 = $16 | $21;
  $23 = $0;
  $24 = (($23) + 3|0);
  $25 = HEAP8[$24]|0;
  $26 = $25&255;
  $27 = $26 << 24;
  $28 = $22 | $27;
  $29 = $2;
  $30 = $29 ^ $28;
  $2 = $30;
  $31 = $0;
  $32 = (($31) + 4|0);
  $0 = $32;
 }
 $33 = $1;
 $34 = $33 & 3;
 if ((($34|0) == 3)) {
  $35 = $0;
  $36 = (($35) + 1|0);
  $0 = $36;
  $37 = HEAP8[$35]|0;
  $38 = $37&255;
  $39 = $38 << 16;
  $40 = $ul;
  $41 = $40 | $39;
  $ul = $41;
  label = 7;
 } else if ((($34|0) == 2)) {
  label = 7;
 } else if (!((($34|0) == 1))) {
  $54 = $ul;
  $55 = $2;
  $56 = $55 ^ $54;
  $2 = $56;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 if ((label|0) == 7) {
  $42 = $0;
  $43 = (($42) + 1|0);
  $0 = $43;
  $44 = HEAP8[$42]|0;
  $45 = $44&255;
  $46 = $45 << 8;
  $47 = $ul;
  $48 = $47 | $46;
  $ul = $48;
 }
 $49 = $0;
 $50 = HEAP8[$49]|0;
 $51 = $50&255;
 $52 = $ul;
 $53 = $52 | $51;
 $ul = $53;
 $54 = $ul;
 $55 = $2;
 $56 = $55 ^ $54;
 $2 = $56;
 $57 = $2;
 STACKTOP = sp;return ($57|0);
}
function _cabd_merge($base,$lcab,$rcab) {
 $base = $base|0;
 $lcab = $lcab|0;
 $rcab = $rcab|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cab = 0, $data = 0, $fi = 0, $lfi = 0, $lfol = 0, $ndata = 0, $rfi = 0, $rfol = 0, $self = 0;
 var $sys = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $base;
 $2 = $lcab;
 $3 = $rcab;
 $4 = $1;
 $self = $4;
 $5 = $self;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $0 = 1;
  $270 = $0;
  STACKTOP = sp;return ($270|0);
 }
 $7 = $self;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $sys = $9;
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $3;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = $2;
   $15 = $3;
   $16 = ($14|0)==($15|0);
   if (!($16)) {
    $19 = $2;
    $20 = (($19) + 20|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)!=(0|0);
    if (!($22)) {
     $23 = $3;
     $24 = (($23) + 16|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)!=(0|0);
     if (!($26)) {
      $29 = $2;
      $30 = (($29) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $cab = $31;
      while(1) {
       $32 = $cab;
       $33 = ($32|0)!=(0|0);
       if (!($33)) {
        break;
       }
       $34 = $cab;
       $35 = $3;
       $36 = ($34|0)==($35|0);
       if ($36) {
        label = 13;
        break;
       }
       $39 = $cab;
       $40 = (($39) + 16|0);
       $41 = HEAP32[$40>>2]|0;
       $cab = $41;
      }
      if ((label|0) == 13) {
       $37 = $self;
       $38 = (($37) + 52|0);
       HEAP32[$38>>2] = 1;
       $0 = 1;
       $270 = $0;
       STACKTOP = sp;return ($270|0);
      }
      $42 = $3;
      $43 = (($42) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $cab = $44;
      while(1) {
       $45 = $cab;
       $46 = ($45|0)!=(0|0);
       if (!($46)) {
        break;
       }
       $47 = $cab;
       $48 = $2;
       $49 = ($47|0)==($48|0);
       if ($49) {
        label = 19;
        break;
       }
       $52 = $cab;
       $53 = (($52) + 20|0);
       $54 = HEAP32[$53>>2]|0;
       $cab = $54;
      }
      if ((label|0) == 19) {
       $50 = $self;
       $51 = (($50) + 52|0);
       HEAP32[$51>>2] = 1;
       $0 = 1;
       $270 = $0;
       STACKTOP = sp;return ($270|0);
      }
      $55 = $2;
      $56 = (($55) + 48|0);
      $57 = HEAP16[$56>>1]|0;
      $58 = $57&65535;
      $59 = $3;
      $60 = (($59) + 48|0);
      $61 = HEAP16[$60>>1]|0;
      $62 = $61&65535;
      $63 = ($58|0)!=($62|0);
      if ($63) {
       $64 = $sys;
       $65 = (($64) + 24|0);
       $66 = HEAP32[$65>>2]|0;
       FUNCTION_TABLE_viii[$66 & 3](0,3200,$vararg_buffer);
      }
      $67 = $2;
      $68 = (($67) + 50|0);
      $69 = HEAP16[$68>>1]|0;
      $70 = $69&65535;
      $71 = $3;
      $72 = (($71) + 50|0);
      $73 = HEAP16[$72>>1]|0;
      $74 = $73&65535;
      $75 = ($70|0)>($74|0);
      if ($75) {
       $76 = $sys;
       $77 = (($76) + 24|0);
       $78 = HEAP32[$77>>2]|0;
       FUNCTION_TABLE_viii[$78 & 3](0,3256,$vararg_buffer1);
      }
      $79 = $2;
      $80 = (($79) + 44|0);
      $81 = HEAP32[$80>>2]|0;
      $lfol = $81;
      $82 = $3;
      $83 = (($82) + 44|0);
      $84 = HEAP32[$83>>2]|0;
      $rfol = $84;
      while(1) {
       $85 = $lfol;
       $86 = HEAP32[$85>>2]|0;
       $87 = ($86|0)!=(0|0);
       if (!($87)) {
        break;
       }
       $88 = $lfol;
       $89 = HEAP32[$88>>2]|0;
       $lfol = $89;
      }
      $90 = $lfol;
      $91 = (($90) + 28|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)!=(0|0);
      if ($93) {
       label = 35;
      } else {
       $94 = $rfol;
       $95 = (($94) + 24|0);
       $96 = HEAP32[$95>>2]|0;
       $97 = ($96|0)!=(0|0);
       if ($97) {
        label = 35;
       } else {
        $98 = $3;
        $99 = $2;
        $100 = (($99) + 20|0);
        HEAP32[$100>>2] = $98;
        $101 = $2;
        $102 = $3;
        $103 = (($102) + 16|0);
        HEAP32[$103>>2] = $101;
        $104 = $rfol;
        $105 = $lfol;
        HEAP32[$105>>2] = $104;
        $106 = $2;
        $107 = (($106) + 40|0);
        $108 = HEAP32[$107>>2]|0;
        $fi = $108;
        while(1) {
         $109 = $fi;
         $110 = HEAP32[$109>>2]|0;
         $111 = ($110|0)!=(0|0);
         if (!($111)) {
          break;
         }
         $112 = $fi;
         $113 = HEAP32[$112>>2]|0;
         $fi = $113;
        }
        $114 = $3;
        $115 = (($114) + 40|0);
        $116 = HEAP32[$115>>2]|0;
        $117 = $fi;
        HEAP32[$117>>2] = $116;
       }
      }
      if ((label|0) == 35) {
       $118 = $sys;
       $119 = $lfol;
       $120 = $rfol;
       $121 = (_cabd_can_merge_folders($118,$119,$120)|0);
       $122 = ($121|0)!=(0);
       if (!($122)) {
        $123 = $self;
        $124 = (($123) + 52|0);
        HEAP32[$124>>2] = 8;
        $0 = 8;
        $270 = $0;
        STACKTOP = sp;return ($270|0);
       }
       $125 = $sys;
       $126 = (($125) + 28|0);
       $127 = HEAP32[$126>>2]|0;
       $128 = $sys;
       $129 = (FUNCTION_TABLE_iii[$127 & 15]($128,12)|0);
       $data = $129;
       $130 = ($129|0)!=(0|0);
       if (!($130)) {
        $131 = $self;
        $132 = (($131) + 52|0);
        HEAP32[$132>>2] = 6;
        $0 = 6;
        $270 = $0;
        STACKTOP = sp;return ($270|0);
       }
       $133 = $3;
       $134 = $2;
       $135 = (($134) + 20|0);
       HEAP32[$135>>2] = $133;
       $136 = $2;
       $137 = $3;
       $138 = (($137) + 16|0);
       HEAP32[$138>>2] = $136;
       $139 = $lfol;
       $140 = (($139) + 12|0);
       $ndata = $140;
       while(1) {
        $141 = $ndata;
        $142 = HEAP32[$141>>2]|0;
        $143 = ($142|0)!=(0|0);
        if (!($143)) {
         break;
        }
        $144 = $ndata;
        $145 = HEAP32[$144>>2]|0;
        $ndata = $145;
       }
       $146 = $data;
       $147 = $ndata;
       HEAP32[$147>>2] = $146;
       $148 = $data;
       $149 = $rfol;
       $150 = (($149) + 12|0);
       ;HEAP32[$148+0>>2]=HEAP32[$150+0>>2]|0;HEAP32[$148+4>>2]=HEAP32[$150+4>>2]|0;HEAP32[$148+8>>2]=HEAP32[$150+8>>2]|0;
       $151 = $rfol;
       $152 = (($151) + 12|0);
       HEAP32[$152>>2] = 0;
       $153 = $rfol;
       $154 = (($153) + 8|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = (($155) - 1)|0;
       $157 = $lfol;
       $158 = (($157) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = (($159) + ($156))|0;
       HEAP32[$158>>2] = $160;
       $161 = $rfol;
       $162 = (($161) + 28|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==(0|0);
       if ($164) {
        label = 44;
       } else {
        $165 = $rfol;
        $166 = (($165) + 28|0);
        $167 = HEAP32[$166>>2]|0;
        $168 = (($167) + 28|0);
        $169 = HEAP32[$168>>2]|0;
        $170 = $rfol;
        $171 = ($169|0)!=($170|0);
        if ($171) {
         label = 44;
        }
       }
       if ((label|0) == 44) {
        $172 = $rfol;
        $173 = (($172) + 28|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = $lfol;
        $176 = (($175) + 28|0);
        HEAP32[$176>>2] = $174;
       }
       while(1) {
        $177 = $lfol;
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)!=(0|0);
        if (!($179)) {
         break;
        }
        $180 = $lfol;
        $181 = HEAP32[$180>>2]|0;
        $lfol = $181;
       }
       $182 = $rfol;
       $183 = HEAP32[$182>>2]|0;
       $184 = $lfol;
       HEAP32[$184>>2] = $183;
       $185 = $sys;
       $186 = (($185) + 32|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = $rfol;
       FUNCTION_TABLE_vi[$187 & 3]($188);
       $189 = $2;
       $190 = (($189) + 40|0);
       $191 = HEAP32[$190>>2]|0;
       $fi = $191;
       while(1) {
        $192 = $fi;
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)!=(0|0);
        if (!($194)) {
         break;
        }
        $195 = $fi;
        $196 = HEAP32[$195>>2]|0;
        $fi = $196;
       }
       $197 = $3;
       $198 = (($197) + 40|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = $fi;
       HEAP32[$200>>2] = $199;
       $lfi = 0;
       $201 = $2;
       $202 = (($201) + 40|0);
       $203 = HEAP32[$202>>2]|0;
       $fi = $203;
       while(1) {
        $204 = $fi;
        $205 = ($204|0)!=(0|0);
        if (!($205)) {
         break;
        }
        $206 = $fi;
        $207 = HEAP32[$206>>2]|0;
        $rfi = $207;
        $208 = $fi;
        $209 = (($208) + 28|0);
        $210 = HEAP32[$209>>2]|0;
        $211 = $rfol;
        $212 = ($210|0)==($211|0);
        if ($212) {
         $213 = $lfi;
         $214 = ($213|0)!=(0|0);
         if ($214) {
          $215 = $rfi;
          $216 = $lfi;
          HEAP32[$216>>2] = $215;
         } else {
          $217 = $rfi;
          $218 = $2;
          $219 = (($218) + 40|0);
          HEAP32[$219>>2] = $217;
         }
         $220 = $sys;
         $221 = (($220) + 32|0);
         $222 = HEAP32[$221>>2]|0;
         $223 = $fi;
         $224 = (($223) + 4|0);
         $225 = HEAP32[$224>>2]|0;
         FUNCTION_TABLE_vi[$222 & 3]($225);
         $226 = $sys;
         $227 = (($226) + 32|0);
         $228 = HEAP32[$227>>2]|0;
         $229 = $fi;
         FUNCTION_TABLE_vi[$228 & 3]($229);
        } else {
         $230 = $fi;
         $lfi = $230;
        }
        $231 = $rfi;
        $fi = $231;
       }
      }
      $232 = $2;
      $233 = (($232) + 16|0);
      $234 = HEAP32[$233>>2]|0;
      $cab = $234;
      while(1) {
       $235 = $cab;
       $236 = ($235|0)!=(0|0);
       if (!($236)) {
        break;
       }
       $237 = $2;
       $238 = (($237) + 40|0);
       $239 = HEAP32[$238>>2]|0;
       $240 = $cab;
       $241 = (($240) + 40|0);
       HEAP32[$241>>2] = $239;
       $242 = $2;
       $243 = (($242) + 44|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = $cab;
       $246 = (($245) + 44|0);
       HEAP32[$246>>2] = $244;
       $247 = $cab;
       $248 = (($247) + 16|0);
       $249 = HEAP32[$248>>2]|0;
       $cab = $249;
      }
      $250 = $2;
      $251 = (($250) + 20|0);
      $252 = HEAP32[$251>>2]|0;
      $cab = $252;
      while(1) {
       $253 = $cab;
       $254 = ($253|0)!=(0|0);
       if (!($254)) {
        break;
       }
       $255 = $2;
       $256 = (($255) + 40|0);
       $257 = HEAP32[$256>>2]|0;
       $258 = $cab;
       $259 = (($258) + 40|0);
       HEAP32[$259>>2] = $257;
       $260 = $2;
       $261 = (($260) + 44|0);
       $262 = HEAP32[$261>>2]|0;
       $263 = $cab;
       $264 = (($263) + 44|0);
       HEAP32[$264>>2] = $262;
       $265 = $cab;
       $266 = (($265) + 20|0);
       $267 = HEAP32[$266>>2]|0;
       $cab = $267;
      }
      $268 = $self;
      $269 = (($268) + 52|0);
      HEAP32[$269>>2] = 0;
      $0 = 0;
      $270 = $0;
      STACKTOP = sp;return ($270|0);
     }
    }
    $27 = $self;
    $28 = (($27) + 52|0);
    HEAP32[$28>>2] = 1;
    $0 = 1;
    $270 = $0;
    STACKTOP = sp;return ($270|0);
   }
  }
 }
 $17 = $self;
 $18 = (($17) + 52|0);
 HEAP32[$18>>2] = 1;
 $0 = 1;
 $270 = $0;
 STACKTOP = sp;return ($270|0);
}
function _cabd_can_merge_folders($sys,$lfol,$rfol) {
 $sys = $sys|0;
 $lfol = $lfol|0;
 $rfol = $rfol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $l = 0;
 var $lfi = 0, $matching = 0, $r = 0, $rfi = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $1 = $sys;
 $2 = $lfol;
 $3 = $rfol;
 $matching = 1;
 $4 = $2;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $3;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($6|0)!=($9|0);
 if ($10) {
  $0 = 0;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $11 = $2;
 $12 = (($11) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $lfi = $13;
 $14 = ($13|0)!=(0|0);
 if ($14) {
  $15 = $3;
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $rfi = $17;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $lfi;
   $l = $19;
   $20 = $rfi;
   $r = $20;
   while(1) {
    $21 = $l;
    $22 = ($21|0)!=(0|0);
    if (!($22)) {
     break;
    }
    $23 = $r;
    $24 = ($23|0)!=(0|0);
    if (!($24)) {
     label = 11;
     break;
    }
    $25 = $l;
    $26 = (($25) + 32|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $r;
    $29 = (($28) + 32|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($27|0)!=($30|0);
    if ($31) {
     label = 11;
     break;
    }
    $32 = $l;
    $33 = (($32) + 8|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $r;
    $36 = (($35) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($34|0)!=($37|0);
    if ($38) {
     label = 11;
     break;
    }
    $39 = $l;
    $40 = HEAP32[$39>>2]|0;
    $l = $40;
    $41 = $r;
    $42 = HEAP32[$41>>2]|0;
    $r = $42;
   }
   if ((label|0) == 11) {
    $matching = 0;
   }
   $43 = $matching;
   $44 = ($43|0)!=(0);
   if ($44) {
    $0 = 1;
    $78 = $0;
    STACKTOP = sp;return ($78|0);
   }
   $matching = 0;
   $45 = $lfi;
   $l = $45;
   while(1) {
    $46 = $l;
    $47 = ($46|0)!=(0|0);
    if (!($47)) {
     break;
    }
    $48 = $rfi;
    $r = $48;
    while(1) {
     $49 = $r;
     $50 = ($49|0)!=(0|0);
     if (!($50)) {
      break;
     }
     $51 = $l;
     $52 = (($51) + 32|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $r;
     $55 = (($54) + 32|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($53|0)==($56|0);
     if ($57) {
      $58 = $l;
      $59 = (($58) + 8|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = $r;
      $62 = (($61) + 8|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($60|0)==($63|0);
      if ($64) {
       label = 22;
       break;
      }
     }
     $65 = $r;
     $66 = HEAP32[$65>>2]|0;
     $r = $66;
    }
    if ((label|0) == 22) {
     label = 0;
    }
    $67 = $r;
    $68 = ($67|0)!=(0|0);
    if ($68) {
     $matching = 1;
    } else {
     $69 = $1;
     $70 = (($69) + 24|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $l;
     $73 = (($72) + 4|0);
     $74 = HEAP32[$73>>2]|0;
     HEAP32[$vararg_buffer>>2] = $74;
     FUNCTION_TABLE_viii[$71 & 3](0,3304,$vararg_buffer);
    }
    $75 = $l;
    $76 = HEAP32[$75>>2]|0;
    $l = $76;
   }
   $77 = $matching;
   $0 = $77;
   $78 = $0;
   STACKTOP = sp;return ($78|0);
  }
 }
 $0 = 0;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function _cabd_find($self,$buf,$fh,$filename,$flen,$firstlen,$firstcab) {
 $self = $self|0;
 $buf = $buf|0;
 $fh = $fh|0;
 $filename = $filename|0;
 $flen = $flen|0;
 $firstlen = $firstlen|0;
 $firstcab = $firstcab|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cab = 0, $cablen_u32 = 0, $caboff = 0, $false_cabs = 0, $foffset_u32 = 0, $length = 0, $link = 0, $offset = 0, $p = 0, $pend = 0, $state = 0;
 var $sys = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp;
 $1 = $self;
 $2 = $buf;
 $3 = $fh;
 $4 = $filename;
 $5 = $flen;
 $6 = $firstlen;
 $7 = $firstcab;
 $link = 0;
 $8 = $1;
 $9 = (($8) + 36|0);
 $10 = HEAP32[$9>>2]|0;
 $sys = $10;
 $state = 0;
 $cablen_u32 = 0;
 $foffset_u32 = 0;
 $false_cabs = 0;
 $offset = 0;
 L1: while(1) {
  $11 = $offset;
  $12 = $5;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   label = 54;
   break;
  }
  $14 = $5;
  $15 = $offset;
  $16 = (($14) - ($15))|0;
  $length = $16;
  $17 = $length;
  $18 = $1;
  $19 = (($18) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)>($20|0);
  if ($21) {
   $22 = $1;
   $23 = (($22) + 40|0);
   $24 = HEAP32[$23>>2]|0;
   $length = $24;
  }
  $25 = $sys;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $3;
  $29 = $2;
  $30 = $length;
  $31 = (FUNCTION_TABLE_iiii[$27 & 15]($28,$29,$30)|0);
  $32 = $length;
  $33 = ($31|0)!=($32|0);
  if ($33) {
   label = 6;
   break;
  }
  $34 = $offset;
  $35 = ($34|0)==(0);
  if ($35) {
   $36 = $2;
   $37 = (($36) + 3|0);
   $38 = HEAP8[$37]|0;
   $39 = $38&255;
   $40 = $39 << 24;
   $41 = $2;
   $42 = (($41) + 2|0);
   $43 = HEAP8[$42]|0;
   $44 = $43&255;
   $45 = $44 << 16;
   $46 = $40 | $45;
   $47 = $2;
   $48 = (($47) + 1|0);
   $49 = HEAP8[$48]|0;
   $50 = $49&255;
   $51 = $50 << 8;
   $52 = $46 | $51;
   $53 = $2;
   $54 = HEAP8[$53]|0;
   $55 = $54&255;
   $56 = $52 | $55;
   $57 = ($56|0)==(677598025);
   if ($57) {
    $58 = $sys;
    $59 = (($58) + 24|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = $3;
    FUNCTION_TABLE_viii[$60 & 3]($61,3464,$vararg_buffer);
   }
  }
  $62 = $2;
  $p = $62;
  $63 = $length;
  $64 = $2;
  $65 = (($64) + ($63)|0);
  $pend = $65;
  while(1) {
   $66 = $p;
   $67 = $pend;
   $68 = ($66>>>0)<($67>>>0);
   if (!($68)) {
    break;
   }
   $69 = $state;
   $70 = $69&255;
   switch ($70|0) {
   case 1:  {
    $84 = $p;
    $85 = (($84) + 1|0);
    $p = $85;
    $86 = HEAP8[$84]|0;
    $87 = $86&255;
    $88 = ($87|0)==(83);
    $89 = $88 ? 2 : 0;
    $90 = $89&255;
    $state = $90;
    break;
   }
   case 2:  {
    $91 = $p;
    $92 = (($91) + 1|0);
    $p = $92;
    $93 = HEAP8[$91]|0;
    $94 = $93&255;
    $95 = ($94|0)==(67);
    $96 = $95 ? 3 : 0;
    $97 = $96&255;
    $state = $97;
    break;
   }
   case 0:  {
    while(1) {
     $71 = $p;
     $72 = $pend;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = $p;
      $75 = HEAP8[$74]|0;
      $76 = $75&255;
      $77 = ($76|0)!=(77);
      $248 = $77;
     } else {
      $248 = 0;
     }
     if (!($248)) {
      break;
     }
     $78 = $p;
     $79 = (($78) + 1|0);
     $p = $79;
    }
    $80 = $p;
    $81 = (($80) + 1|0);
    $p = $81;
    $82 = $pend;
    $83 = ($80>>>0)<($82>>>0);
    if ($83) {
     $state = 1;
    }
    break;
   }
   case 3:  {
    $98 = $p;
    $99 = (($98) + 1|0);
    $p = $99;
    $100 = HEAP8[$98]|0;
    $101 = $100&255;
    $102 = ($101|0)==(70);
    $103 = $102 ? 4 : 0;
    $104 = $103&255;
    $state = $104;
    break;
   }
   case 8:  {
    $105 = $p;
    $106 = (($105) + 1|0);
    $p = $106;
    $107 = HEAP8[$105]|0;
    $108 = $107&255;
    $cablen_u32 = $108;
    $109 = $state;
    $110 = (($109) + 1)<<24>>24;
    $state = $110;
    break;
   }
   case 9:  {
    $111 = $p;
    $112 = (($111) + 1|0);
    $p = $112;
    $113 = HEAP8[$111]|0;
    $114 = $113&255;
    $115 = $114 << 8;
    $116 = $cablen_u32;
    $117 = $116 | $115;
    $cablen_u32 = $117;
    $118 = $state;
    $119 = (($118) + 1)<<24>>24;
    $state = $119;
    break;
   }
   case 10:  {
    $120 = $p;
    $121 = (($120) + 1|0);
    $p = $121;
    $122 = HEAP8[$120]|0;
    $123 = $122&255;
    $124 = $123 << 16;
    $125 = $cablen_u32;
    $126 = $125 | $124;
    $cablen_u32 = $126;
    $127 = $state;
    $128 = (($127) + 1)<<24>>24;
    $state = $128;
    break;
   }
   case 11:  {
    $129 = $p;
    $130 = (($129) + 1|0);
    $p = $130;
    $131 = HEAP8[$129]|0;
    $132 = $131&255;
    $133 = $132 << 24;
    $134 = $cablen_u32;
    $135 = $134 | $133;
    $cablen_u32 = $135;
    $136 = $state;
    $137 = (($136) + 1)<<24>>24;
    $state = $137;
    break;
   }
   case 16:  {
    $138 = $p;
    $139 = (($138) + 1|0);
    $p = $139;
    $140 = HEAP8[$138]|0;
    $141 = $140&255;
    $foffset_u32 = $141;
    $142 = $state;
    $143 = (($142) + 1)<<24>>24;
    $state = $143;
    break;
   }
   case 17:  {
    $144 = $p;
    $145 = (($144) + 1|0);
    $p = $145;
    $146 = HEAP8[$144]|0;
    $147 = $146&255;
    $148 = $147 << 8;
    $149 = $foffset_u32;
    $150 = $149 | $148;
    $foffset_u32 = $150;
    $151 = $state;
    $152 = (($151) + 1)<<24>>24;
    $state = $152;
    break;
   }
   case 18:  {
    $153 = $p;
    $154 = (($153) + 1|0);
    $p = $154;
    $155 = HEAP8[$153]|0;
    $156 = $155&255;
    $157 = $156 << 16;
    $158 = $foffset_u32;
    $159 = $158 | $157;
    $foffset_u32 = $159;
    $160 = $state;
    $161 = (($160) + 1)<<24>>24;
    $state = $161;
    break;
   }
   case 19:  {
    $162 = $p;
    $163 = (($162) + 1|0);
    $p = $163;
    $164 = HEAP8[$162]|0;
    $165 = $164&255;
    $166 = $165 << 24;
    $167 = $foffset_u32;
    $168 = $167 | $166;
    $foffset_u32 = $168;
    $169 = $offset;
    $170 = $p;
    $171 = $2;
    $172 = $170;
    $173 = $171;
    $174 = (($172) - ($173))|0;
    $175 = (($169) + ($174))|0;
    $176 = (($175) - 20)|0;
    $caboff = $176;
    $177 = $caboff;
    $178 = (($177) + 4)|0;
    $offset = $178;
    $179 = $caboff;
    $180 = ($179|0)==(0);
    if ($180) {
     $181 = $cablen_u32;
     $182 = $6;
     HEAP32[$182>>2] = $181;
    }
    $183 = $foffset_u32;
    $184 = $cablen_u32;
    $185 = ($183>>>0)<($184>>>0);
    if ($185) {
     $186 = $caboff;
     $187 = $foffset_u32;
     $188 = (($186) + ($187))|0;
     $189 = $5;
     $190 = (($189) + 32)|0;
     $191 = ($188|0)<($190|0);
     if ($191) {
      $192 = $caboff;
      $193 = $cablen_u32;
      $194 = (($192) + ($193))|0;
      $195 = $5;
      $196 = (($195) + 32)|0;
      $197 = ($194|0)<($196|0);
      if ($197) {
       $198 = $sys;
       $199 = (($198) + 28|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = $sys;
       $202 = (FUNCTION_TABLE_iii[$200 & 15]($201,68)|0);
       $cab = $202;
       $203 = ($202|0)!=(0|0);
       if (!($203)) {
        label = 37;
        break L1;
       }
       $204 = $4;
       $205 = $cab;
       $206 = (($205) + 4|0);
       HEAP32[$206>>2] = $204;
       $207 = $sys;
       $208 = $3;
       $209 = $cab;
       $210 = $caboff;
       $211 = (_cabd_read_headers($207,$208,$209,$210,1)|0);
       $212 = ($211|0)!=(0);
       if ($212) {
        $213 = $1;
        $214 = $cab;
        _cabd_close($213,$214);
        $215 = $false_cabs;
        $216 = (($215) + 1)|0;
        $false_cabs = $216;
       } else {
        $217 = $link;
        $218 = ($217|0)!=(0|0);
        if ($218) {
         $221 = $cab;
         $222 = $link;
         HEAP32[$222>>2] = $221;
        } else {
         $219 = $cab;
         $220 = $7;
         HEAP32[$220>>2] = $219;
        }
        $223 = $cab;
        $link = $223;
        $224 = $caboff;
        $225 = $cablen_u32;
        $226 = (($224) + ($225))|0;
        $offset = $226;
       }
      }
     }
    }
    $227 = $offset;
    $228 = $5;
    $229 = ($227|0)>=($228|0);
    if ($229) {
     label = 46;
     break L1;
    }
    $230 = $sys;
    $231 = (($230) + 16|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = $3;
    $234 = $offset;
    $235 = (FUNCTION_TABLE_iiii[$232 & 15]($233,$234,0)|0);
    $236 = ($235|0)!=(0);
    if ($236) {
     label = 48;
     break L1;
    }
    $length = 0;
    $237 = $pend;
    $p = $237;
    $state = 0;
    break;
   }
   default: {
    $238 = $p;
    $239 = (($238) + 1|0);
    $p = $239;
    $240 = $state;
    $241 = (($240) + 1)<<24>>24;
    $state = $241;
   }
   }
  }
  $242 = $length;
  $243 = $offset;
  $244 = (($243) + ($242))|0;
  $offset = $244;
 }
 if ((label|0) == 6) {
  $0 = 3;
  $247 = $0;
  STACKTOP = sp;return ($247|0);
 }
 else if ((label|0) == 37) {
  $0 = 6;
  $247 = $0;
  STACKTOP = sp;return ($247|0);
 }
 else if ((label|0) == 46) {
  $0 = 0;
  $247 = $0;
  STACKTOP = sp;return ($247|0);
 }
 else if ((label|0) == 48) {
  $0 = 5;
  $247 = $0;
  STACKTOP = sp;return ($247|0);
 }
 else if ((label|0) == 54) {
  $245 = $false_cabs;
  $246 = ($245|0)!=(0);
  if ($246) {
  }
  $0 = 0;
  $247 = $0;
  STACKTOP = sp;return ($247|0);
 }
 return 0|0;
}
function _cabd_read_headers($sys,$fh,$cab,$offset,$quiet) {
 $sys = $sys|0;
 $fh = $fh|0;
 $cab = $cab|0;
 $offset = $offset|0;
 $quiet = $quiet|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $file = 0, $fol = 0, $folder_resv = 0, $i = 0, $ifol = 0, $ifol1 = 0, $linkfile = 0;
 var $linkfol = 0, $num_files = 0, $num_folders = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 8|0;
 $vararg_buffer1 = sp + 16|0;
 $vararg_buffer = sp;
 $x = sp + 68|0;
 $buf = sp + 96|0;
 $1 = $sys;
 $2 = $fh;
 $3 = $cab;
 $4 = $offset;
 $5 = $quiet;
 $linkfol = 0;
 $linkfile = 0;
 $6 = $3;
 HEAP32[$6>>2] = 0;
 $7 = $3;
 $8 = (($7) + 40|0);
 HEAP32[$8>>2] = 0;
 $9 = $3;
 $10 = (($9) + 44|0);
 HEAP32[$10>>2] = 0;
 $11 = $3;
 $12 = (($11) + 20|0);
 HEAP32[$12>>2] = 0;
 $13 = $3;
 $14 = (($13) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = $3;
 $16 = (($15) + 28|0);
 HEAP32[$16>>2] = 0;
 $17 = $3;
 $18 = (($17) + 24|0);
 HEAP32[$18>>2] = 0;
 $19 = $3;
 $20 = (($19) + 36|0);
 HEAP32[$20>>2] = 0;
 $21 = $3;
 $22 = (($21) + 32|0);
 HEAP32[$22>>2] = 0;
 $23 = $4;
 $24 = $3;
 $25 = (($24) + 8|0);
 HEAP32[$25>>2] = $23;
 $26 = $1;
 $27 = (($26) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $2;
 $30 = $4;
 $31 = (FUNCTION_TABLE_iiii[$28 & 15]($29,$30,0)|0);
 $32 = ($31|0)!=(0);
 if ($32) {
  $0 = 5;
  $571 = $0;
  STACKTOP = sp;return ($571|0);
 }
 $33 = $1;
 $34 = (($33) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = (FUNCTION_TABLE_iiii[$35 & 15]($36,$buf,36)|0);
 $38 = ($37|0)!=(36);
 if ($38) {
  $0 = 3;
  $571 = $0;
  STACKTOP = sp;return ($571|0);
 }
 $39 = (($buf) + 3|0);
 $40 = HEAP8[$39]|0;
 $41 = $40&255;
 $42 = $41 << 24;
 $43 = (($buf) + 2|0);
 $44 = HEAP8[$43]|0;
 $45 = $44&255;
 $46 = $45 << 16;
 $47 = $42 | $46;
 $48 = (($buf) + 1|0);
 $49 = HEAP8[$48]|0;
 $50 = $49&255;
 $51 = $50 << 8;
 $52 = $47 | $51;
 $53 = HEAP8[$buf]|0;
 $54 = $53&255;
 $55 = $52 | $54;
 $56 = ($55|0)!=(1178817357);
 if ($56) {
  $0 = 7;
  $571 = $0;
  STACKTOP = sp;return ($571|0);
 }
 $57 = (($buf) + 8|0);
 $58 = (($57) + 3|0);
 $59 = HEAP8[$58]|0;
 $60 = $59&255;
 $61 = $60 << 24;
 $62 = (($buf) + 8|0);
 $63 = (($62) + 2|0);
 $64 = HEAP8[$63]|0;
 $65 = $64&255;
 $66 = $65 << 16;
 $67 = $61 | $66;
 $68 = (($buf) + 8|0);
 $69 = (($68) + 1|0);
 $70 = HEAP8[$69]|0;
 $71 = $70&255;
 $72 = $71 << 8;
 $73 = $67 | $72;
 $74 = (($buf) + 8|0);
 $75 = HEAP8[$74]|0;
 $76 = $75&255;
 $77 = $73 | $76;
 $78 = $3;
 $79 = (($78) + 12|0);
 HEAP32[$79>>2] = $77;
 $80 = (($buf) + 32|0);
 $81 = (($80) + 1|0);
 $82 = HEAP8[$81]|0;
 $83 = $82&255;
 $84 = $83 << 8;
 $85 = (($buf) + 32|0);
 $86 = HEAP8[$85]|0;
 $87 = $86&255;
 $88 = $84 | $87;
 $89 = $88&65535;
 $90 = $3;
 $91 = (($90) + 48|0);
 HEAP16[$91>>1] = $89;
 $92 = (($buf) + 34|0);
 $93 = (($92) + 1|0);
 $94 = HEAP8[$93]|0;
 $95 = $94&255;
 $96 = $95 << 8;
 $97 = (($buf) + 34|0);
 $98 = HEAP8[$97]|0;
 $99 = $98&255;
 $100 = $96 | $99;
 $101 = $100&65535;
 $102 = $3;
 $103 = (($102) + 50|0);
 HEAP16[$103>>1] = $101;
 $104 = (($buf) + 26|0);
 $105 = (($104) + 1|0);
 $106 = HEAP8[$105]|0;
 $107 = $106&255;
 $108 = $107 << 8;
 $109 = (($buf) + 26|0);
 $110 = HEAP8[$109]|0;
 $111 = $110&255;
 $112 = $108 | $111;
 $num_folders = $112;
 $113 = $num_folders;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = $5;
  $116 = ($115|0)!=(0);
  if (!($116)) {
   $117 = $1;
   $118 = (($117) + 24|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $2;
   FUNCTION_TABLE_viii[$119 & 3]($120,3592,$vararg_buffer);
  }
  $0 = 8;
  $571 = $0;
  STACKTOP = sp;return ($571|0);
 }
 $121 = (($buf) + 28|0);
 $122 = (($121) + 1|0);
 $123 = HEAP8[$122]|0;
 $124 = $123&255;
 $125 = $124 << 8;
 $126 = (($buf) + 28|0);
 $127 = HEAP8[$126]|0;
 $128 = $127&255;
 $129 = $125 | $128;
 $num_files = $129;
 $130 = $num_files;
 $131 = ($130|0)==(0);
 if ($131) {
  $132 = $5;
  $133 = ($132|0)!=(0);
  if (!($133)) {
   $134 = $1;
   $135 = (($134) + 24|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = $2;
   FUNCTION_TABLE_viii[$136 & 3]($137,3616,$vararg_buffer1);
  }
  $0 = 8;
  $571 = $0;
  STACKTOP = sp;return ($571|0);
 }
 $138 = (($buf) + 25|0);
 $139 = HEAP8[$138]|0;
 $140 = $139&255;
 $141 = ($140|0)!=(1);
 if ($141) {
  $142 = (($buf) + 24|0);
  $143 = HEAP8[$142]|0;
  $144 = $143&255;
  $145 = ($144|0)!=(3);
  if ($145) {
   $146 = $5;
   $147 = ($146|0)!=(0);
   if (!($147)) {
    $148 = $1;
    $149 = (($148) + 24|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $2;
    FUNCTION_TABLE_viii[$150 & 3]($151,3640,$vararg_buffer4);
   }
  }
 }
 $152 = (($buf) + 30|0);
 $153 = (($152) + 1|0);
 $154 = HEAP8[$153]|0;
 $155 = $154&255;
 $156 = $155 << 8;
 $157 = (($buf) + 30|0);
 $158 = HEAP8[$157]|0;
 $159 = $158&255;
 $160 = $156 | $159;
 $161 = $3;
 $162 = (($161) + 56|0);
 HEAP32[$162>>2] = $160;
 $163 = $3;
 $164 = (($163) + 56|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = $165 & 4;
 $167 = ($166|0)!=(0);
 if ($167) {
  $168 = $1;
  $169 = (($168) + 8|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $2;
  $172 = (FUNCTION_TABLE_iiii[$170 & 15]($171,$buf,4)|0);
  $173 = ($172|0)!=(4);
  if ($173) {
   $0 = 3;
   $571 = $0;
   STACKTOP = sp;return ($571|0);
  }
  $174 = (($buf) + 1|0);
  $175 = HEAP8[$174]|0;
  $176 = $175&255;
  $177 = $176 << 8;
  $178 = HEAP8[$buf]|0;
  $179 = $178&255;
  $180 = $177 | $179;
  $181 = $180&65535;
  $182 = $3;
  $183 = (($182) + 52|0);
  HEAP16[$183>>1] = $181;
  $184 = (($buf) + 2|0);
  $185 = HEAP8[$184]|0;
  $186 = $185&255;
  $folder_resv = $186;
  $187 = (($buf) + 3|0);
  $188 = HEAP8[$187]|0;
  $189 = $188&255;
  $190 = $3;
  $191 = (($190) + 64|0);
  HEAP32[$191>>2] = $189;
  $192 = $3;
  $193 = (($192) + 52|0);
  $194 = HEAP16[$193>>1]|0;
  $195 = $194&65535;
  $196 = ($195|0)>(60000);
  if ($196) {
   $197 = $5;
   $198 = ($197|0)!=(0);
   if (!($198)) {
    $199 = $1;
    $200 = (($199) + 24|0);
    $201 = HEAP32[$200>>2]|0;
    $202 = $2;
    FUNCTION_TABLE_viii[$201 & 3]($202,3680,$vararg_buffer7);
   }
  }
  $203 = $3;
  $204 = (($203) + 52|0);
  $205 = HEAP16[$204>>1]|0;
  $206 = ($205<<16>>16)!=(0);
  do {
   if ($206) {
    $207 = $1;
    $208 = (($207) + 16|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = $2;
    $211 = $3;
    $212 = (($211) + 52|0);
    $213 = HEAP16[$212>>1]|0;
    $214 = $213&65535;
    $215 = (FUNCTION_TABLE_iiii[$209 & 15]($210,$214,1)|0);
    $216 = ($215|0)!=(0);
    if (!($216)) {
     break;
    }
    $0 = 5;
    $571 = $0;
    STACKTOP = sp;return ($571|0);
   }
  } while(0);
 } else {
  $217 = $3;
  $218 = (($217) + 52|0);
  HEAP16[$218>>1] = 0;
  $folder_resv = 0;
  $219 = $3;
  $220 = (($219) + 64|0);
  HEAP32[$220>>2] = 0;
 }
 $221 = $3;
 $222 = (($221) + 56|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = $223 & 1;
 $225 = ($224|0)!=(0);
 do {
  if ($225) {
   $226 = $1;
   $227 = $2;
   $228 = $3;
   $229 = (_cabd_read_string($226,$227,$228,$x)|0);
   $230 = $3;
   $231 = (($230) + 24|0);
   HEAP32[$231>>2] = $229;
   $232 = HEAP32[$x>>2]|0;
   $233 = ($232|0)!=(0);
   if ($233) {
    $234 = HEAP32[$x>>2]|0;
    $0 = $234;
    $571 = $0;
    STACKTOP = sp;return ($571|0);
   }
   $235 = $1;
   $236 = $2;
   $237 = $3;
   $238 = (_cabd_read_string($235,$236,$237,$x)|0);
   $239 = $3;
   $240 = (($239) + 32|0);
   HEAP32[$240>>2] = $238;
   $241 = HEAP32[$x>>2]|0;
   $242 = ($241|0)!=(0);
   if (!($242)) {
    break;
   }
   $243 = HEAP32[$x>>2]|0;
   $0 = $243;
   $571 = $0;
   STACKTOP = sp;return ($571|0);
  }
 } while(0);
 $244 = $3;
 $245 = (($244) + 56|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = $246 & 2;
 $248 = ($247|0)!=(0);
 do {
  if ($248) {
   $249 = $1;
   $250 = $2;
   $251 = $3;
   $252 = (_cabd_read_string($249,$250,$251,$x)|0);
   $253 = $3;
   $254 = (($253) + 28|0);
   HEAP32[$254>>2] = $252;
   $255 = HEAP32[$x>>2]|0;
   $256 = ($255|0)!=(0);
   if ($256) {
    $257 = HEAP32[$x>>2]|0;
    $0 = $257;
    $571 = $0;
    STACKTOP = sp;return ($571|0);
   }
   $258 = $1;
   $259 = $2;
   $260 = $3;
   $261 = (_cabd_read_string($258,$259,$260,$x)|0);
   $262 = $3;
   $263 = (($262) + 36|0);
   HEAP32[$263>>2] = $261;
   $264 = HEAP32[$x>>2]|0;
   $265 = ($264|0)!=(0);
   if (!($265)) {
    break;
   }
   $266 = HEAP32[$x>>2]|0;
   $0 = $266;
   $571 = $0;
   STACKTOP = sp;return ($571|0);
  }
 } while(0);
 $i = 0;
 while(1) {
  $267 = $i;
  $268 = $num_folders;
  $269 = ($267|0)<($268|0);
  if (!($269)) {
   label = 60;
   break;
  }
  $270 = $1;
  $271 = (($270) + 8|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = $2;
  $274 = (FUNCTION_TABLE_iiii[$272 & 15]($273,$buf,8)|0);
  $275 = ($274|0)!=(8);
  if ($275) {
   label = 48;
   break;
  }
  $276 = $folder_resv;
  $277 = ($276|0)!=(0);
  if ($277) {
   $278 = $1;
   $279 = (($278) + 16|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = $2;
   $282 = $folder_resv;
   $283 = (FUNCTION_TABLE_iiii[$280 & 15]($281,$282,1)|0);
   $284 = ($283|0)!=(0);
   if ($284) {
    label = 51;
    break;
   }
  }
  $285 = $1;
  $286 = (($285) + 28|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = $1;
  $289 = (FUNCTION_TABLE_iii[$287 & 15]($288,32)|0);
  $fol = $289;
  $290 = ($289|0)!=(0|0);
  if (!($290)) {
   label = 54;
   break;
  }
  $291 = $fol;
  HEAP32[$291>>2] = 0;
  $292 = (($buf) + 6|0);
  $293 = (($292) + 1|0);
  $294 = HEAP8[$293]|0;
  $295 = $294&255;
  $296 = $295 << 8;
  $297 = (($buf) + 6|0);
  $298 = HEAP8[$297]|0;
  $299 = $298&255;
  $300 = $296 | $299;
  $301 = $fol;
  $302 = (($301) + 4|0);
  HEAP32[$302>>2] = $300;
  $303 = (($buf) + 4|0);
  $304 = (($303) + 1|0);
  $305 = HEAP8[$304]|0;
  $306 = $305&255;
  $307 = $306 << 8;
  $308 = (($buf) + 4|0);
  $309 = HEAP8[$308]|0;
  $310 = $309&255;
  $311 = $307 | $310;
  $312 = $fol;
  $313 = (($312) + 8|0);
  HEAP32[$313>>2] = $311;
  $314 = $fol;
  $315 = (($314) + 12|0);
  HEAP32[$315>>2] = 0;
  $316 = $3;
  $317 = $fol;
  $318 = (($317) + 12|0);
  $319 = (($318) + 4|0);
  HEAP32[$319>>2] = $316;
  $320 = $4;
  $321 = (($buf) + 3|0);
  $322 = HEAP8[$321]|0;
  $323 = $322&255;
  $324 = $323 << 24;
  $325 = (($buf) + 2|0);
  $326 = HEAP8[$325]|0;
  $327 = $326&255;
  $328 = $327 << 16;
  $329 = $324 | $328;
  $330 = (($buf) + 1|0);
  $331 = HEAP8[$330]|0;
  $332 = $331&255;
  $333 = $332 << 8;
  $334 = $329 | $333;
  $335 = HEAP8[$buf]|0;
  $336 = $335&255;
  $337 = $334 | $336;
  $338 = (($320) + ($337))|0;
  $339 = $fol;
  $340 = (($339) + 12|0);
  $341 = (($340) + 8|0);
  HEAP32[$341>>2] = $338;
  $342 = $fol;
  $343 = (($342) + 24|0);
  HEAP32[$343>>2] = 0;
  $344 = $fol;
  $345 = (($344) + 28|0);
  HEAP32[$345>>2] = 0;
  $346 = $linkfol;
  $347 = ($346|0)!=(0|0);
  if ($347) {
   $351 = $fol;
   $352 = $linkfol;
   HEAP32[$352>>2] = $351;
  } else {
   $348 = $fol;
   $349 = $3;
   $350 = (($349) + 44|0);
   HEAP32[$350>>2] = $348;
  }
  $353 = $fol;
  $linkfol = $353;
  $354 = $i;
  $355 = (($354) + 1)|0;
  $i = $355;
 }
 if ((label|0) == 48) {
  $0 = 3;
  $571 = $0;
  STACKTOP = sp;return ($571|0);
 }
 else if ((label|0) == 51) {
  $0 = 5;
  $571 = $0;
  STACKTOP = sp;return ($571|0);
 }
 else if ((label|0) == 54) {
  $0 = 6;
  $571 = $0;
  STACKTOP = sp;return ($571|0);
 }
 else if ((label|0) == 60) {
  $i = 0;
  while(1) {
   $356 = $i;
   $357 = $num_files;
   $358 = ($356|0)<($357|0);
   if (!($358)) {
    label = 96;
    break;
   }
   $359 = $1;
   $360 = (($359) + 8|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = $2;
   $363 = (FUNCTION_TABLE_iiii[$361 & 15]($362,$buf,16)|0);
   $364 = ($363|0)!=(16);
   if ($364) {
    label = 63;
    break;
   }
   $365 = $1;
   $366 = (($365) + 28|0);
   $367 = HEAP32[$366>>2]|0;
   $368 = $1;
   $369 = (FUNCTION_TABLE_iii[$367 & 15]($368,36)|0);
   $file = $369;
   $370 = ($369|0)!=(0|0);
   if (!($370)) {
    label = 65;
    break;
   }
   $371 = $file;
   HEAP32[$371>>2] = 0;
   $372 = (($buf) + 3|0);
   $373 = HEAP8[$372]|0;
   $374 = $373&255;
   $375 = $374 << 24;
   $376 = (($buf) + 2|0);
   $377 = HEAP8[$376]|0;
   $378 = $377&255;
   $379 = $378 << 16;
   $380 = $375 | $379;
   $381 = (($buf) + 1|0);
   $382 = HEAP8[$381]|0;
   $383 = $382&255;
   $384 = $383 << 8;
   $385 = $380 | $384;
   $386 = HEAP8[$buf]|0;
   $387 = $386&255;
   $388 = $385 | $387;
   $389 = $file;
   $390 = (($389) + 8|0);
   HEAP32[$390>>2] = $388;
   $391 = (($buf) + 14|0);
   $392 = (($391) + 1|0);
   $393 = HEAP8[$392]|0;
   $394 = $393&255;
   $395 = $394 << 8;
   $396 = (($buf) + 14|0);
   $397 = HEAP8[$396]|0;
   $398 = $397&255;
   $399 = $395 | $398;
   $400 = $file;
   $401 = (($400) + 12|0);
   HEAP32[$401>>2] = $399;
   $402 = (($buf) + 4|0);
   $403 = (($402) + 3|0);
   $404 = HEAP8[$403]|0;
   $405 = $404&255;
   $406 = $405 << 24;
   $407 = (($buf) + 4|0);
   $408 = (($407) + 2|0);
   $409 = HEAP8[$408]|0;
   $410 = $409&255;
   $411 = $410 << 16;
   $412 = $406 | $411;
   $413 = (($buf) + 4|0);
   $414 = (($413) + 1|0);
   $415 = HEAP8[$414]|0;
   $416 = $415&255;
   $417 = $416 << 8;
   $418 = $412 | $417;
   $419 = (($buf) + 4|0);
   $420 = HEAP8[$419]|0;
   $421 = $420&255;
   $422 = $418 | $421;
   $423 = $file;
   $424 = (($423) + 32|0);
   HEAP32[$424>>2] = $422;
   $425 = (($buf) + 8|0);
   $426 = (($425) + 1|0);
   $427 = HEAP8[$426]|0;
   $428 = $427&255;
   $429 = $428 << 8;
   $430 = (($buf) + 8|0);
   $431 = HEAP8[$430]|0;
   $432 = $431&255;
   $433 = $429 | $432;
   HEAP32[$x>>2] = $433;
   $434 = HEAP32[$x>>2]|0;
   $435 = ($434|0)<(65533);
   if ($435) {
    $436 = $3;
    $437 = (($436) + 44|0);
    $438 = HEAP32[$437>>2]|0;
    $ifol = $438;
    while(1) {
     $439 = HEAP32[$x>>2]|0;
     $440 = (($439) + -1)|0;
     HEAP32[$x>>2] = $440;
     $441 = ($439|0)!=(0);
     if (!($441)) {
      break;
     }
     $442 = $ifol;
     $443 = ($442|0)!=(0|0);
     if ($443) {
      $444 = $ifol;
      $445 = HEAP32[$444>>2]|0;
      $ifol = $445;
     }
    }
    $446 = $ifol;
    $447 = $file;
    $448 = (($447) + 28|0);
    HEAP32[$448>>2] = $446;
    $449 = $ifol;
    $450 = ($449|0)!=(0|0);
    if (!($450)) {
     label = 73;
     break;
    }
   } else {
    $455 = HEAP32[$x>>2]|0;
    $456 = ($455|0)==(65534);
    if ($456) {
     label = 77;
    } else {
     $457 = HEAP32[$x>>2]|0;
     $458 = ($457|0)==(65535);
     if ($458) {
      label = 77;
     }
    }
    if ((label|0) == 77) {
     label = 0;
     $459 = $3;
     $460 = (($459) + 44|0);
     $461 = HEAP32[$460>>2]|0;
     $ifol1 = $461;
     while(1) {
      $462 = $ifol1;
      $463 = HEAP32[$462>>2]|0;
      $464 = ($463|0)!=(0|0);
      if (!($464)) {
       break;
      }
      $465 = $ifol1;
      $466 = HEAP32[$465>>2]|0;
      $ifol1 = $466;
     }
     $467 = $ifol1;
     $468 = $file;
     $469 = (($468) + 28|0);
     HEAP32[$469>>2] = $467;
     $470 = $ifol1;
     $fol = $470;
     $471 = $fol;
     $472 = (($471) + 28|0);
     $473 = HEAP32[$472>>2]|0;
     $474 = ($473|0)!=(0|0);
     if (!($474)) {
      $475 = $file;
      $476 = $fol;
      $477 = (($476) + 28|0);
      HEAP32[$477>>2] = $475;
     }
    }
    $478 = HEAP32[$x>>2]|0;
    $479 = ($478|0)==(65533);
    if ($479) {
     label = 85;
    } else {
     $480 = HEAP32[$x>>2]|0;
     $481 = ($480|0)==(65535);
     if ($481) {
      label = 85;
     }
    }
    if ((label|0) == 85) {
     label = 0;
     $482 = $3;
     $483 = (($482) + 44|0);
     $484 = HEAP32[$483>>2]|0;
     $485 = $file;
     $486 = (($485) + 28|0);
     HEAP32[$486>>2] = $484;
     $487 = $file;
     $488 = (($487) + 28|0);
     $489 = HEAP32[$488>>2]|0;
     $fol = $489;
     $490 = $fol;
     $491 = (($490) + 24|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = ($492|0)!=(0|0);
     if (!($493)) {
      $494 = $file;
      $495 = $fol;
      $496 = (($495) + 24|0);
      HEAP32[$496>>2] = $494;
     }
    }
   }
   $497 = (($buf) + 12|0);
   $498 = (($497) + 1|0);
   $499 = HEAP8[$498]|0;
   $500 = $499&255;
   $501 = $500 << 8;
   $502 = (($buf) + 12|0);
   $503 = HEAP8[$502]|0;
   $504 = $503&255;
   $505 = $501 | $504;
   HEAP32[$x>>2] = $505;
   $506 = HEAP32[$x>>2]|0;
   $507 = $506 >> 11;
   $508 = $507&255;
   $509 = $file;
   $510 = (($509) + 16|0);
   HEAP8[$510] = $508;
   $511 = HEAP32[$x>>2]|0;
   $512 = $511 >> 5;
   $513 = $512 & 63;
   $514 = $513&255;
   $515 = $file;
   $516 = (($515) + 17|0);
   HEAP8[$516] = $514;
   $517 = HEAP32[$x>>2]|0;
   $518 = $517 << 1;
   $519 = $518 & 62;
   $520 = $519&255;
   $521 = $file;
   $522 = (($521) + 18|0);
   HEAP8[$522] = $520;
   $523 = (($buf) + 10|0);
   $524 = (($523) + 1|0);
   $525 = HEAP8[$524]|0;
   $526 = $525&255;
   $527 = $526 << 8;
   $528 = (($buf) + 10|0);
   $529 = HEAP8[$528]|0;
   $530 = $529&255;
   $531 = $527 | $530;
   HEAP32[$x>>2] = $531;
   $532 = HEAP32[$x>>2]|0;
   $533 = $532 & 31;
   $534 = $533&255;
   $535 = $file;
   $536 = (($535) + 19|0);
   HEAP8[$536] = $534;
   $537 = HEAP32[$x>>2]|0;
   $538 = $537 >> 5;
   $539 = $538 & 15;
   $540 = $539&255;
   $541 = $file;
   $542 = (($541) + 20|0);
   HEAP8[$542] = $540;
   $543 = HEAP32[$x>>2]|0;
   $544 = $543 >> 9;
   $545 = (($544) + 1980)|0;
   $546 = $file;
   $547 = (($546) + 24|0);
   HEAP32[$547>>2] = $545;
   $548 = $1;
   $549 = $2;
   $550 = $3;
   $551 = (_cabd_read_string($548,$549,$550,$x)|0);
   $552 = $file;
   $553 = (($552) + 4|0);
   HEAP32[$553>>2] = $551;
   $554 = HEAP32[$x>>2]|0;
   $555 = ($554|0)!=(0);
   if ($555) {
    label = 90;
    break;
   }
   $561 = $linkfile;
   $562 = ($561|0)!=(0|0);
   if ($562) {
    $566 = $file;
    $567 = $linkfile;
    HEAP32[$567>>2] = $566;
   } else {
    $563 = $file;
    $564 = $3;
    $565 = (($564) + 40|0);
    HEAP32[$565>>2] = $563;
   }
   $568 = $file;
   $linkfile = $568;
   $569 = $i;
   $570 = (($569) + 1)|0;
   $i = $570;
  }
  if ((label|0) == 63) {
   $0 = 3;
   $571 = $0;
   STACKTOP = sp;return ($571|0);
  }
  else if ((label|0) == 65) {
   $0 = 6;
   $571 = $0;
   STACKTOP = sp;return ($571|0);
  }
  else if ((label|0) == 73) {
   $451 = $1;
   $452 = (($451) + 32|0);
   $453 = HEAP32[$452>>2]|0;
   $454 = $file;
   FUNCTION_TABLE_vi[$453 & 3]($454);
   $0 = 8;
   $571 = $0;
   STACKTOP = sp;return ($571|0);
  }
  else if ((label|0) == 90) {
   $556 = $1;
   $557 = (($556) + 32|0);
   $558 = HEAP32[$557>>2]|0;
   $559 = $file;
   FUNCTION_TABLE_vi[$558 & 3]($559);
   $560 = HEAP32[$x>>2]|0;
   $0 = $560;
   $571 = $0;
   STACKTOP = sp;return ($571|0);
  }
  else if ((label|0) == 96) {
   $0 = 0;
   $571 = $0;
   STACKTOP = sp;return ($571|0);
  }
 }
 return 0|0;
}
function _cabd_read_string($sys,$fh,$cab,$error) {
 $sys = $sys|0;
 $fh = $fh|0;
 $cab = $cab|0;
 $error = $error|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base = 0, $buf = 0, $i = 0, $len = 0, $ok = 0;
 var $str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $buf = sp + 40|0;
 $1 = $sys;
 $2 = $fh;
 $3 = $cab;
 $4 = $error;
 $5 = $1;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = (FUNCTION_TABLE_ii[$7 & 3]($8)|0);
 $base = $9;
 $10 = $1;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $2;
 $14 = (FUNCTION_TABLE_iiii[$12 & 15]($13,$buf,256)|0);
 $len = $14;
 $i = 0;
 $ok = 0;
 while(1) {
  $15 = $i;
  $16 = $len;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   break;
  }
  $18 = $i;
  $19 = (($buf) + ($18)|0);
  $20 = HEAP8[$19]|0;
  $21 = ($20<<24>>24)!=(0);
  if (!($21)) {
   label = 4;
   break;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 if ((label|0) == 4) {
  $ok = 1;
 }
 $24 = $ok;
 $25 = ($24|0)!=(0);
 if (!($25)) {
  $26 = $4;
  HEAP32[$26>>2] = 8;
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $27 = $i;
 $28 = (($27) + 1)|0;
 $len = $28;
 $29 = $1;
 $30 = (($29) + 16|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $2;
 $33 = $base;
 $34 = $len;
 $35 = (($33) + ($34))|0;
 $36 = (FUNCTION_TABLE_iiii[$31 & 15]($32,$35,0)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $4;
  HEAP32[$38>>2] = 5;
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 $39 = $1;
 $40 = (($39) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $1;
 $43 = $len;
 $44 = (FUNCTION_TABLE_iii[$41 & 15]($42,$43)|0);
 $str = $44;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $47 = $1;
  $48 = (($47) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $str;
  $51 = $len;
  FUNCTION_TABLE_viii[$49 & 3]($buf,$50,$51);
  $52 = $4;
  HEAP32[$52>>2] = 0;
  $53 = $str;
  $0 = $53;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 } else {
  $46 = $4;
  HEAP32[$46>>2] = 6;
  $0 = 0;
  $54 = $0;
  STACKTOP = sp;return ($54|0);
 }
 return 0|0;
}
function _lzxd_init($system,$input,$output,$window_bits,$reset_interval,$input_buffer_size,$output_length) {
 $system = $system|0;
 $input = $input|0;
 $output = $output|0;
 $window_bits = $window_bits|0;
 $reset_interval = $reset_interval|0;
 $input_buffer_size = $input_buffer_size|0;
 $output_length = $output_length|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $lzx = 0, $window_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $system;
 $2 = $input;
 $3 = $output;
 $4 = $window_bits;
 $5 = $reset_interval;
 $6 = $input_buffer_size;
 $7 = $output_length;
 $8 = $4;
 $9 = 1 << $8;
 $window_size = $9;
 $10 = $1;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  $0 = 0;
  $138 = $0;
  STACKTOP = sp;return ($138|0);
 }
 $12 = $4;
 $13 = ($12|0)<(15);
 if (!($13)) {
  $14 = $4;
  $15 = ($14|0)>(21);
  if (!($15)) {
   $16 = $6;
   $17 = (($16) + 1)|0;
   $18 = $17 & -2;
   $6 = $18;
   $19 = $6;
   $20 = ($19|0)!=(0);
   if (!($20)) {
    $0 = 0;
    $138 = $0;
    STACKTOP = sp;return ($138|0);
   }
   $21 = $1;
   $22 = (($21) + 28|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = (FUNCTION_TABLE_iii[$23 & 15]($24,54580)|0);
   $lzx = $25;
   $26 = ($25|0)!=(0|0);
   if (!($26)) {
    $0 = 0;
    $138 = $0;
    STACKTOP = sp;return ($138|0);
   }
   $27 = $1;
   $28 = (($27) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $1;
   $31 = $window_size;
   $32 = (FUNCTION_TABLE_iii[$29 & 15]($30,$31)|0);
   $33 = $lzx;
   $34 = (($33) + 20|0);
   HEAP32[$34>>2] = $32;
   $35 = $1;
   $36 = (($35) + 28|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $1;
   $39 = $6;
   $40 = (FUNCTION_TABLE_iii[$37 & 15]($38,$39)|0);
   $41 = $lzx;
   $42 = (($41) + 84|0);
   HEAP32[$42>>2] = $40;
   $43 = $lzx;
   $44 = (($43) + 20|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)!=(0|0);
   if ($46) {
    $47 = $lzx;
    $48 = (($47) + 84|0);
    $49 = HEAP32[$48>>2]|0;
    $50 = ($49|0)!=(0|0);
    if ($50) {
     $67 = $1;
     $68 = $lzx;
     HEAP32[$68>>2] = $67;
     $69 = $2;
     $70 = $lzx;
     $71 = (($70) + 4|0);
     HEAP32[$71>>2] = $69;
     $72 = $3;
     $73 = $lzx;
     $74 = (($73) + 8|0);
     HEAP32[$74>>2] = $72;
     $75 = $lzx;
     $76 = (($75) + 12|0);
     HEAP32[$76>>2] = 0;
     $77 = $7;
     $78 = $lzx;
     $79 = (($78) + 16|0);
     HEAP32[$79>>2] = $77;
     $80 = $6;
     $81 = $lzx;
     $82 = (($81) + 112|0);
     HEAP32[$82>>2] = $80;
     $83 = $4;
     $84 = 1 << $83;
     $85 = $lzx;
     $86 = (($85) + 24|0);
     HEAP32[$86>>2] = $84;
     $87 = $lzx;
     $88 = (($87) + 28|0);
     HEAP32[$88>>2] = 0;
     $89 = $lzx;
     $90 = (($89) + 32|0);
     HEAP32[$90>>2] = 0;
     $91 = $lzx;
     $92 = (($91) + 36|0);
     HEAP32[$92>>2] = 0;
     $93 = $5;
     $94 = $lzx;
     $95 = (($94) + 40|0);
     HEAP32[$95>>2] = $93;
     $96 = $lzx;
     $97 = (($96) + 64|0);
     HEAP32[$97>>2] = 0;
     $98 = $lzx;
     $99 = (($98) + 68|0);
     HEAP32[$99>>2] = 0;
     $100 = $lzx;
     $101 = (($100) + 72|0);
     HEAP8[$101] = 0;
     $102 = $lzx;
     $103 = (($102) + 80|0);
     HEAP32[$103>>2] = 0;
     $104 = $4;
     $105 = ($104|0)==(21);
     if ($105) {
      $111 = 50;
     } else {
      $106 = $4;
      $107 = ($106|0)==(20);
      if ($107) {
       $139 = 42;
      } else {
       $108 = $4;
       $109 = $108 << 1;
       $139 = $109;
      }
      $111 = $139;
     }
     $110 = $111&255;
     $112 = $lzx;
     $113 = (($112) + 75|0);
     HEAP8[$113] = $110;
     $114 = $lzx;
     $115 = (($114) + 21811|0);
     $116 = $lzx;
     $117 = (($116) + 100|0);
     HEAP32[$117>>2] = $115;
     $118 = $lzx;
     $119 = (($118) + 96|0);
     HEAP32[$119>>2] = $115;
     $120 = $lzx;
     _lzxd_reset_state($120);
     $121 = $lzx;
     $122 = (($121) + 84|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = $lzx;
     $125 = (($124) + 88|0);
     HEAP32[$125>>2] = $123;
     $126 = $lzx;
     $127 = (($126) + 84|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $lzx;
     $130 = (($129) + 92|0);
     HEAP32[$130>>2] = $128;
     $131 = $lzx;
     $132 = (($131) + 104|0);
     HEAP32[$132>>2] = 0;
     $133 = $lzx;
     $134 = (($133) + 108|0);
     HEAP32[$134>>2] = 0;
     $135 = $lzx;
     $136 = (($135) + 76|0);
     HEAP8[$136] = 0;
     $137 = $lzx;
     $0 = $137;
     $138 = $0;
     STACKTOP = sp;return ($138|0);
    }
   }
   $51 = $1;
   $52 = (($51) + 32|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $lzx;
   $55 = (($54) + 20|0);
   $56 = HEAP32[$55>>2]|0;
   FUNCTION_TABLE_vi[$53 & 3]($56);
   $57 = $1;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $lzx;
   $61 = (($60) + 84|0);
   $62 = HEAP32[$61>>2]|0;
   FUNCTION_TABLE_vi[$59 & 3]($62);
   $63 = $1;
   $64 = (($63) + 32|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $lzx;
   FUNCTION_TABLE_vi[$65 & 3]($66);
   $0 = 0;
   $138 = $0;
   STACKTOP = sp;return ($138|0);
  }
 }
 $0 = 0;
 $138 = $0;
 STACKTOP = sp;return ($138|0);
}
function _lzxd_reset_state($lzx) {
 $lzx = $lzx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $lzx;
 $1 = $0;
 $2 = (($1) + 44|0);
 HEAP32[$2>>2] = 1;
 $3 = $0;
 $4 = (($3) + 48|0);
 HEAP32[$4>>2] = 1;
 $5 = $0;
 $6 = (($5) + 52|0);
 HEAP32[$6>>2] = 1;
 $7 = $0;
 $8 = (($7) + 74|0);
 HEAP8[$8] = 0;
 $9 = $0;
 $10 = (($9) + 60|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = (($11) + 73|0);
 HEAP8[$12] = 0;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(656);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $0;
  $17 = (($16) + 200|0);
  $18 = (($17) + ($15)|0);
  HEAP8[$18] = 0;
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
 }
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = ($21|0)<(250);
  if (!($22)) {
   break;
  }
  $23 = $i;
  $24 = $0;
  $25 = (($24) + 920|0);
  $26 = (($25) + ($23)|0);
  HEAP8[$26] = 0;
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 STACKTOP = sp;return;
}
function _lzxd_set_output_length($lzx,$out_bytes) {
 $lzx = $lzx|0;
 $out_bytes = $out_bytes|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $lzx;
 $1 = $out_bytes;
 $2 = $0;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = $0;
 $6 = (($5) + 16|0);
 HEAP32[$6>>2] = $4;
 STACKTOP = sp;return;
}
function _lzxd_decompress($lzx,$out_bytes) {
 $lzx = $lzx|0;
 $out_bytes = $out_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $R0 = 0, $R1 = 0, $R2 = 0, $abs_off = 0, $aligned_bits = 0, $b0 = 0, $b01 = 0, $b011 = 0, $b013 = 0, $b015 = 0, $b017 = 0, $b019 = 0, $b021 = 0, $b023 = 0, $b025 = 0, $b027 = 0, $b029 = 0, $b03 = 0;
 var $b031 = 0, $b033 = 0, $b05 = 0, $b07 = 0, $b09 = 0, $b1 = 0, $b110 = 0, $b112 = 0, $b114 = 0, $b116 = 0, $b118 = 0, $b12 = 0, $b120 = 0, $b122 = 0, $b124 = 0, $b126 = 0, $b128 = 0, $b130 = 0, $b132 = 0, $b134 = 0;
 var $b14 = 0, $b16 = 0, $b18 = 0, $bit_buffer = 0, $bits_left = 0, $buf = 0, $bytes_todo = 0, $curpos = 0, $data = 0, $dataend = 0, $end_frame = 0, $extra = 0, $filesize = 0, $frame_size = 0, $i = 0, $i_end = 0, $i_ptr = 0, $j = 0, $length_footer = 0, $main_element = 0;
 var $match_length = 0, $match_offset = 0, $rel_off = 0, $rundest = 0, $runsrc = 0, $sym = 0, $this_run = 0, $verbatim_bits = 0, $window = 0, $window_posn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $buf = sp + 160|0;
 $1 = $lzx;
 $2 = $out_bytes;
 $i = 0;
 $frame_size = 0;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = ($5|0)<(0);
  if (!($6)) {
   $7 = $1;
   $8 = (($7) + 80|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = (($11) + 80|0);
    $13 = HEAP32[$12>>2]|0;
    $0 = $13;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   $14 = $1;
   $15 = (($14) + 100|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 96|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $16;
   $21 = $19;
   $22 = (($20) - ($21))|0;
   $i = $22;
   $23 = $i;
   $24 = $2;
   $25 = ($23|0)>($24|0);
   if ($25) {
    $26 = $2;
    $i = $26;
   }
   $27 = $i;
   $28 = ($27|0)!=(0);
   do {
    if ($28) {
     $29 = $1;
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $1;
     $34 = (($33) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $1;
     $37 = (($36) + 96|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $i;
     $40 = (FUNCTION_TABLE_iiii[$32 & 15]($35,$38,$39)|0);
     $41 = $i;
     $42 = ($40|0)!=($41|0);
     if (!($42)) {
      $45 = $i;
      $46 = $1;
      $47 = (($46) + 96|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($48) + ($45)|0);
      HEAP32[$47>>2] = $49;
      $50 = $i;
      $51 = $1;
      $52 = (($51) + 12|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($53) + ($50))|0;
      HEAP32[$52>>2] = $54;
      $55 = $i;
      $56 = $2;
      $57 = (($56) - ($55))|0;
      $2 = $57;
      break;
     }
     $43 = $1;
     $44 = (($43) + 80|0);
     HEAP32[$44>>2] = 4;
     $0 = 4;
     $2341 = $0;
     STACKTOP = sp;return ($2341|0);
    }
   } while(0);
   $58 = $2;
   $59 = ($58|0)==(0);
   if ($59) {
    $0 = 0;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   $60 = $1;
   $61 = (($60) + 88|0);
   $62 = HEAP32[$61>>2]|0;
   $i_ptr = $62;
   $63 = $1;
   $64 = (($63) + 92|0);
   $65 = HEAP32[$64>>2]|0;
   $i_end = $65;
   $66 = $1;
   $67 = (($66) + 104|0);
   $68 = HEAP32[$67>>2]|0;
   $bit_buffer = $68;
   $69 = $1;
   $70 = (($69) + 108|0);
   $71 = HEAP32[$70>>2]|0;
   $bits_left = $71;
   $72 = $1;
   $73 = (($72) + 20|0);
   $74 = HEAP32[$73>>2]|0;
   $window = $74;
   $75 = $1;
   $76 = (($75) + 28|0);
   $77 = HEAP32[$76>>2]|0;
   $window_posn = $77;
   $78 = $1;
   $79 = (($78) + 44|0);
   $80 = HEAP32[$79>>2]|0;
   $R0 = $80;
   $81 = $1;
   $82 = (($81) + 48|0);
   $83 = HEAP32[$82>>2]|0;
   $R1 = $83;
   $84 = $1;
   $85 = (($84) + 52|0);
   $86 = HEAP32[$85>>2]|0;
   $R2 = $86;
   $87 = $1;
   $88 = (($87) + 12|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $2;
   $91 = (($89) + ($90))|0;
   $92 = (($91|0) / 32768)&-1;
   $93 = (($92) + 1)|0;
   $end_frame = $93;
   L24: while(1) {
    $94 = $1;
    $95 = (($94) + 36|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $end_frame;
    $98 = ($96>>>0)<($97>>>0);
    if (!($98)) {
     label = 671;
     break;
    }
    $99 = $1;
    $100 = (($99) + 40|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)!=(0);
    if ($102) {
     $103 = $1;
     $104 = (($103) + 36|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = $1;
     $107 = (($106) + 40|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (($105>>>0) % ($108>>>0))&-1;
     $110 = ($109|0)==(0);
     if ($110) {
      $111 = $1;
      $112 = (($111) + 60|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)!=(0);
      if ($114) {
       label = 21;
       break;
      }
      $117 = $1;
      _lzxd_reset_state($117);
      $118 = $1;
      $119 = (($118) + 44|0);
      $120 = HEAP32[$119>>2]|0;
      $R0 = $120;
      $121 = $1;
      $122 = (($121) + 48|0);
      $123 = HEAP32[$122>>2]|0;
      $R1 = $123;
      $124 = $1;
      $125 = (($124) + 52|0);
      $126 = HEAP32[$125>>2]|0;
      $R2 = $126;
     }
    }
    $127 = $1;
    $128 = (($127) + 74|0);
    $129 = HEAP8[$128]|0;
    $130 = ($129<<24>>24)!=(0);
    if (!($130)) {
     $j = 0;
     while(1) {
      $131 = $bits_left;
      $132 = ($131|0)<(1);
      if (!($132)) {
       break;
      }
      $133 = $i_ptr;
      $134 = $i_end;
      $135 = ($133>>>0)>=($134>>>0);
      if ($135) {
       $136 = $1;
       $137 = (_read_input($136)|0);
       $138 = ($137|0)!=(0);
       if ($138) {
        label = 32;
        break L24;
       }
       $142 = $1;
       $143 = (($142) + 88|0);
       $144 = HEAP32[$143>>2]|0;
       $i_ptr = $144;
       $145 = $1;
       $146 = (($145) + 92|0);
       $147 = HEAP32[$146>>2]|0;
       $i_end = $147;
      }
      $148 = $i_ptr;
      $149 = (($148) + 1|0);
      $i_ptr = $149;
      $150 = HEAP8[$148]|0;
      $b0 = $150;
      $151 = $i_ptr;
      $152 = $i_end;
      $153 = ($151>>>0)>=($152>>>0);
      if ($153) {
       $154 = $1;
       $155 = (_read_input($154)|0);
       $156 = ($155|0)!=(0);
       if ($156) {
        label = 38;
        break L24;
       }
       $160 = $1;
       $161 = (($160) + 88|0);
       $162 = HEAP32[$161>>2]|0;
       $i_ptr = $162;
       $163 = $1;
       $164 = (($163) + 92|0);
       $165 = HEAP32[$164>>2]|0;
       $i_end = $165;
      }
      $166 = $i_ptr;
      $167 = (($166) + 1|0);
      $i_ptr = $167;
      $168 = HEAP8[$166]|0;
      $b1 = $168;
      $169 = $b1;
      $170 = $169&255;
      $171 = $170 << 8;
      $172 = $b0;
      $173 = $172&255;
      $174 = $171 | $173;
      $175 = $bits_left;
      $176 = (16 - ($175))|0;
      $177 = $174 << $176;
      $178 = $bit_buffer;
      $179 = $178 | $177;
      $bit_buffer = $179;
      $180 = $bits_left;
      $181 = (($180) + 16)|0;
      $bits_left = $181;
     }
     $182 = $bit_buffer;
     $183 = $182 >>> 31;
     $i = $183;
     $184 = $bit_buffer;
     $185 = $184 << 1;
     $bit_buffer = $185;
     $186 = $bits_left;
     $187 = (($186) - 1)|0;
     $bits_left = $187;
     $188 = $i;
     $189 = ($188|0)!=(0);
     if ($189) {
      while(1) {
       $190 = $bits_left;
       $191 = ($190|0)<(16);
       if (!($191)) {
        break;
       }
       $192 = $i_ptr;
       $193 = $i_end;
       $194 = ($192>>>0)>=($193>>>0);
       if ($194) {
        $195 = $1;
        $196 = (_read_input($195)|0);
        $197 = ($196|0)!=(0);
        if ($197) {
         label = 54;
         break L24;
        }
        $201 = $1;
        $202 = (($201) + 88|0);
        $203 = HEAP32[$202>>2]|0;
        $i_ptr = $203;
        $204 = $1;
        $205 = (($204) + 92|0);
        $206 = HEAP32[$205>>2]|0;
        $i_end = $206;
       }
       $207 = $i_ptr;
       $208 = (($207) + 1|0);
       $i_ptr = $208;
       $209 = HEAP8[$207]|0;
       $b01 = $209;
       $210 = $i_ptr;
       $211 = $i_end;
       $212 = ($210>>>0)>=($211>>>0);
       if ($212) {
        $213 = $1;
        $214 = (_read_input($213)|0);
        $215 = ($214|0)!=(0);
        if ($215) {
         label = 60;
         break L24;
        }
        $219 = $1;
        $220 = (($219) + 88|0);
        $221 = HEAP32[$220>>2]|0;
        $i_ptr = $221;
        $222 = $1;
        $223 = (($222) + 92|0);
        $224 = HEAP32[$223>>2]|0;
        $i_end = $224;
       }
       $225 = $i_ptr;
       $226 = (($225) + 1|0);
       $i_ptr = $226;
       $227 = HEAP8[$225]|0;
       $b12 = $227;
       $228 = $b12;
       $229 = $228&255;
       $230 = $229 << 8;
       $231 = $b01;
       $232 = $231&255;
       $233 = $230 | $232;
       $234 = $bits_left;
       $235 = (16 - ($234))|0;
       $236 = $233 << $235;
       $237 = $bit_buffer;
       $238 = $237 | $236;
       $bit_buffer = $238;
       $239 = $bits_left;
       $240 = (($239) + 16)|0;
       $bits_left = $240;
      }
      $241 = $bit_buffer;
      $242 = $241 >>> 16;
      $i = $242;
      $243 = $bit_buffer;
      $244 = $243 << 16;
      $bit_buffer = $244;
      $245 = $bits_left;
      $246 = (($245) - 16)|0;
      $bits_left = $246;
      while(1) {
       $247 = $bits_left;
       $248 = ($247|0)<(16);
       if (!($248)) {
        break;
       }
       $249 = $i_ptr;
       $250 = $i_end;
       $251 = ($249>>>0)>=($250>>>0);
       if ($251) {
        $252 = $1;
        $253 = (_read_input($252)|0);
        $254 = ($253|0)!=(0);
        if ($254) {
         label = 75;
         break L24;
        }
        $258 = $1;
        $259 = (($258) + 88|0);
        $260 = HEAP32[$259>>2]|0;
        $i_ptr = $260;
        $261 = $1;
        $262 = (($261) + 92|0);
        $263 = HEAP32[$262>>2]|0;
        $i_end = $263;
       }
       $264 = $i_ptr;
       $265 = (($264) + 1|0);
       $i_ptr = $265;
       $266 = HEAP8[$264]|0;
       $b03 = $266;
       $267 = $i_ptr;
       $268 = $i_end;
       $269 = ($267>>>0)>=($268>>>0);
       if ($269) {
        $270 = $1;
        $271 = (_read_input($270)|0);
        $272 = ($271|0)!=(0);
        if ($272) {
         label = 81;
         break L24;
        }
        $276 = $1;
        $277 = (($276) + 88|0);
        $278 = HEAP32[$277>>2]|0;
        $i_ptr = $278;
        $279 = $1;
        $280 = (($279) + 92|0);
        $281 = HEAP32[$280>>2]|0;
        $i_end = $281;
       }
       $282 = $i_ptr;
       $283 = (($282) + 1|0);
       $i_ptr = $283;
       $284 = HEAP8[$282]|0;
       $b14 = $284;
       $285 = $b14;
       $286 = $285&255;
       $287 = $286 << 8;
       $288 = $b03;
       $289 = $288&255;
       $290 = $287 | $289;
       $291 = $bits_left;
       $292 = (16 - ($291))|0;
       $293 = $290 << $292;
       $294 = $bit_buffer;
       $295 = $294 | $293;
       $bit_buffer = $295;
       $296 = $bits_left;
       $297 = (($296) + 16)|0;
       $bits_left = $297;
      }
      $298 = $bit_buffer;
      $299 = $298 >>> 16;
      $j = $299;
      $300 = $bit_buffer;
      $301 = $300 << 16;
      $bit_buffer = $301;
      $302 = $bits_left;
      $303 = (($302) - 16)|0;
      $bits_left = $303;
     }
     $304 = $i;
     $305 = $304 << 16;
     $306 = $j;
     $307 = $305 | $306;
     $308 = $1;
     $309 = (($308) + 64|0);
     HEAP32[$309>>2] = $307;
     $310 = $1;
     $311 = (($310) + 74|0);
     HEAP8[$311] = 1;
    }
    $frame_size = 32768;
    $312 = $1;
    $313 = (($312) + 16|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = ($314|0)!=(0);
    if ($315) {
     $316 = $1;
     $317 = (($316) + 16|0);
     $318 = HEAP32[$317>>2]|0;
     $319 = $1;
     $320 = (($319) + 12|0);
     $321 = HEAP32[$320>>2]|0;
     $322 = (($318) - ($321))|0;
     $323 = $frame_size;
     $324 = ($322|0)<($323|0);
     if ($324) {
      $325 = $1;
      $326 = (($325) + 16|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = $1;
      $329 = (($328) + 12|0);
      $330 = HEAP32[$329>>2]|0;
      $331 = (($327) - ($330))|0;
      $frame_size = $331;
     }
    }
    $332 = $1;
    $333 = (($332) + 32|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = $frame_size;
    $336 = (($334) + ($335))|0;
    $337 = $window_posn;
    $338 = (($336) - ($337))|0;
    $bytes_todo = $338;
    while(1) {
     $339 = $bytes_todo;
     $340 = ($339|0)>(0);
     if (!($340)) {
      break;
     }
     $341 = $1;
     $342 = (($341) + 60|0);
     $343 = HEAP32[$342>>2]|0;
     $344 = ($343|0)==(0);
     if ($344) {
      $345 = $1;
      $346 = (($345) + 73|0);
      $347 = HEAP8[$346]|0;
      $348 = $347&255;
      $349 = ($348|0)==(3);
      if ($349) {
       $350 = $1;
       $351 = (($350) + 56|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = $352 & 1;
       $354 = ($353|0)!=(0);
       if ($354) {
        $355 = $i_ptr;
        $356 = $i_end;
        $357 = ($355>>>0)>=($356>>>0);
        if ($357) {
         $358 = $1;
         $359 = (_read_input($358)|0);
         $360 = ($359|0)!=(0);
         if ($360) {
          label = 101;
          break L24;
         }
         $364 = $1;
         $365 = (($364) + 88|0);
         $366 = HEAP32[$365>>2]|0;
         $i_ptr = $366;
         $367 = $1;
         $368 = (($367) + 92|0);
         $369 = HEAP32[$368>>2]|0;
         $i_end = $369;
        }
        $370 = $i_ptr;
        $371 = (($370) + 1|0);
        $i_ptr = $371;
       }
      }
      while(1) {
       $372 = $bits_left;
       $373 = ($372|0)<(3);
       if (!($373)) {
        break;
       }
       $374 = $i_ptr;
       $375 = $i_end;
       $376 = ($374>>>0)>=($375>>>0);
       if ($376) {
        $377 = $1;
        $378 = (_read_input($377)|0);
        $379 = ($378|0)!=(0);
        if ($379) {
         label = 113;
         break L24;
        }
        $383 = $1;
        $384 = (($383) + 88|0);
        $385 = HEAP32[$384>>2]|0;
        $i_ptr = $385;
        $386 = $1;
        $387 = (($386) + 92|0);
        $388 = HEAP32[$387>>2]|0;
        $i_end = $388;
       }
       $389 = $i_ptr;
       $390 = (($389) + 1|0);
       $i_ptr = $390;
       $391 = HEAP8[$389]|0;
       $b05 = $391;
       $392 = $i_ptr;
       $393 = $i_end;
       $394 = ($392>>>0)>=($393>>>0);
       if ($394) {
        $395 = $1;
        $396 = (_read_input($395)|0);
        $397 = ($396|0)!=(0);
        if ($397) {
         label = 119;
         break L24;
        }
        $401 = $1;
        $402 = (($401) + 88|0);
        $403 = HEAP32[$402>>2]|0;
        $i_ptr = $403;
        $404 = $1;
        $405 = (($404) + 92|0);
        $406 = HEAP32[$405>>2]|0;
        $i_end = $406;
       }
       $407 = $i_ptr;
       $408 = (($407) + 1|0);
       $i_ptr = $408;
       $409 = HEAP8[$407]|0;
       $b16 = $409;
       $410 = $b16;
       $411 = $410&255;
       $412 = $411 << 8;
       $413 = $b05;
       $414 = $413&255;
       $415 = $412 | $414;
       $416 = $bits_left;
       $417 = (16 - ($416))|0;
       $418 = $415 << $417;
       $419 = $bit_buffer;
       $420 = $419 | $418;
       $bit_buffer = $420;
       $421 = $bits_left;
       $422 = (($421) + 16)|0;
       $bits_left = $422;
      }
      $423 = $bit_buffer;
      $424 = $423 >>> 29;
      $425 = $424&255;
      $426 = $1;
      $427 = (($426) + 73|0);
      HEAP8[$427] = $425;
      $428 = $bit_buffer;
      $429 = $428 << 3;
      $bit_buffer = $429;
      $430 = $bits_left;
      $431 = (($430) - 3)|0;
      $bits_left = $431;
      while(1) {
       $432 = $bits_left;
       $433 = ($432|0)<(16);
       if (!($433)) {
        break;
       }
       $434 = $i_ptr;
       $435 = $i_end;
       $436 = ($434>>>0)>=($435>>>0);
       if ($436) {
        $437 = $1;
        $438 = (_read_input($437)|0);
        $439 = ($438|0)!=(0);
        if ($439) {
         label = 134;
         break L24;
        }
        $443 = $1;
        $444 = (($443) + 88|0);
        $445 = HEAP32[$444>>2]|0;
        $i_ptr = $445;
        $446 = $1;
        $447 = (($446) + 92|0);
        $448 = HEAP32[$447>>2]|0;
        $i_end = $448;
       }
       $449 = $i_ptr;
       $450 = (($449) + 1|0);
       $i_ptr = $450;
       $451 = HEAP8[$449]|0;
       $b07 = $451;
       $452 = $i_ptr;
       $453 = $i_end;
       $454 = ($452>>>0)>=($453>>>0);
       if ($454) {
        $455 = $1;
        $456 = (_read_input($455)|0);
        $457 = ($456|0)!=(0);
        if ($457) {
         label = 140;
         break L24;
        }
        $461 = $1;
        $462 = (($461) + 88|0);
        $463 = HEAP32[$462>>2]|0;
        $i_ptr = $463;
        $464 = $1;
        $465 = (($464) + 92|0);
        $466 = HEAP32[$465>>2]|0;
        $i_end = $466;
       }
       $467 = $i_ptr;
       $468 = (($467) + 1|0);
       $i_ptr = $468;
       $469 = HEAP8[$467]|0;
       $b18 = $469;
       $470 = $b18;
       $471 = $470&255;
       $472 = $471 << 8;
       $473 = $b07;
       $474 = $473&255;
       $475 = $472 | $474;
       $476 = $bits_left;
       $477 = (16 - ($476))|0;
       $478 = $475 << $477;
       $479 = $bit_buffer;
       $480 = $479 | $478;
       $bit_buffer = $480;
       $481 = $bits_left;
       $482 = (($481) + 16)|0;
       $bits_left = $482;
      }
      $483 = $bit_buffer;
      $484 = $483 >>> 16;
      $i = $484;
      $485 = $bit_buffer;
      $486 = $485 << 16;
      $bit_buffer = $486;
      $487 = $bits_left;
      $488 = (($487) - 16)|0;
      $bits_left = $488;
      while(1) {
       $489 = $bits_left;
       $490 = ($489|0)<(8);
       if (!($490)) {
        break;
       }
       $491 = $i_ptr;
       $492 = $i_end;
       $493 = ($491>>>0)>=($492>>>0);
       if ($493) {
        $494 = $1;
        $495 = (_read_input($494)|0);
        $496 = ($495|0)!=(0);
        if ($496) {
         label = 155;
         break L24;
        }
        $500 = $1;
        $501 = (($500) + 88|0);
        $502 = HEAP32[$501>>2]|0;
        $i_ptr = $502;
        $503 = $1;
        $504 = (($503) + 92|0);
        $505 = HEAP32[$504>>2]|0;
        $i_end = $505;
       }
       $506 = $i_ptr;
       $507 = (($506) + 1|0);
       $i_ptr = $507;
       $508 = HEAP8[$506]|0;
       $b09 = $508;
       $509 = $i_ptr;
       $510 = $i_end;
       $511 = ($509>>>0)>=($510>>>0);
       if ($511) {
        $512 = $1;
        $513 = (_read_input($512)|0);
        $514 = ($513|0)!=(0);
        if ($514) {
         label = 161;
         break L24;
        }
        $518 = $1;
        $519 = (($518) + 88|0);
        $520 = HEAP32[$519>>2]|0;
        $i_ptr = $520;
        $521 = $1;
        $522 = (($521) + 92|0);
        $523 = HEAP32[$522>>2]|0;
        $i_end = $523;
       }
       $524 = $i_ptr;
       $525 = (($524) + 1|0);
       $i_ptr = $525;
       $526 = HEAP8[$524]|0;
       $b110 = $526;
       $527 = $b110;
       $528 = $527&255;
       $529 = $528 << 8;
       $530 = $b09;
       $531 = $530&255;
       $532 = $529 | $531;
       $533 = $bits_left;
       $534 = (16 - ($533))|0;
       $535 = $532 << $534;
       $536 = $bit_buffer;
       $537 = $536 | $535;
       $bit_buffer = $537;
       $538 = $bits_left;
       $539 = (($538) + 16)|0;
       $bits_left = $539;
      }
      $540 = $bit_buffer;
      $541 = $540 >>> 24;
      $j = $541;
      $542 = $bit_buffer;
      $543 = $542 << 8;
      $bit_buffer = $543;
      $544 = $bits_left;
      $545 = (($544) - 8)|0;
      $bits_left = $545;
      $546 = $i;
      $547 = $546 << 8;
      $548 = $j;
      $549 = $547 | $548;
      $550 = $1;
      $551 = (($550) + 56|0);
      HEAP32[$551>>2] = $549;
      $552 = $1;
      $553 = (($552) + 60|0);
      HEAP32[$553>>2] = $549;
      $554 = $1;
      $555 = (($554) + 73|0);
      $556 = HEAP8[$555]|0;
      $557 = $556&255;
      if ((($557|0) == 2)) {
       $i = 0;
       while(1) {
        $558 = $i;
        $559 = ($558|0)<(8);
        if (!($559)) {
         break;
        }
        while(1) {
         $560 = $bits_left;
         $561 = ($560|0)<(3);
         if (!($561)) {
          break;
         }
         $562 = $i_ptr;
         $563 = $i_end;
         $564 = ($562>>>0)>=($563>>>0);
         if ($564) {
          $565 = $1;
          $566 = (_read_input($565)|0);
          $567 = ($566|0)!=(0);
          if ($567) {
           label = 179;
           break L24;
          }
          $571 = $1;
          $572 = (($571) + 88|0);
          $573 = HEAP32[$572>>2]|0;
          $i_ptr = $573;
          $574 = $1;
          $575 = (($574) + 92|0);
          $576 = HEAP32[$575>>2]|0;
          $i_end = $576;
         }
         $577 = $i_ptr;
         $578 = (($577) + 1|0);
         $i_ptr = $578;
         $579 = HEAP8[$577]|0;
         $b011 = $579;
         $580 = $i_ptr;
         $581 = $i_end;
         $582 = ($580>>>0)>=($581>>>0);
         if ($582) {
          $583 = $1;
          $584 = (_read_input($583)|0);
          $585 = ($584|0)!=(0);
          if ($585) {
           label = 185;
           break L24;
          }
          $589 = $1;
          $590 = (($589) + 88|0);
          $591 = HEAP32[$590>>2]|0;
          $i_ptr = $591;
          $592 = $1;
          $593 = (($592) + 92|0);
          $594 = HEAP32[$593>>2]|0;
          $i_end = $594;
         }
         $595 = $i_ptr;
         $596 = (($595) + 1|0);
         $i_ptr = $596;
         $597 = HEAP8[$595]|0;
         $b112 = $597;
         $598 = $b112;
         $599 = $598&255;
         $600 = $599 << 8;
         $601 = $b011;
         $602 = $601&255;
         $603 = $600 | $602;
         $604 = $bits_left;
         $605 = (16 - ($604))|0;
         $606 = $603 << $605;
         $607 = $bit_buffer;
         $608 = $607 | $606;
         $bit_buffer = $608;
         $609 = $bits_left;
         $610 = (($609) + 16)|0;
         $bits_left = $610;
        }
        $611 = $bit_buffer;
        $612 = $611 >>> 29;
        $j = $612;
        $613 = $bit_buffer;
        $614 = $613 << 3;
        $bit_buffer = $614;
        $615 = $bits_left;
        $616 = (($615) - 3)|0;
        $bits_left = $616;
        $617 = $j;
        $618 = $617&255;
        $619 = $i;
        $620 = $1;
        $621 = (($620) + 1234|0);
        $622 = (($621) + ($619)|0);
        HEAP8[$622] = $618;
        $623 = $i;
        $624 = (($623) + 1)|0;
        $i = $624;
       }
       $625 = $1;
       $626 = (($625) + 1234|0);
       $627 = $1;
       $628 = (($627) + 21522|0);
       $629 = (_make_decode_table(8,7,$626,$628)|0);
       $630 = ($629|0)!=(0);
       if ($630) {
        label = 195;
        break L24;
       }
       label = 197;
      } else if ((($557|0) == 1)) {
       label = 197;
      } else if ((($557|0) == 3)) {
       $774 = $1;
       $775 = (($774) + 72|0);
       HEAP8[$775] = 1;
       while(1) {
        $776 = $bits_left;
        $777 = ($776|0)<(16);
        if (!($777)) {
         break;
        }
        $778 = $i_ptr;
        $779 = $i_end;
        $780 = ($778>>>0)>=($779>>>0);
        if ($780) {
         $781 = $1;
         $782 = (_read_input($781)|0);
         $783 = ($782|0)!=(0);
         if ($783) {
          label = 243;
          break L24;
         }
         $787 = $1;
         $788 = (($787) + 88|0);
         $789 = HEAP32[$788>>2]|0;
         $i_ptr = $789;
         $790 = $1;
         $791 = (($790) + 92|0);
         $792 = HEAP32[$791>>2]|0;
         $i_end = $792;
        }
        $793 = $i_ptr;
        $794 = (($793) + 1|0);
        $i_ptr = $794;
        $795 = HEAP8[$793]|0;
        $b013 = $795;
        $796 = $i_ptr;
        $797 = $i_end;
        $798 = ($796>>>0)>=($797>>>0);
        if ($798) {
         $799 = $1;
         $800 = (_read_input($799)|0);
         $801 = ($800|0)!=(0);
         if ($801) {
          label = 249;
          break L24;
         }
         $805 = $1;
         $806 = (($805) + 88|0);
         $807 = HEAP32[$806>>2]|0;
         $i_ptr = $807;
         $808 = $1;
         $809 = (($808) + 92|0);
         $810 = HEAP32[$809>>2]|0;
         $i_end = $810;
        }
        $811 = $i_ptr;
        $812 = (($811) + 1|0);
        $i_ptr = $812;
        $813 = HEAP8[$811]|0;
        $b114 = $813;
        $814 = $b114;
        $815 = $814&255;
        $816 = $815 << 8;
        $817 = $b013;
        $818 = $817&255;
        $819 = $816 | $818;
        $820 = $bits_left;
        $821 = (16 - ($820))|0;
        $822 = $819 << $821;
        $823 = $bit_buffer;
        $824 = $823 | $822;
        $bit_buffer = $824;
        $825 = $bits_left;
        $826 = (($825) + 16)|0;
        $bits_left = $826;
       }
       $827 = $bits_left;
       $828 = ($827|0)>(16);
       if ($828) {
        $829 = $i_ptr;
        $830 = (($829) + -2|0);
        $i_ptr = $830;
       }
       $bits_left = 0;
       $bit_buffer = 0;
       $rundest = $buf;
       $i = 0;
       while(1) {
        $831 = $i;
        $832 = ($831|0)<(12);
        if (!($832)) {
         break;
        }
        $833 = $i_ptr;
        $834 = $i_end;
        $835 = ($833>>>0)>=($834>>>0);
        if ($835) {
         $836 = $1;
         $837 = (_read_input($836)|0);
         $838 = ($837|0)!=(0);
         if ($838) {
          label = 262;
          break L24;
         }
         $842 = $1;
         $843 = (($842) + 88|0);
         $844 = HEAP32[$843>>2]|0;
         $i_ptr = $844;
         $845 = $1;
         $846 = (($845) + 92|0);
         $847 = HEAP32[$846>>2]|0;
         $i_end = $847;
        }
        $848 = $i_ptr;
        $849 = (($848) + 1|0);
        $i_ptr = $849;
        $850 = HEAP8[$848]|0;
        $851 = $rundest;
        $852 = (($851) + 1|0);
        $rundest = $852;
        HEAP8[$851] = $850;
        $853 = $i;
        $854 = (($853) + 1)|0;
        $i = $854;
       }
       $855 = HEAP8[$buf]|0;
       $856 = $855&255;
       $857 = (($buf) + 1|0);
       $858 = HEAP8[$857]|0;
       $859 = $858&255;
       $860 = $859 << 8;
       $861 = $856 | $860;
       $862 = (($buf) + 2|0);
       $863 = HEAP8[$862]|0;
       $864 = $863&255;
       $865 = $864 << 16;
       $866 = $861 | $865;
       $867 = (($buf) + 3|0);
       $868 = HEAP8[$867]|0;
       $869 = $868&255;
       $870 = $869 << 24;
       $871 = $866 | $870;
       $R0 = $871;
       $872 = (($buf) + 4|0);
       $873 = HEAP8[$872]|0;
       $874 = $873&255;
       $875 = (($buf) + 5|0);
       $876 = HEAP8[$875]|0;
       $877 = $876&255;
       $878 = $877 << 8;
       $879 = $874 | $878;
       $880 = (($buf) + 6|0);
       $881 = HEAP8[$880]|0;
       $882 = $881&255;
       $883 = $882 << 16;
       $884 = $879 | $883;
       $885 = (($buf) + 7|0);
       $886 = HEAP8[$885]|0;
       $887 = $886&255;
       $888 = $887 << 24;
       $889 = $884 | $888;
       $R1 = $889;
       $890 = (($buf) + 8|0);
       $891 = HEAP8[$890]|0;
       $892 = $891&255;
       $893 = (($buf) + 9|0);
       $894 = HEAP8[$893]|0;
       $895 = $894&255;
       $896 = $895 << 8;
       $897 = $892 | $896;
       $898 = (($buf) + 10|0);
       $899 = HEAP8[$898]|0;
       $900 = $899&255;
       $901 = $900 << 16;
       $902 = $897 | $901;
       $903 = (($buf) + 11|0);
       $904 = HEAP8[$903]|0;
       $905 = $904&255;
       $906 = $905 << 24;
       $907 = $902 | $906;
       $R2 = $907;
      } else {
       label = 268;
       break L24;
      }
      if ((label|0) == 197) {
       label = 0;
       $633 = $i_ptr;
       $634 = $1;
       $635 = (($634) + 88|0);
       HEAP32[$635>>2] = $633;
       $636 = $i_end;
       $637 = $1;
       $638 = (($637) + 92|0);
       HEAP32[$638>>2] = $636;
       $639 = $bit_buffer;
       $640 = $1;
       $641 = (($640) + 104|0);
       HEAP32[$641>>2] = $639;
       $642 = $bits_left;
       $643 = $1;
       $644 = (($643) + 108|0);
       HEAP32[$644>>2] = $642;
       $645 = $1;
       $646 = $1;
       $647 = (($646) + 200|0);
       $648 = (_lzxd_read_lens($645,$647,0,256)|0);
       $649 = ($648|0)!=(0);
       if ($649) {
        label = 201;
        break L24;
       }
       $653 = $1;
       $654 = (($653) + 88|0);
       $655 = HEAP32[$654>>2]|0;
       $i_ptr = $655;
       $656 = $1;
       $657 = (($656) + 92|0);
       $658 = HEAP32[$657>>2]|0;
       $i_end = $658;
       $659 = $1;
       $660 = (($659) + 104|0);
       $661 = HEAP32[$660>>2]|0;
       $bit_buffer = $661;
       $662 = $1;
       $663 = (($662) + 108|0);
       $664 = HEAP32[$663>>2]|0;
       $bits_left = $664;
       $665 = $i_ptr;
       $666 = $1;
       $667 = (($666) + 88|0);
       HEAP32[$667>>2] = $665;
       $668 = $i_end;
       $669 = $1;
       $670 = (($669) + 92|0);
       HEAP32[$670>>2] = $668;
       $671 = $bit_buffer;
       $672 = $1;
       $673 = (($672) + 104|0);
       HEAP32[$673>>2] = $671;
       $674 = $bits_left;
       $675 = $1;
       $676 = (($675) + 108|0);
       HEAP32[$676>>2] = $674;
       $677 = $1;
       $678 = $1;
       $679 = (($678) + 200|0);
       $680 = $1;
       $681 = (($680) + 75|0);
       $682 = HEAP8[$681]|0;
       $683 = $682&255;
       $684 = $683 << 3;
       $685 = (256 + ($684))|0;
       $686 = (_lzxd_read_lens($677,$679,256,$685)|0);
       $687 = ($686|0)!=(0);
       if ($687) {
        label = 209;
        break L24;
       }
       $691 = $1;
       $692 = (($691) + 88|0);
       $693 = HEAP32[$692>>2]|0;
       $i_ptr = $693;
       $694 = $1;
       $695 = (($694) + 92|0);
       $696 = HEAP32[$695>>2]|0;
       $i_end = $696;
       $697 = $1;
       $698 = (($697) + 104|0);
       $699 = HEAP32[$698>>2]|0;
       $bit_buffer = $699;
       $700 = $1;
       $701 = (($700) + 108|0);
       $702 = HEAP32[$701>>2]|0;
       $bits_left = $702;
       $703 = $1;
       $704 = (($703) + 200|0);
       $705 = $1;
       $706 = (($705) + 1514|0);
       $707 = (_make_decode_table(656,12,$704,$706)|0);
       $708 = ($707|0)!=(0);
       if ($708) {
        label = 214;
        break L24;
       }
       $711 = $1;
       $712 = (($711) + 200|0);
       $713 = (($712) + 232|0);
       $714 = HEAP8[$713]|0;
       $715 = $714&255;
       $716 = ($715|0)!=(0);
       if ($716) {
        $717 = $1;
        $718 = (($717) + 72|0);
        HEAP8[$718] = 1;
       }
       $719 = $i_ptr;
       $720 = $1;
       $721 = (($720) + 88|0);
       HEAP32[$721>>2] = $719;
       $722 = $i_end;
       $723 = $1;
       $724 = (($723) + 92|0);
       HEAP32[$724>>2] = $722;
       $725 = $bit_buffer;
       $726 = $1;
       $727 = (($726) + 104|0);
       HEAP32[$727>>2] = $725;
       $728 = $bits_left;
       $729 = $1;
       $730 = (($729) + 108|0);
       HEAP32[$730>>2] = $728;
       $731 = $1;
       $732 = $1;
       $733 = (($732) + 920|0);
       $734 = (_lzxd_read_lens($731,$733,0,249)|0);
       $735 = ($734|0)!=(0);
       if ($735) {
        label = 221;
        break L24;
       }
       $739 = $1;
       $740 = (($739) + 88|0);
       $741 = HEAP32[$740>>2]|0;
       $i_ptr = $741;
       $742 = $1;
       $743 = (($742) + 92|0);
       $744 = HEAP32[$743>>2]|0;
       $i_end = $744;
       $745 = $1;
       $746 = (($745) + 104|0);
       $747 = HEAP32[$746>>2]|0;
       $bit_buffer = $747;
       $748 = $1;
       $749 = (($748) + 108|0);
       $750 = HEAP32[$749>>2]|0;
       $bits_left = $750;
       $751 = $1;
       $752 = (($751) + 21810|0);
       HEAP8[$752] = 0;
       $753 = $1;
       $754 = (($753) + 920|0);
       $755 = $1;
       $756 = (($755) + 12330|0);
       $757 = (_make_decode_table(250,12,$754,$756)|0);
       $758 = ($757|0)!=(0);
       if ($758) {
        $i = 0;
        while(1) {
         $759 = $i;
         $760 = ($759|0)<(250);
         if (!($760)) {
          break;
         }
         $761 = $i;
         $762 = $1;
         $763 = (($762) + 920|0);
         $764 = (($763) + ($761)|0);
         $765 = HEAP8[$764]|0;
         $766 = $765&255;
         $767 = ($766|0)>(0);
         if ($767) {
          label = 230;
          break L24;
         }
         $770 = $i;
         $771 = (($770) + 1)|0;
         $i = $771;
        }
        $772 = $1;
        $773 = (($772) + 21810|0);
        HEAP8[$773] = 1;
       }
      }
     }
     $910 = $1;
     $911 = (($910) + 60|0);
     $912 = HEAP32[$911>>2]|0;
     $this_run = $912;
     $913 = $this_run;
     $914 = $bytes_todo;
     $915 = ($913|0)>($914|0);
     if ($915) {
      $916 = $bytes_todo;
      $this_run = $916;
     }
     $917 = $this_run;
     $918 = $bytes_todo;
     $919 = (($918) - ($917))|0;
     $bytes_todo = $919;
     $920 = $this_run;
     $921 = $1;
     $922 = (($921) + 60|0);
     $923 = HEAP32[$922>>2]|0;
     $924 = (($923) - ($920))|0;
     HEAP32[$922>>2] = $924;
     $925 = $1;
     $926 = (($925) + 73|0);
     $927 = HEAP8[$926]|0;
     $928 = $927&255;
     if ((($928|0) == 1)) {
      while(1) {
       $929 = $this_run;
       $930 = ($929|0)>(0);
       if (!($930)) {
        break;
       }
       while(1) {
        $931 = $bits_left;
        $932 = ($931|0)<(16);
        if (!($932)) {
         break;
        }
        $933 = $i_ptr;
        $934 = $i_end;
        $935 = ($933>>>0)>=($934>>>0);
        if ($935) {
         $936 = $1;
         $937 = (_read_input($936)|0);
         $938 = ($937|0)!=(0);
         if ($938) {
          label = 283;
          break L24;
         }
         $942 = $1;
         $943 = (($942) + 88|0);
         $944 = HEAP32[$943>>2]|0;
         $i_ptr = $944;
         $945 = $1;
         $946 = (($945) + 92|0);
         $947 = HEAP32[$946>>2]|0;
         $i_end = $947;
        }
        $948 = $i_ptr;
        $949 = (($948) + 1|0);
        $i_ptr = $949;
        $950 = HEAP8[$948]|0;
        $b015 = $950;
        $951 = $i_ptr;
        $952 = $i_end;
        $953 = ($951>>>0)>=($952>>>0);
        if ($953) {
         $954 = $1;
         $955 = (_read_input($954)|0);
         $956 = ($955|0)!=(0);
         if ($956) {
          label = 289;
          break L24;
         }
         $960 = $1;
         $961 = (($960) + 88|0);
         $962 = HEAP32[$961>>2]|0;
         $i_ptr = $962;
         $963 = $1;
         $964 = (($963) + 92|0);
         $965 = HEAP32[$964>>2]|0;
         $i_end = $965;
        }
        $966 = $i_ptr;
        $967 = (($966) + 1|0);
        $i_ptr = $967;
        $968 = HEAP8[$966]|0;
        $b116 = $968;
        $969 = $b116;
        $970 = $969&255;
        $971 = $970 << 8;
        $972 = $b015;
        $973 = $972&255;
        $974 = $971 | $973;
        $975 = $bits_left;
        $976 = (16 - ($975))|0;
        $977 = $974 << $976;
        $978 = $bit_buffer;
        $979 = $978 | $977;
        $bit_buffer = $979;
        $980 = $bits_left;
        $981 = (($980) + 16)|0;
        $bits_left = $981;
       }
       $982 = $bit_buffer;
       $983 = $982 >>> 20;
       $984 = $1;
       $985 = (($984) + 1514|0);
       $986 = (($985) + ($983<<1)|0);
       $987 = HEAP16[$986>>1]|0;
       $sym = $987;
       $988 = $sym;
       $989 = $988&65535;
       $990 = ($989|0)>=(656);
       if ($990) {
        $i = 1048576;
        while(1) {
         $991 = $i;
         $992 = $991 >> 1;
         $i = $992;
         $993 = ($992|0)==(0);
         if ($993) {
          label = 299;
          break L24;
         }
         $996 = $sym;
         $997 = $996&65535;
         $998 = $997 << 1;
         $999 = $bit_buffer;
         $1000 = $i;
         $1001 = $999 & $1000;
         $1002 = ($1001|0)!=(0);
         $1003 = $1002 ? 1 : 0;
         $1004 = $998 | $1003;
         $1005 = $1;
         $1006 = (($1005) + 1514|0);
         $1007 = (($1006) + ($1004<<1)|0);
         $1008 = HEAP16[$1007>>1]|0;
         $sym = $1008;
         $1009 = $sym;
         $1010 = $1009&65535;
         $1011 = ($1010|0)>=(656);
         if (!($1011)) {
          break;
         }
        }
       }
       $1012 = $sym;
       $1013 = $1012&65535;
       $main_element = $1013;
       $1014 = $sym;
       $1015 = $1014&65535;
       $1016 = $1;
       $1017 = (($1016) + 200|0);
       $1018 = (($1017) + ($1015)|0);
       $1019 = HEAP8[$1018]|0;
       $1020 = $1019&255;
       $i = $1020;
       $1021 = $i;
       $1022 = $bit_buffer;
       $1023 = $1022 << $1021;
       $bit_buffer = $1023;
       $1024 = $i;
       $1025 = $bits_left;
       $1026 = (($1025) - ($1024))|0;
       $bits_left = $1026;
       $1027 = $main_element;
       $1028 = ($1027|0)<(256);
       if ($1028) {
        $1029 = $main_element;
        $1030 = $1029&255;
        $1031 = $window_posn;
        $1032 = (($1031) + 1)|0;
        $window_posn = $1032;
        $1033 = $window;
        $1034 = (($1033) + ($1031)|0);
        HEAP8[$1034] = $1030;
        $1035 = $this_run;
        $1036 = (($1035) + -1)|0;
        $this_run = $1036;
       } else {
        $1037 = $main_element;
        $1038 = (($1037) - 256)|0;
        $main_element = $1038;
        $1039 = $main_element;
        $1040 = $1039 & 7;
        $match_length = $1040;
        $1041 = $match_length;
        $1042 = ($1041|0)==(7);
        if ($1042) {
         $1043 = $1;
         $1044 = (($1043) + 21810|0);
         $1045 = HEAP8[$1044]|0;
         $1046 = ($1045<<24>>24)!=(0);
         if ($1046) {
          label = 309;
          break L24;
         }
         while(1) {
          $1049 = $bits_left;
          $1050 = ($1049|0)<(16);
          if (!($1050)) {
           break;
          }
          $1051 = $i_ptr;
          $1052 = $i_end;
          $1053 = ($1051>>>0)>=($1052>>>0);
          if ($1053) {
           $1054 = $1;
           $1055 = (_read_input($1054)|0);
           $1056 = ($1055|0)!=(0);
           if ($1056) {
            label = 318;
            break L24;
           }
           $1060 = $1;
           $1061 = (($1060) + 88|0);
           $1062 = HEAP32[$1061>>2]|0;
           $i_ptr = $1062;
           $1063 = $1;
           $1064 = (($1063) + 92|0);
           $1065 = HEAP32[$1064>>2]|0;
           $i_end = $1065;
          }
          $1066 = $i_ptr;
          $1067 = (($1066) + 1|0);
          $i_ptr = $1067;
          $1068 = HEAP8[$1066]|0;
          $b017 = $1068;
          $1069 = $i_ptr;
          $1070 = $i_end;
          $1071 = ($1069>>>0)>=($1070>>>0);
          if ($1071) {
           $1072 = $1;
           $1073 = (_read_input($1072)|0);
           $1074 = ($1073|0)!=(0);
           if ($1074) {
            label = 324;
            break L24;
           }
           $1078 = $1;
           $1079 = (($1078) + 88|0);
           $1080 = HEAP32[$1079>>2]|0;
           $i_ptr = $1080;
           $1081 = $1;
           $1082 = (($1081) + 92|0);
           $1083 = HEAP32[$1082>>2]|0;
           $i_end = $1083;
          }
          $1084 = $i_ptr;
          $1085 = (($1084) + 1|0);
          $i_ptr = $1085;
          $1086 = HEAP8[$1084]|0;
          $b118 = $1086;
          $1087 = $b118;
          $1088 = $1087&255;
          $1089 = $1088 << 8;
          $1090 = $b017;
          $1091 = $1090&255;
          $1092 = $1089 | $1091;
          $1093 = $bits_left;
          $1094 = (16 - ($1093))|0;
          $1095 = $1092 << $1094;
          $1096 = $bit_buffer;
          $1097 = $1096 | $1095;
          $bit_buffer = $1097;
          $1098 = $bits_left;
          $1099 = (($1098) + 16)|0;
          $bits_left = $1099;
         }
         $1100 = $bit_buffer;
         $1101 = $1100 >>> 20;
         $1102 = $1;
         $1103 = (($1102) + 12330|0);
         $1104 = (($1103) + ($1101<<1)|0);
         $1105 = HEAP16[$1104>>1]|0;
         $sym = $1105;
         $1106 = $sym;
         $1107 = $1106&65535;
         $1108 = ($1107|0)>=(250);
         if ($1108) {
          $i = 1048576;
          while(1) {
           $1109 = $i;
           $1110 = $1109 >> 1;
           $i = $1110;
           $1111 = ($1110|0)==(0);
           if ($1111) {
            label = 334;
            break L24;
           }
           $1114 = $sym;
           $1115 = $1114&65535;
           $1116 = $1115 << 1;
           $1117 = $bit_buffer;
           $1118 = $i;
           $1119 = $1117 & $1118;
           $1120 = ($1119|0)!=(0);
           $1121 = $1120 ? 1 : 0;
           $1122 = $1116 | $1121;
           $1123 = $1;
           $1124 = (($1123) + 12330|0);
           $1125 = (($1124) + ($1122<<1)|0);
           $1126 = HEAP16[$1125>>1]|0;
           $sym = $1126;
           $1127 = $sym;
           $1128 = $1127&65535;
           $1129 = ($1128|0)>=(250);
           if (!($1129)) {
            break;
           }
          }
         }
         $1130 = $sym;
         $1131 = $1130&65535;
         $length_footer = $1131;
         $1132 = $sym;
         $1133 = $1132&65535;
         $1134 = $1;
         $1135 = (($1134) + 920|0);
         $1136 = (($1135) + ($1133)|0);
         $1137 = HEAP8[$1136]|0;
         $1138 = $1137&255;
         $i = $1138;
         $1139 = $i;
         $1140 = $bit_buffer;
         $1141 = $1140 << $1139;
         $bit_buffer = $1141;
         $1142 = $i;
         $1143 = $bits_left;
         $1144 = (($1143) - ($1142))|0;
         $bits_left = $1144;
         $1145 = $length_footer;
         $1146 = $match_length;
         $1147 = (($1146) + ($1145))|0;
         $match_length = $1147;
        }
        $1148 = $match_length;
        $1149 = (($1148) + 2)|0;
        $match_length = $1149;
        $1150 = $main_element;
        $1151 = $1150 >> 3;
        $match_offset = $1151;
        if ((($1151|0) == 0)) {
         $1152 = $R0;
         $match_offset = $1152;
        } else if ((($1151|0) == 1)) {
         $1153 = $R1;
         $match_offset = $1153;
         $1154 = $R0;
         $R1 = $1154;
         $1155 = $match_offset;
         $R0 = $1155;
        } else if ((($1151|0) == 2)) {
         $1156 = $R2;
         $match_offset = $1156;
         $1157 = $R0;
         $R2 = $1157;
         $1158 = $match_offset;
         $R0 = $1158;
        } else if ((($1151|0) == 3)) {
         $match_offset = 1;
         $1159 = $R1;
         $R2 = $1159;
         $1160 = $R0;
         $R1 = $1160;
         $1161 = $match_offset;
         $R0 = $1161;
        } else {
         $1162 = $match_offset;
         $1163 = (3720 + ($1162)|0);
         $1164 = HEAP8[$1163]|0;
         $1165 = $1164&255;
         $extra = $1165;
         while(1) {
          $1166 = $bits_left;
          $1167 = $extra;
          $1168 = ($1166|0)<($1167|0);
          if (!($1168)) {
           break;
          }
          $1169 = $i_ptr;
          $1170 = $i_end;
          $1171 = ($1169>>>0)>=($1170>>>0);
          if ($1171) {
           $1172 = $1;
           $1173 = (_read_input($1172)|0);
           $1174 = ($1173|0)!=(0);
           if ($1174) {
            label = 354;
            break L24;
           }
           $1178 = $1;
           $1179 = (($1178) + 88|0);
           $1180 = HEAP32[$1179>>2]|0;
           $i_ptr = $1180;
           $1181 = $1;
           $1182 = (($1181) + 92|0);
           $1183 = HEAP32[$1182>>2]|0;
           $i_end = $1183;
          }
          $1184 = $i_ptr;
          $1185 = (($1184) + 1|0);
          $i_ptr = $1185;
          $1186 = HEAP8[$1184]|0;
          $b019 = $1186;
          $1187 = $i_ptr;
          $1188 = $i_end;
          $1189 = ($1187>>>0)>=($1188>>>0);
          if ($1189) {
           $1190 = $1;
           $1191 = (_read_input($1190)|0);
           $1192 = ($1191|0)!=(0);
           if ($1192) {
            label = 360;
            break L24;
           }
           $1196 = $1;
           $1197 = (($1196) + 88|0);
           $1198 = HEAP32[$1197>>2]|0;
           $i_ptr = $1198;
           $1199 = $1;
           $1200 = (($1199) + 92|0);
           $1201 = HEAP32[$1200>>2]|0;
           $i_end = $1201;
          }
          $1202 = $i_ptr;
          $1203 = (($1202) + 1|0);
          $i_ptr = $1203;
          $1204 = HEAP8[$1202]|0;
          $b120 = $1204;
          $1205 = $b120;
          $1206 = $1205&255;
          $1207 = $1206 << 8;
          $1208 = $b019;
          $1209 = $1208&255;
          $1210 = $1207 | $1209;
          $1211 = $bits_left;
          $1212 = (16 - ($1211))|0;
          $1213 = $1210 << $1212;
          $1214 = $bit_buffer;
          $1215 = $1214 | $1213;
          $bit_buffer = $1215;
          $1216 = $bits_left;
          $1217 = (($1216) + 16)|0;
          $bits_left = $1217;
         }
         $1218 = $bit_buffer;
         $1219 = $extra;
         $1220 = (32 - ($1219))|0;
         $1221 = $1218 >>> $1220;
         $verbatim_bits = $1221;
         $1222 = $extra;
         $1223 = $bit_buffer;
         $1224 = $1223 << $1222;
         $bit_buffer = $1224;
         $1225 = $extra;
         $1226 = $bits_left;
         $1227 = (($1226) - ($1225))|0;
         $bits_left = $1227;
         $1228 = $match_offset;
         $1229 = (3776 + ($1228<<2)|0);
         $1230 = HEAP32[$1229>>2]|0;
         $1231 = (($1230) - 2)|0;
         $1232 = $verbatim_bits;
         $1233 = (($1231) + ($1232))|0;
         $match_offset = $1233;
         $1234 = $R1;
         $R2 = $1234;
         $1235 = $R0;
         $R1 = $1235;
         $1236 = $match_offset;
         $R0 = $1236;
        }
        $1237 = $window_posn;
        $1238 = $match_length;
        $1239 = (($1237) + ($1238))|0;
        $1240 = $1;
        $1241 = (($1240) + 24|0);
        $1242 = HEAP32[$1241>>2]|0;
        $1243 = ($1239>>>0)>($1242>>>0);
        if ($1243) {
         label = 369;
         break L24;
        }
        $1246 = $window_posn;
        $1247 = $window;
        $1248 = (($1247) + ($1246)|0);
        $rundest = $1248;
        $1249 = $match_length;
        $i = $1249;
        $1250 = $match_offset;
        $1251 = $window_posn;
        $1252 = ($1250>>>0)>($1251>>>0);
        if ($1252) {
         $1253 = $match_offset;
         $1254 = $window_posn;
         $1255 = (($1253) - ($1254))|0;
         $j = $1255;
         $1256 = $j;
         $1257 = $1;
         $1258 = (($1257) + 24|0);
         $1259 = HEAP32[$1258>>2]|0;
         $1260 = ($1256|0)>($1259|0);
         if ($1260) {
          label = 372;
          break L24;
         }
         $1263 = $1;
         $1264 = (($1263) + 24|0);
         $1265 = HEAP32[$1264>>2]|0;
         $1266 = $j;
         $1267 = (($1265) - ($1266))|0;
         $1268 = $window;
         $1269 = (($1268) + ($1267)|0);
         $runsrc = $1269;
         $1270 = $j;
         $1271 = $i;
         $1272 = ($1270|0)<($1271|0);
         if ($1272) {
          $1273 = $j;
          $1274 = $i;
          $1275 = (($1274) - ($1273))|0;
          $i = $1275;
          while(1) {
           $1276 = $j;
           $1277 = (($1276) + -1)|0;
           $j = $1277;
           $1278 = ($1276|0)>(0);
           if (!($1278)) {
            break;
           }
           $1279 = $runsrc;
           $1280 = (($1279) + 1|0);
           $runsrc = $1280;
           $1281 = HEAP8[$1279]|0;
           $1282 = $rundest;
           $1283 = (($1282) + 1|0);
           $rundest = $1283;
           HEAP8[$1282] = $1281;
          }
          $1284 = $window;
          $runsrc = $1284;
         }
         while(1) {
          $1285 = $i;
          $1286 = (($1285) + -1)|0;
          $i = $1286;
          $1287 = ($1285|0)>(0);
          if (!($1287)) {
           break;
          }
          $1288 = $runsrc;
          $1289 = (($1288) + 1|0);
          $runsrc = $1289;
          $1290 = HEAP8[$1288]|0;
          $1291 = $rundest;
          $1292 = (($1291) + 1|0);
          $rundest = $1292;
          HEAP8[$1291] = $1290;
         }
        } else {
         $1293 = $rundest;
         $1294 = $match_offset;
         $1295 = (0 - ($1294))|0;
         $1296 = (($1293) + ($1295)|0);
         $runsrc = $1296;
         while(1) {
          $1297 = $i;
          $1298 = (($1297) + -1)|0;
          $i = $1298;
          $1299 = ($1297|0)>(0);
          if (!($1299)) {
           break;
          }
          $1300 = $runsrc;
          $1301 = (($1300) + 1|0);
          $runsrc = $1301;
          $1302 = HEAP8[$1300]|0;
          $1303 = $rundest;
          $1304 = (($1303) + 1|0);
          $rundest = $1304;
          HEAP8[$1303] = $1302;
         }
        }
        $1305 = $match_length;
        $1306 = $this_run;
        $1307 = (($1306) - ($1305))|0;
        $this_run = $1307;
        $1308 = $match_length;
        $1309 = $window_posn;
        $1310 = (($1309) + ($1308))|0;
        $window_posn = $1310;
       }
      }
     } else if ((($928|0) == 2)) {
      while(1) {
       $1311 = $this_run;
       $1312 = ($1311|0)>(0);
       if (!($1312)) {
        break;
       }
       while(1) {
        $1313 = $bits_left;
        $1314 = ($1313|0)<(16);
        if (!($1314)) {
         break;
        }
        $1315 = $i_ptr;
        $1316 = $i_end;
        $1317 = ($1315>>>0)>=($1316>>>0);
        if ($1317) {
         $1318 = $1;
         $1319 = (_read_input($1318)|0);
         $1320 = ($1319|0)!=(0);
         if ($1320) {
          label = 399;
          break L24;
         }
         $1324 = $1;
         $1325 = (($1324) + 88|0);
         $1326 = HEAP32[$1325>>2]|0;
         $i_ptr = $1326;
         $1327 = $1;
         $1328 = (($1327) + 92|0);
         $1329 = HEAP32[$1328>>2]|0;
         $i_end = $1329;
        }
        $1330 = $i_ptr;
        $1331 = (($1330) + 1|0);
        $i_ptr = $1331;
        $1332 = HEAP8[$1330]|0;
        $b021 = $1332;
        $1333 = $i_ptr;
        $1334 = $i_end;
        $1335 = ($1333>>>0)>=($1334>>>0);
        if ($1335) {
         $1336 = $1;
         $1337 = (_read_input($1336)|0);
         $1338 = ($1337|0)!=(0);
         if ($1338) {
          label = 405;
          break L24;
         }
         $1342 = $1;
         $1343 = (($1342) + 88|0);
         $1344 = HEAP32[$1343>>2]|0;
         $i_ptr = $1344;
         $1345 = $1;
         $1346 = (($1345) + 92|0);
         $1347 = HEAP32[$1346>>2]|0;
         $i_end = $1347;
        }
        $1348 = $i_ptr;
        $1349 = (($1348) + 1|0);
        $i_ptr = $1349;
        $1350 = HEAP8[$1348]|0;
        $b122 = $1350;
        $1351 = $b122;
        $1352 = $1351&255;
        $1353 = $1352 << 8;
        $1354 = $b021;
        $1355 = $1354&255;
        $1356 = $1353 | $1355;
        $1357 = $bits_left;
        $1358 = (16 - ($1357))|0;
        $1359 = $1356 << $1358;
        $1360 = $bit_buffer;
        $1361 = $1360 | $1359;
        $bit_buffer = $1361;
        $1362 = $bits_left;
        $1363 = (($1362) + 16)|0;
        $bits_left = $1363;
       }
       $1364 = $bit_buffer;
       $1365 = $1364 >>> 20;
       $1366 = $1;
       $1367 = (($1366) + 1514|0);
       $1368 = (($1367) + ($1365<<1)|0);
       $1369 = HEAP16[$1368>>1]|0;
       $sym = $1369;
       $1370 = $sym;
       $1371 = $1370&65535;
       $1372 = ($1371|0)>=(656);
       if ($1372) {
        $i = 1048576;
        while(1) {
         $1373 = $i;
         $1374 = $1373 >> 1;
         $i = $1374;
         $1375 = ($1374|0)==(0);
         if ($1375) {
          label = 415;
          break L24;
         }
         $1378 = $sym;
         $1379 = $1378&65535;
         $1380 = $1379 << 1;
         $1381 = $bit_buffer;
         $1382 = $i;
         $1383 = $1381 & $1382;
         $1384 = ($1383|0)!=(0);
         $1385 = $1384 ? 1 : 0;
         $1386 = $1380 | $1385;
         $1387 = $1;
         $1388 = (($1387) + 1514|0);
         $1389 = (($1388) + ($1386<<1)|0);
         $1390 = HEAP16[$1389>>1]|0;
         $sym = $1390;
         $1391 = $sym;
         $1392 = $1391&65535;
         $1393 = ($1392|0)>=(656);
         if (!($1393)) {
          break;
         }
        }
       }
       $1394 = $sym;
       $1395 = $1394&65535;
       $main_element = $1395;
       $1396 = $sym;
       $1397 = $1396&65535;
       $1398 = $1;
       $1399 = (($1398) + 200|0);
       $1400 = (($1399) + ($1397)|0);
       $1401 = HEAP8[$1400]|0;
       $1402 = $1401&255;
       $i = $1402;
       $1403 = $i;
       $1404 = $bit_buffer;
       $1405 = $1404 << $1403;
       $bit_buffer = $1405;
       $1406 = $i;
       $1407 = $bits_left;
       $1408 = (($1407) - ($1406))|0;
       $bits_left = $1408;
       $1409 = $main_element;
       $1410 = ($1409|0)<(256);
       if ($1410) {
        $1411 = $main_element;
        $1412 = $1411&255;
        $1413 = $window_posn;
        $1414 = (($1413) + 1)|0;
        $window_posn = $1414;
        $1415 = $window;
        $1416 = (($1415) + ($1413)|0);
        HEAP8[$1416] = $1412;
        $1417 = $this_run;
        $1418 = (($1417) + -1)|0;
        $this_run = $1418;
       } else {
        $1419 = $main_element;
        $1420 = (($1419) - 256)|0;
        $main_element = $1420;
        $1421 = $main_element;
        $1422 = $1421 & 7;
        $match_length = $1422;
        $1423 = $match_length;
        $1424 = ($1423|0)==(7);
        if ($1424) {
         $1425 = $1;
         $1426 = (($1425) + 21810|0);
         $1427 = HEAP8[$1426]|0;
         $1428 = ($1427<<24>>24)!=(0);
         if ($1428) {
          label = 425;
          break L24;
         }
         while(1) {
          $1431 = $bits_left;
          $1432 = ($1431|0)<(16);
          if (!($1432)) {
           break;
          }
          $1433 = $i_ptr;
          $1434 = $i_end;
          $1435 = ($1433>>>0)>=($1434>>>0);
          if ($1435) {
           $1436 = $1;
           $1437 = (_read_input($1436)|0);
           $1438 = ($1437|0)!=(0);
           if ($1438) {
            label = 434;
            break L24;
           }
           $1442 = $1;
           $1443 = (($1442) + 88|0);
           $1444 = HEAP32[$1443>>2]|0;
           $i_ptr = $1444;
           $1445 = $1;
           $1446 = (($1445) + 92|0);
           $1447 = HEAP32[$1446>>2]|0;
           $i_end = $1447;
          }
          $1448 = $i_ptr;
          $1449 = (($1448) + 1|0);
          $i_ptr = $1449;
          $1450 = HEAP8[$1448]|0;
          $b023 = $1450;
          $1451 = $i_ptr;
          $1452 = $i_end;
          $1453 = ($1451>>>0)>=($1452>>>0);
          if ($1453) {
           $1454 = $1;
           $1455 = (_read_input($1454)|0);
           $1456 = ($1455|0)!=(0);
           if ($1456) {
            label = 440;
            break L24;
           }
           $1460 = $1;
           $1461 = (($1460) + 88|0);
           $1462 = HEAP32[$1461>>2]|0;
           $i_ptr = $1462;
           $1463 = $1;
           $1464 = (($1463) + 92|0);
           $1465 = HEAP32[$1464>>2]|0;
           $i_end = $1465;
          }
          $1466 = $i_ptr;
          $1467 = (($1466) + 1|0);
          $i_ptr = $1467;
          $1468 = HEAP8[$1466]|0;
          $b124 = $1468;
          $1469 = $b124;
          $1470 = $1469&255;
          $1471 = $1470 << 8;
          $1472 = $b023;
          $1473 = $1472&255;
          $1474 = $1471 | $1473;
          $1475 = $bits_left;
          $1476 = (16 - ($1475))|0;
          $1477 = $1474 << $1476;
          $1478 = $bit_buffer;
          $1479 = $1478 | $1477;
          $bit_buffer = $1479;
          $1480 = $bits_left;
          $1481 = (($1480) + 16)|0;
          $bits_left = $1481;
         }
         $1482 = $bit_buffer;
         $1483 = $1482 >>> 20;
         $1484 = $1;
         $1485 = (($1484) + 12330|0);
         $1486 = (($1485) + ($1483<<1)|0);
         $1487 = HEAP16[$1486>>1]|0;
         $sym = $1487;
         $1488 = $sym;
         $1489 = $1488&65535;
         $1490 = ($1489|0)>=(250);
         if ($1490) {
          $i = 1048576;
          while(1) {
           $1491 = $i;
           $1492 = $1491 >> 1;
           $i = $1492;
           $1493 = ($1492|0)==(0);
           if ($1493) {
            label = 450;
            break L24;
           }
           $1496 = $sym;
           $1497 = $1496&65535;
           $1498 = $1497 << 1;
           $1499 = $bit_buffer;
           $1500 = $i;
           $1501 = $1499 & $1500;
           $1502 = ($1501|0)!=(0);
           $1503 = $1502 ? 1 : 0;
           $1504 = $1498 | $1503;
           $1505 = $1;
           $1506 = (($1505) + 12330|0);
           $1507 = (($1506) + ($1504<<1)|0);
           $1508 = HEAP16[$1507>>1]|0;
           $sym = $1508;
           $1509 = $sym;
           $1510 = $1509&65535;
           $1511 = ($1510|0)>=(250);
           if (!($1511)) {
            break;
           }
          }
         }
         $1512 = $sym;
         $1513 = $1512&65535;
         $length_footer = $1513;
         $1514 = $sym;
         $1515 = $1514&65535;
         $1516 = $1;
         $1517 = (($1516) + 920|0);
         $1518 = (($1517) + ($1515)|0);
         $1519 = HEAP8[$1518]|0;
         $1520 = $1519&255;
         $i = $1520;
         $1521 = $i;
         $1522 = $bit_buffer;
         $1523 = $1522 << $1521;
         $bit_buffer = $1523;
         $1524 = $i;
         $1525 = $bits_left;
         $1526 = (($1525) - ($1524))|0;
         $bits_left = $1526;
         $1527 = $length_footer;
         $1528 = $match_length;
         $1529 = (($1528) + ($1527))|0;
         $match_length = $1529;
        }
        $1530 = $match_length;
        $1531 = (($1530) + 2)|0;
        $match_length = $1531;
        $1532 = $main_element;
        $1533 = $1532 >> 3;
        $match_offset = $1533;
        if ((($1533|0) == 0)) {
         $1534 = $R0;
         $match_offset = $1534;
        } else if ((($1533|0) == 1)) {
         $1535 = $R1;
         $match_offset = $1535;
         $1536 = $R0;
         $R1 = $1536;
         $1537 = $match_offset;
         $R0 = $1537;
        } else if ((($1533|0) == 2)) {
         $1538 = $R2;
         $match_offset = $1538;
         $1539 = $R0;
         $R2 = $1539;
         $1540 = $match_offset;
         $R0 = $1540;
        } else {
         $1541 = $match_offset;
         $1542 = (3720 + ($1541)|0);
         $1543 = HEAP8[$1542]|0;
         $1544 = $1543&255;
         $extra = $1544;
         $1545 = $match_offset;
         $1546 = (3776 + ($1545<<2)|0);
         $1547 = HEAP32[$1546>>2]|0;
         $1548 = (($1547) - 2)|0;
         $match_offset = $1548;
         $1549 = $extra;
         $1550 = ($1549|0)>(3);
         if ($1550) {
          $1551 = $extra;
          $1552 = (($1551) - 3)|0;
          $extra = $1552;
          while(1) {
           $1553 = $bits_left;
           $1554 = $extra;
           $1555 = ($1553|0)<($1554|0);
           if (!($1555)) {
            break;
           }
           $1556 = $i_ptr;
           $1557 = $i_end;
           $1558 = ($1556>>>0)>=($1557>>>0);
           if ($1558) {
            $1559 = $1;
            $1560 = (_read_input($1559)|0);
            $1561 = ($1560|0)!=(0);
            if ($1561) {
             label = 470;
             break L24;
            }
            $1565 = $1;
            $1566 = (($1565) + 88|0);
            $1567 = HEAP32[$1566>>2]|0;
            $i_ptr = $1567;
            $1568 = $1;
            $1569 = (($1568) + 92|0);
            $1570 = HEAP32[$1569>>2]|0;
            $i_end = $1570;
           }
           $1571 = $i_ptr;
           $1572 = (($1571) + 1|0);
           $i_ptr = $1572;
           $1573 = HEAP8[$1571]|0;
           $b025 = $1573;
           $1574 = $i_ptr;
           $1575 = $i_end;
           $1576 = ($1574>>>0)>=($1575>>>0);
           if ($1576) {
            $1577 = $1;
            $1578 = (_read_input($1577)|0);
            $1579 = ($1578|0)!=(0);
            if ($1579) {
             label = 476;
             break L24;
            }
            $1583 = $1;
            $1584 = (($1583) + 88|0);
            $1585 = HEAP32[$1584>>2]|0;
            $i_ptr = $1585;
            $1586 = $1;
            $1587 = (($1586) + 92|0);
            $1588 = HEAP32[$1587>>2]|0;
            $i_end = $1588;
           }
           $1589 = $i_ptr;
           $1590 = (($1589) + 1|0);
           $i_ptr = $1590;
           $1591 = HEAP8[$1589]|0;
           $b126 = $1591;
           $1592 = $b126;
           $1593 = $1592&255;
           $1594 = $1593 << 8;
           $1595 = $b025;
           $1596 = $1595&255;
           $1597 = $1594 | $1596;
           $1598 = $bits_left;
           $1599 = (16 - ($1598))|0;
           $1600 = $1597 << $1599;
           $1601 = $bit_buffer;
           $1602 = $1601 | $1600;
           $bit_buffer = $1602;
           $1603 = $bits_left;
           $1604 = (($1603) + 16)|0;
           $bits_left = $1604;
          }
          $1605 = $bit_buffer;
          $1606 = $extra;
          $1607 = (32 - ($1606))|0;
          $1608 = $1605 >>> $1607;
          $verbatim_bits = $1608;
          $1609 = $extra;
          $1610 = $bit_buffer;
          $1611 = $1610 << $1609;
          $bit_buffer = $1611;
          $1612 = $extra;
          $1613 = $bits_left;
          $1614 = (($1613) - ($1612))|0;
          $bits_left = $1614;
          $1615 = $verbatim_bits;
          $1616 = $1615 << 3;
          $1617 = $match_offset;
          $1618 = (($1617) + ($1616))|0;
          $match_offset = $1618;
          while(1) {
           $1619 = $bits_left;
           $1620 = ($1619|0)<(16);
           if (!($1620)) {
            break;
           }
           $1621 = $i_ptr;
           $1622 = $i_end;
           $1623 = ($1621>>>0)>=($1622>>>0);
           if ($1623) {
            $1624 = $1;
            $1625 = (_read_input($1624)|0);
            $1626 = ($1625|0)!=(0);
            if ($1626) {
             label = 491;
             break L24;
            }
            $1630 = $1;
            $1631 = (($1630) + 88|0);
            $1632 = HEAP32[$1631>>2]|0;
            $i_ptr = $1632;
            $1633 = $1;
            $1634 = (($1633) + 92|0);
            $1635 = HEAP32[$1634>>2]|0;
            $i_end = $1635;
           }
           $1636 = $i_ptr;
           $1637 = (($1636) + 1|0);
           $i_ptr = $1637;
           $1638 = HEAP8[$1636]|0;
           $b027 = $1638;
           $1639 = $i_ptr;
           $1640 = $i_end;
           $1641 = ($1639>>>0)>=($1640>>>0);
           if ($1641) {
            $1642 = $1;
            $1643 = (_read_input($1642)|0);
            $1644 = ($1643|0)!=(0);
            if ($1644) {
             label = 497;
             break L24;
            }
            $1648 = $1;
            $1649 = (($1648) + 88|0);
            $1650 = HEAP32[$1649>>2]|0;
            $i_ptr = $1650;
            $1651 = $1;
            $1652 = (($1651) + 92|0);
            $1653 = HEAP32[$1652>>2]|0;
            $i_end = $1653;
           }
           $1654 = $i_ptr;
           $1655 = (($1654) + 1|0);
           $i_ptr = $1655;
           $1656 = HEAP8[$1654]|0;
           $b128 = $1656;
           $1657 = $b128;
           $1658 = $1657&255;
           $1659 = $1658 << 8;
           $1660 = $b027;
           $1661 = $1660&255;
           $1662 = $1659 | $1661;
           $1663 = $bits_left;
           $1664 = (16 - ($1663))|0;
           $1665 = $1662 << $1664;
           $1666 = $bit_buffer;
           $1667 = $1666 | $1665;
           $bit_buffer = $1667;
           $1668 = $bits_left;
           $1669 = (($1668) + 16)|0;
           $bits_left = $1669;
          }
          $1670 = $bit_buffer;
          $1671 = $1670 >>> 25;
          $1672 = $1;
          $1673 = (($1672) + 21522|0);
          $1674 = (($1673) + ($1671<<1)|0);
          $1675 = HEAP16[$1674>>1]|0;
          $sym = $1675;
          $1676 = $sym;
          $1677 = $1676&65535;
          $1678 = ($1677|0)>=(8);
          if ($1678) {
           $i = 33554432;
           while(1) {
            $1679 = $i;
            $1680 = $1679 >> 1;
            $i = $1680;
            $1681 = ($1680|0)==(0);
            if ($1681) {
             label = 507;
             break L24;
            }
            $1684 = $sym;
            $1685 = $1684&65535;
            $1686 = $1685 << 1;
            $1687 = $bit_buffer;
            $1688 = $i;
            $1689 = $1687 & $1688;
            $1690 = ($1689|0)!=(0);
            $1691 = $1690 ? 1 : 0;
            $1692 = $1686 | $1691;
            $1693 = $1;
            $1694 = (($1693) + 21522|0);
            $1695 = (($1694) + ($1692<<1)|0);
            $1696 = HEAP16[$1695>>1]|0;
            $sym = $1696;
            $1697 = $sym;
            $1698 = $1697&65535;
            $1699 = ($1698|0)>=(8);
            if (!($1699)) {
             break;
            }
           }
          }
          $1700 = $sym;
          $1701 = $1700&65535;
          $aligned_bits = $1701;
          $1702 = $sym;
          $1703 = $1702&65535;
          $1704 = $1;
          $1705 = (($1704) + 1234|0);
          $1706 = (($1705) + ($1703)|0);
          $1707 = HEAP8[$1706]|0;
          $1708 = $1707&255;
          $i = $1708;
          $1709 = $i;
          $1710 = $bit_buffer;
          $1711 = $1710 << $1709;
          $bit_buffer = $1711;
          $1712 = $i;
          $1713 = $bits_left;
          $1714 = (($1713) - ($1712))|0;
          $bits_left = $1714;
          $1715 = $aligned_bits;
          $1716 = $match_offset;
          $1717 = (($1716) + ($1715))|0;
          $match_offset = $1717;
         } else {
          $1718 = $extra;
          $1719 = ($1718|0)==(3);
          if ($1719) {
           while(1) {
            $1720 = $bits_left;
            $1721 = ($1720|0)<(16);
            if (!($1721)) {
             break;
            }
            $1722 = $i_ptr;
            $1723 = $i_end;
            $1724 = ($1722>>>0)>=($1723>>>0);
            if ($1724) {
             $1725 = $1;
             $1726 = (_read_input($1725)|0);
             $1727 = ($1726|0)!=(0);
             if ($1727) {
              label = 523;
              break L24;
             }
             $1731 = $1;
             $1732 = (($1731) + 88|0);
             $1733 = HEAP32[$1732>>2]|0;
             $i_ptr = $1733;
             $1734 = $1;
             $1735 = (($1734) + 92|0);
             $1736 = HEAP32[$1735>>2]|0;
             $i_end = $1736;
            }
            $1737 = $i_ptr;
            $1738 = (($1737) + 1|0);
            $i_ptr = $1738;
            $1739 = HEAP8[$1737]|0;
            $b029 = $1739;
            $1740 = $i_ptr;
            $1741 = $i_end;
            $1742 = ($1740>>>0)>=($1741>>>0);
            if ($1742) {
             $1743 = $1;
             $1744 = (_read_input($1743)|0);
             $1745 = ($1744|0)!=(0);
             if ($1745) {
              label = 529;
              break L24;
             }
             $1749 = $1;
             $1750 = (($1749) + 88|0);
             $1751 = HEAP32[$1750>>2]|0;
             $i_ptr = $1751;
             $1752 = $1;
             $1753 = (($1752) + 92|0);
             $1754 = HEAP32[$1753>>2]|0;
             $i_end = $1754;
            }
            $1755 = $i_ptr;
            $1756 = (($1755) + 1|0);
            $i_ptr = $1756;
            $1757 = HEAP8[$1755]|0;
            $b130 = $1757;
            $1758 = $b130;
            $1759 = $1758&255;
            $1760 = $1759 << 8;
            $1761 = $b029;
            $1762 = $1761&255;
            $1763 = $1760 | $1762;
            $1764 = $bits_left;
            $1765 = (16 - ($1764))|0;
            $1766 = $1763 << $1765;
            $1767 = $bit_buffer;
            $1768 = $1767 | $1766;
            $bit_buffer = $1768;
            $1769 = $bits_left;
            $1770 = (($1769) + 16)|0;
            $bits_left = $1770;
           }
           $1771 = $bit_buffer;
           $1772 = $1771 >>> 25;
           $1773 = $1;
           $1774 = (($1773) + 21522|0);
           $1775 = (($1774) + ($1772<<1)|0);
           $1776 = HEAP16[$1775>>1]|0;
           $sym = $1776;
           $1777 = $sym;
           $1778 = $1777&65535;
           $1779 = ($1778|0)>=(8);
           if ($1779) {
            $i = 33554432;
            while(1) {
             $1780 = $i;
             $1781 = $1780 >> 1;
             $i = $1781;
             $1782 = ($1781|0)==(0);
             if ($1782) {
              label = 539;
              break L24;
             }
             $1785 = $sym;
             $1786 = $1785&65535;
             $1787 = $1786 << 1;
             $1788 = $bit_buffer;
             $1789 = $i;
             $1790 = $1788 & $1789;
             $1791 = ($1790|0)!=(0);
             $1792 = $1791 ? 1 : 0;
             $1793 = $1787 | $1792;
             $1794 = $1;
             $1795 = (($1794) + 21522|0);
             $1796 = (($1795) + ($1793<<1)|0);
             $1797 = HEAP16[$1796>>1]|0;
             $sym = $1797;
             $1798 = $sym;
             $1799 = $1798&65535;
             $1800 = ($1799|0)>=(8);
             if (!($1800)) {
              break;
             }
            }
           }
           $1801 = $sym;
           $1802 = $1801&65535;
           $aligned_bits = $1802;
           $1803 = $sym;
           $1804 = $1803&65535;
           $1805 = $1;
           $1806 = (($1805) + 1234|0);
           $1807 = (($1806) + ($1804)|0);
           $1808 = HEAP8[$1807]|0;
           $1809 = $1808&255;
           $i = $1809;
           $1810 = $i;
           $1811 = $bit_buffer;
           $1812 = $1811 << $1810;
           $bit_buffer = $1812;
           $1813 = $i;
           $1814 = $bits_left;
           $1815 = (($1814) - ($1813))|0;
           $bits_left = $1815;
           $1816 = $aligned_bits;
           $1817 = $match_offset;
           $1818 = (($1817) + ($1816))|0;
           $match_offset = $1818;
          } else {
           $1819 = $extra;
           $1820 = ($1819|0)>(0);
           if ($1820) {
            while(1) {
             $1821 = $bits_left;
             $1822 = $extra;
             $1823 = ($1821|0)<($1822|0);
             if (!($1823)) {
              break;
             }
             $1824 = $i_ptr;
             $1825 = $i_end;
             $1826 = ($1824>>>0)>=($1825>>>0);
             if ($1826) {
              $1827 = $1;
              $1828 = (_read_input($1827)|0);
              $1829 = ($1828|0)!=(0);
              if ($1829) {
               label = 555;
               break L24;
              }
              $1833 = $1;
              $1834 = (($1833) + 88|0);
              $1835 = HEAP32[$1834>>2]|0;
              $i_ptr = $1835;
              $1836 = $1;
              $1837 = (($1836) + 92|0);
              $1838 = HEAP32[$1837>>2]|0;
              $i_end = $1838;
             }
             $1839 = $i_ptr;
             $1840 = (($1839) + 1|0);
             $i_ptr = $1840;
             $1841 = HEAP8[$1839]|0;
             $b031 = $1841;
             $1842 = $i_ptr;
             $1843 = $i_end;
             $1844 = ($1842>>>0)>=($1843>>>0);
             if ($1844) {
              $1845 = $1;
              $1846 = (_read_input($1845)|0);
              $1847 = ($1846|0)!=(0);
              if ($1847) {
               label = 561;
               break L24;
              }
              $1851 = $1;
              $1852 = (($1851) + 88|0);
              $1853 = HEAP32[$1852>>2]|0;
              $i_ptr = $1853;
              $1854 = $1;
              $1855 = (($1854) + 92|0);
              $1856 = HEAP32[$1855>>2]|0;
              $i_end = $1856;
             }
             $1857 = $i_ptr;
             $1858 = (($1857) + 1|0);
             $i_ptr = $1858;
             $1859 = HEAP8[$1857]|0;
             $b132 = $1859;
             $1860 = $b132;
             $1861 = $1860&255;
             $1862 = $1861 << 8;
             $1863 = $b031;
             $1864 = $1863&255;
             $1865 = $1862 | $1864;
             $1866 = $bits_left;
             $1867 = (16 - ($1866))|0;
             $1868 = $1865 << $1867;
             $1869 = $bit_buffer;
             $1870 = $1869 | $1868;
             $bit_buffer = $1870;
             $1871 = $bits_left;
             $1872 = (($1871) + 16)|0;
             $bits_left = $1872;
            }
            $1873 = $bit_buffer;
            $1874 = $extra;
            $1875 = (32 - ($1874))|0;
            $1876 = $1873 >>> $1875;
            $verbatim_bits = $1876;
            $1877 = $extra;
            $1878 = $bit_buffer;
            $1879 = $1878 << $1877;
            $bit_buffer = $1879;
            $1880 = $extra;
            $1881 = $bits_left;
            $1882 = (($1881) - ($1880))|0;
            $bits_left = $1882;
            $1883 = $verbatim_bits;
            $1884 = $match_offset;
            $1885 = (($1884) + ($1883))|0;
            $match_offset = $1885;
           } else {
            $match_offset = 1;
           }
          }
         }
         $1886 = $R1;
         $R2 = $1886;
         $1887 = $R0;
         $R1 = $1887;
         $1888 = $match_offset;
         $R0 = $1888;
        }
        $1889 = $window_posn;
        $1890 = $match_length;
        $1891 = (($1889) + ($1890))|0;
        $1892 = $1;
        $1893 = (($1892) + 24|0);
        $1894 = HEAP32[$1893>>2]|0;
        $1895 = ($1891>>>0)>($1894>>>0);
        if ($1895) {
         label = 574;
         break L24;
        }
        $1898 = $window_posn;
        $1899 = $window;
        $1900 = (($1899) + ($1898)|0);
        $rundest = $1900;
        $1901 = $match_length;
        $i = $1901;
        $1902 = $match_offset;
        $1903 = $window_posn;
        $1904 = ($1902>>>0)>($1903>>>0);
        if ($1904) {
         $1905 = $match_offset;
         $1906 = $window_posn;
         $1907 = (($1905) - ($1906))|0;
         $j = $1907;
         $1908 = $j;
         $1909 = $1;
         $1910 = (($1909) + 24|0);
         $1911 = HEAP32[$1910>>2]|0;
         $1912 = ($1908|0)>($1911|0);
         if ($1912) {
          label = 577;
          break L24;
         }
         $1915 = $1;
         $1916 = (($1915) + 24|0);
         $1917 = HEAP32[$1916>>2]|0;
         $1918 = $j;
         $1919 = (($1917) - ($1918))|0;
         $1920 = $window;
         $1921 = (($1920) + ($1919)|0);
         $runsrc = $1921;
         $1922 = $j;
         $1923 = $i;
         $1924 = ($1922|0)<($1923|0);
         if ($1924) {
          $1925 = $j;
          $1926 = $i;
          $1927 = (($1926) - ($1925))|0;
          $i = $1927;
          while(1) {
           $1928 = $j;
           $1929 = (($1928) + -1)|0;
           $j = $1929;
           $1930 = ($1928|0)>(0);
           if (!($1930)) {
            break;
           }
           $1931 = $runsrc;
           $1932 = (($1931) + 1|0);
           $runsrc = $1932;
           $1933 = HEAP8[$1931]|0;
           $1934 = $rundest;
           $1935 = (($1934) + 1|0);
           $rundest = $1935;
           HEAP8[$1934] = $1933;
          }
          $1936 = $window;
          $runsrc = $1936;
         }
         while(1) {
          $1937 = $i;
          $1938 = (($1937) + -1)|0;
          $i = $1938;
          $1939 = ($1937|0)>(0);
          if (!($1939)) {
           break;
          }
          $1940 = $runsrc;
          $1941 = (($1940) + 1|0);
          $runsrc = $1941;
          $1942 = HEAP8[$1940]|0;
          $1943 = $rundest;
          $1944 = (($1943) + 1|0);
          $rundest = $1944;
          HEAP8[$1943] = $1942;
         }
        } else {
         $1945 = $rundest;
         $1946 = $match_offset;
         $1947 = (0 - ($1946))|0;
         $1948 = (($1945) + ($1947)|0);
         $runsrc = $1948;
         while(1) {
          $1949 = $i;
          $1950 = (($1949) + -1)|0;
          $i = $1950;
          $1951 = ($1949|0)>(0);
          if (!($1951)) {
           break;
          }
          $1952 = $runsrc;
          $1953 = (($1952) + 1|0);
          $runsrc = $1953;
          $1954 = HEAP8[$1952]|0;
          $1955 = $rundest;
          $1956 = (($1955) + 1|0);
          $rundest = $1956;
          HEAP8[$1955] = $1954;
         }
        }
        $1957 = $match_length;
        $1958 = $this_run;
        $1959 = (($1958) - ($1957))|0;
        $this_run = $1959;
        $1960 = $match_length;
        $1961 = $window_posn;
        $1962 = (($1961) + ($1960))|0;
        $window_posn = $1962;
       }
      }
     } else if ((($928|0) == 3)) {
      $1963 = $window_posn;
      $1964 = $window;
      $1965 = (($1964) + ($1963)|0);
      $rundest = $1965;
      $1966 = $this_run;
      $1967 = $window_posn;
      $1968 = (($1967) + ($1966))|0;
      $window_posn = $1968;
      while(1) {
       $1969 = $this_run;
       $1970 = ($1969|0)>(0);
       if (!($1970)) {
        break;
       }
       $1971 = $i_end;
       $1972 = $i_ptr;
       $1973 = $1971;
       $1974 = $1972;
       $1975 = (($1973) - ($1974))|0;
       $i = $1975;
       $1976 = ($1975|0)==(0);
       if ($1976) {
        $1977 = $i_ptr;
        $1978 = $i_end;
        $1979 = ($1977>>>0)>=($1978>>>0);
        if ($1979) {
         $1980 = $1;
         $1981 = (_read_input($1980)|0);
         $1982 = ($1981|0)!=(0);
         if ($1982) {
          label = 600;
          break L24;
         }
         $1986 = $1;
         $1987 = (($1986) + 88|0);
         $1988 = HEAP32[$1987>>2]|0;
         $i_ptr = $1988;
         $1989 = $1;
         $1990 = (($1989) + 92|0);
         $1991 = HEAP32[$1990>>2]|0;
         $i_end = $1991;
        }
       } else {
        $1992 = $i;
        $1993 = $this_run;
        $1994 = ($1992|0)>($1993|0);
        if ($1994) {
         $1995 = $this_run;
         $i = $1995;
        }
        $1996 = $1;
        $1997 = HEAP32[$1996>>2]|0;
        $1998 = (($1997) + 36|0);
        $1999 = HEAP32[$1998>>2]|0;
        $2000 = $i_ptr;
        $2001 = $rundest;
        $2002 = $i;
        FUNCTION_TABLE_viii[$1999 & 3]($2000,$2001,$2002);
        $2003 = $i;
        $2004 = $rundest;
        $2005 = (($2004) + ($2003)|0);
        $rundest = $2005;
        $2006 = $i;
        $2007 = $i_ptr;
        $2008 = (($2007) + ($2006)|0);
        $i_ptr = $2008;
        $2009 = $i;
        $2010 = $this_run;
        $2011 = (($2010) - ($2009))|0;
        $this_run = $2011;
       }
      }
     } else {
      label = 609;
      break L24;
     }
     $2014 = $this_run;
     $2015 = ($2014|0)<(0);
     if ($2015) {
      $2016 = $this_run;
      $2017 = (0 - ($2016))|0;
      $2018 = $1;
      $2019 = (($2018) + 60|0);
      $2020 = HEAP32[$2019>>2]|0;
      $2021 = ($2017>>>0)>($2020>>>0);
      if ($2021) {
       label = 612;
       break L24;
      }
      $2024 = $this_run;
      $2025 = (0 - ($2024))|0;
      $2026 = $1;
      $2027 = (($2026) + 60|0);
      $2028 = HEAP32[$2027>>2]|0;
      $2029 = (($2028) - ($2025))|0;
      HEAP32[$2027>>2] = $2029;
     }
    }
    $2030 = $window_posn;
    $2031 = $1;
    $2032 = (($2031) + 32|0);
    $2033 = HEAP32[$2032>>2]|0;
    $2034 = (($2030) - ($2033))|0;
    $2035 = $frame_size;
    $2036 = ($2034|0)!=($2035|0);
    if ($2036) {
     label = 616;
     break;
    }
    $2039 = $bits_left;
    $2040 = ($2039|0)>(0);
    if ($2040) {
     while(1) {
      $2041 = $bits_left;
      $2042 = ($2041|0)<(16);
      if (!($2042)) {
       break;
      }
      $2043 = $i_ptr;
      $2044 = $i_end;
      $2045 = ($2043>>>0)>=($2044>>>0);
      if ($2045) {
       $2046 = $1;
       $2047 = (_read_input($2046)|0);
       $2048 = ($2047|0)!=(0);
       if ($2048) {
        label = 625;
        break L24;
       }
       $2052 = $1;
       $2053 = (($2052) + 88|0);
       $2054 = HEAP32[$2053>>2]|0;
       $i_ptr = $2054;
       $2055 = $1;
       $2056 = (($2055) + 92|0);
       $2057 = HEAP32[$2056>>2]|0;
       $i_end = $2057;
      }
      $2058 = $i_ptr;
      $2059 = (($2058) + 1|0);
      $i_ptr = $2059;
      $2060 = HEAP8[$2058]|0;
      $b033 = $2060;
      $2061 = $i_ptr;
      $2062 = $i_end;
      $2063 = ($2061>>>0)>=($2062>>>0);
      if ($2063) {
       $2064 = $1;
       $2065 = (_read_input($2064)|0);
       $2066 = ($2065|0)!=(0);
       if ($2066) {
        label = 631;
        break L24;
       }
       $2070 = $1;
       $2071 = (($2070) + 88|0);
       $2072 = HEAP32[$2071>>2]|0;
       $i_ptr = $2072;
       $2073 = $1;
       $2074 = (($2073) + 92|0);
       $2075 = HEAP32[$2074>>2]|0;
       $i_end = $2075;
      }
      $2076 = $i_ptr;
      $2077 = (($2076) + 1|0);
      $i_ptr = $2077;
      $2078 = HEAP8[$2076]|0;
      $b134 = $2078;
      $2079 = $b134;
      $2080 = $2079&255;
      $2081 = $2080 << 8;
      $2082 = $b033;
      $2083 = $2082&255;
      $2084 = $2081 | $2083;
      $2085 = $bits_left;
      $2086 = (16 - ($2085))|0;
      $2087 = $2084 << $2086;
      $2088 = $bit_buffer;
      $2089 = $2088 | $2087;
      $bit_buffer = $2089;
      $2090 = $bits_left;
      $2091 = (($2090) + 16)|0;
      $bits_left = $2091;
     }
    }
    $2092 = $bits_left;
    $2093 = $2092 & 15;
    $2094 = ($2093|0)!=(0);
    if ($2094) {
     $2095 = $bits_left;
     $2096 = $2095 & 15;
     $2097 = $bit_buffer;
     $2098 = $2097 << $2096;
     $bit_buffer = $2098;
     $2099 = $bits_left;
     $2100 = $2099 & 15;
     $2101 = $bits_left;
     $2102 = (($2101) - ($2100))|0;
     $bits_left = $2102;
    }
    $2103 = $1;
    $2104 = (($2103) + 96|0);
    $2105 = HEAP32[$2104>>2]|0;
    $2106 = $1;
    $2107 = (($2106) + 100|0);
    $2108 = HEAP32[$2107>>2]|0;
    $2109 = ($2105|0)!=($2108|0);
    if ($2109) {
     label = 641;
     break;
    }
    $2112 = $1;
    $2113 = (($2112) + 72|0);
    $2114 = HEAP8[$2113]|0;
    $2115 = $2114&255;
    $2116 = ($2115|0)!=(0);
    if ($2116) {
     $2117 = $1;
     $2118 = (($2117) + 64|0);
     $2119 = HEAP32[$2118>>2]|0;
     $2120 = ($2119|0)!=(0);
     if ($2120) {
      $2121 = $1;
      $2122 = (($2121) + 36|0);
      $2123 = HEAP32[$2122>>2]|0;
      $2124 = ($2123>>>0)<=(32768);
      if ($2124) {
       $2125 = $frame_size;
       $2126 = ($2125>>>0)>(10);
       if ($2126) {
        $2127 = $1;
        $2128 = (($2127) + 21811|0);
        $data = $2128;
        $2129 = $frame_size;
        $2130 = (($2129) - 10)|0;
        $2131 = $1;
        $2132 = (($2131) + 21811|0);
        $2133 = (($2132) + ($2130)|0);
        $dataend = $2133;
        $2134 = $1;
        $2135 = (($2134) + 68|0);
        $2136 = HEAP32[$2135>>2]|0;
        $curpos = $2136;
        $2137 = $1;
        $2138 = (($2137) + 64|0);
        $2139 = HEAP32[$2138>>2]|0;
        $filesize = $2139;
        $2140 = $data;
        $2141 = $1;
        $2142 = (($2141) + 96|0);
        HEAP32[$2142>>2] = $2140;
        $2143 = $1;
        $2144 = HEAP32[$2143>>2]|0;
        $2145 = (($2144) + 36|0);
        $2146 = HEAP32[$2145>>2]|0;
        $2147 = $1;
        $2148 = (($2147) + 32|0);
        $2149 = HEAP32[$2148>>2]|0;
        $2150 = $1;
        $2151 = (($2150) + 20|0);
        $2152 = HEAP32[$2151>>2]|0;
        $2153 = (($2152) + ($2149)|0);
        $2154 = $data;
        $2155 = $frame_size;
        FUNCTION_TABLE_viii[$2146 & 3]($2153,$2154,$2155);
        while(1) {
         $2156 = $data;
         $2157 = $dataend;
         $2158 = ($2156>>>0)<($2157>>>0);
         if (!($2158)) {
          break;
         }
         $2159 = $data;
         $2160 = (($2159) + 1|0);
         $data = $2160;
         $2161 = HEAP8[$2159]|0;
         $2162 = $2161&255;
         $2163 = ($2162|0)!=(232);
         if ($2163) {
          $2164 = $curpos;
          $2165 = (($2164) + 1)|0;
          $curpos = $2165;
          continue;
         }
         $2166 = $data;
         $2167 = HEAP8[$2166]|0;
         $2168 = $2167&255;
         $2169 = $data;
         $2170 = (($2169) + 1|0);
         $2171 = HEAP8[$2170]|0;
         $2172 = $2171&255;
         $2173 = $2172 << 8;
         $2174 = $2168 | $2173;
         $2175 = $data;
         $2176 = (($2175) + 2|0);
         $2177 = HEAP8[$2176]|0;
         $2178 = $2177&255;
         $2179 = $2178 << 16;
         $2180 = $2174 | $2179;
         $2181 = $data;
         $2182 = (($2181) + 3|0);
         $2183 = HEAP8[$2182]|0;
         $2184 = $2183&255;
         $2185 = $2184 << 24;
         $2186 = $2180 | $2185;
         $abs_off = $2186;
         $2187 = $abs_off;
         $2188 = $curpos;
         $2189 = (0 - ($2188))|0;
         $2190 = ($2187|0)>=($2189|0);
         if ($2190) {
          $2191 = $abs_off;
          $2192 = $filesize;
          $2193 = ($2191|0)<($2192|0);
          if ($2193) {
           $2194 = $abs_off;
           $2195 = ($2194|0)>=(0);
           if ($2195) {
            $2196 = $abs_off;
            $2197 = $curpos;
            $2198 = (($2196) - ($2197))|0;
            $2202 = $2198;
           } else {
            $2199 = $abs_off;
            $2200 = $filesize;
            $2201 = (($2199) + ($2200))|0;
            $2202 = $2201;
           }
           $rel_off = $2202;
           $2203 = $rel_off;
           $2204 = $2203&255;
           $2205 = $data;
           HEAP8[$2205] = $2204;
           $2206 = $rel_off;
           $2207 = $2206 >> 8;
           $2208 = $2207&255;
           $2209 = $data;
           $2210 = (($2209) + 1|0);
           HEAP8[$2210] = $2208;
           $2211 = $rel_off;
           $2212 = $2211 >> 16;
           $2213 = $2212&255;
           $2214 = $data;
           $2215 = (($2214) + 2|0);
           HEAP8[$2215] = $2213;
           $2216 = $rel_off;
           $2217 = $2216 >> 24;
           $2218 = $2217&255;
           $2219 = $data;
           $2220 = (($2219) + 3|0);
           HEAP8[$2220] = $2218;
          }
         }
         $2221 = $data;
         $2222 = (($2221) + 4|0);
         $data = $2222;
         $2223 = $curpos;
         $2224 = (($2223) + 5)|0;
         $curpos = $2224;
        }
        $2225 = $frame_size;
        $2226 = $1;
        $2227 = (($2226) + 68|0);
        $2228 = HEAP32[$2227>>2]|0;
        $2229 = (($2228) + ($2225))|0;
        HEAP32[$2227>>2] = $2229;
       } else {
        label = 658;
       }
      } else {
       label = 658;
      }
     } else {
      label = 658;
     }
    } else {
     label = 658;
    }
    if ((label|0) == 658) {
     label = 0;
     $2230 = $1;
     $2231 = (($2230) + 32|0);
     $2232 = HEAP32[$2231>>2]|0;
     $2233 = $1;
     $2234 = (($2233) + 20|0);
     $2235 = HEAP32[$2234>>2]|0;
     $2236 = (($2235) + ($2232)|0);
     $2237 = $1;
     $2238 = (($2237) + 96|0);
     HEAP32[$2238>>2] = $2236;
     $2239 = $1;
     $2240 = (($2239) + 64|0);
     $2241 = HEAP32[$2240>>2]|0;
     $2242 = ($2241|0)!=(0);
     if ($2242) {
      $2243 = $frame_size;
      $2244 = $1;
      $2245 = (($2244) + 68|0);
      $2246 = HEAP32[$2245>>2]|0;
      $2247 = (($2246) + ($2243))|0;
      HEAP32[$2245>>2] = $2247;
     }
    }
    $2248 = $frame_size;
    $2249 = $1;
    $2250 = (($2249) + 96|0);
    $2251 = HEAP32[$2250>>2]|0;
    $2252 = (($2251) + ($2248)|0);
    $2253 = $1;
    $2254 = (($2253) + 100|0);
    HEAP32[$2254>>2] = $2252;
    $2255 = $2;
    $2256 = $frame_size;
    $2257 = ($2255|0)<($2256|0);
    if ($2257) {
     $2258 = $2;
     $2260 = $2258;
    } else {
     $2259 = $frame_size;
     $2260 = $2259;
    }
    $i = $2260;
    $2261 = $1;
    $2262 = HEAP32[$2261>>2]|0;
    $2263 = (($2262) + 12|0);
    $2264 = HEAP32[$2263>>2]|0;
    $2265 = $1;
    $2266 = (($2265) + 8|0);
    $2267 = HEAP32[$2266>>2]|0;
    $2268 = $1;
    $2269 = (($2268) + 96|0);
    $2270 = HEAP32[$2269>>2]|0;
    $2271 = $i;
    $2272 = (FUNCTION_TABLE_iiii[$2264 & 15]($2267,$2270,$2271)|0);
    $2273 = $i;
    $2274 = ($2272|0)!=($2273|0);
    if ($2274) {
     label = 665;
     break;
    }
    $2277 = $i;
    $2278 = $1;
    $2279 = (($2278) + 96|0);
    $2280 = HEAP32[$2279>>2]|0;
    $2281 = (($2280) + ($2277)|0);
    HEAP32[$2279>>2] = $2281;
    $2282 = $i;
    $2283 = $1;
    $2284 = (($2283) + 12|0);
    $2285 = HEAP32[$2284>>2]|0;
    $2286 = (($2285) + ($2282))|0;
    HEAP32[$2284>>2] = $2286;
    $2287 = $i;
    $2288 = $2;
    $2289 = (($2288) - ($2287))|0;
    $2 = $2289;
    $2290 = $frame_size;
    $2291 = $1;
    $2292 = (($2291) + 32|0);
    $2293 = HEAP32[$2292>>2]|0;
    $2294 = (($2293) + ($2290))|0;
    HEAP32[$2292>>2] = $2294;
    $2295 = $1;
    $2296 = (($2295) + 36|0);
    $2297 = HEAP32[$2296>>2]|0;
    $2298 = (($2297) + 1)|0;
    HEAP32[$2296>>2] = $2298;
    $2299 = $window_posn;
    $2300 = $1;
    $2301 = (($2300) + 24|0);
    $2302 = HEAP32[$2301>>2]|0;
    $2303 = ($2299|0)==($2302|0);
    if ($2303) {
     $window_posn = 0;
    }
    $2304 = $1;
    $2305 = (($2304) + 32|0);
    $2306 = HEAP32[$2305>>2]|0;
    $2307 = $1;
    $2308 = (($2307) + 24|0);
    $2309 = HEAP32[$2308>>2]|0;
    $2310 = ($2306|0)==($2309|0);
    if ($2310) {
     $2311 = $1;
     $2312 = (($2311) + 32|0);
     HEAP32[$2312>>2] = 0;
    }
   }
   if ((label|0) == 21) {
    $115 = $1;
    $116 = (($115) + 80|0);
    HEAP32[$116>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 32) {
    $139 = $1;
    $140 = (($139) + 80|0);
    $141 = HEAP32[$140>>2]|0;
    $0 = $141;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 38) {
    $157 = $1;
    $158 = (($157) + 80|0);
    $159 = HEAP32[$158>>2]|0;
    $0 = $159;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 54) {
    $198 = $1;
    $199 = (($198) + 80|0);
    $200 = HEAP32[$199>>2]|0;
    $0 = $200;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 60) {
    $216 = $1;
    $217 = (($216) + 80|0);
    $218 = HEAP32[$217>>2]|0;
    $0 = $218;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 75) {
    $255 = $1;
    $256 = (($255) + 80|0);
    $257 = HEAP32[$256>>2]|0;
    $0 = $257;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 81) {
    $273 = $1;
    $274 = (($273) + 80|0);
    $275 = HEAP32[$274>>2]|0;
    $0 = $275;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 101) {
    $361 = $1;
    $362 = (($361) + 80|0);
    $363 = HEAP32[$362>>2]|0;
    $0 = $363;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 113) {
    $380 = $1;
    $381 = (($380) + 80|0);
    $382 = HEAP32[$381>>2]|0;
    $0 = $382;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 119) {
    $398 = $1;
    $399 = (($398) + 80|0);
    $400 = HEAP32[$399>>2]|0;
    $0 = $400;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 134) {
    $440 = $1;
    $441 = (($440) + 80|0);
    $442 = HEAP32[$441>>2]|0;
    $0 = $442;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 140) {
    $458 = $1;
    $459 = (($458) + 80|0);
    $460 = HEAP32[$459>>2]|0;
    $0 = $460;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 155) {
    $497 = $1;
    $498 = (($497) + 80|0);
    $499 = HEAP32[$498>>2]|0;
    $0 = $499;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 161) {
    $515 = $1;
    $516 = (($515) + 80|0);
    $517 = HEAP32[$516>>2]|0;
    $0 = $517;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 179) {
    $568 = $1;
    $569 = (($568) + 80|0);
    $570 = HEAP32[$569>>2]|0;
    $0 = $570;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 185) {
    $586 = $1;
    $587 = (($586) + 80|0);
    $588 = HEAP32[$587>>2]|0;
    $0 = $588;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 195) {
    $631 = $1;
    $632 = (($631) + 80|0);
    HEAP32[$632>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 201) {
    $650 = $1;
    $651 = (($650) + 80|0);
    $652 = HEAP32[$651>>2]|0;
    $0 = $652;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 209) {
    $688 = $1;
    $689 = (($688) + 80|0);
    $690 = HEAP32[$689>>2]|0;
    $0 = $690;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 214) {
    $709 = $1;
    $710 = (($709) + 80|0);
    HEAP32[$710>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 221) {
    $736 = $1;
    $737 = (($736) + 80|0);
    $738 = HEAP32[$737>>2]|0;
    $0 = $738;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 230) {
    $768 = $1;
    $769 = (($768) + 80|0);
    HEAP32[$769>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 243) {
    $784 = $1;
    $785 = (($784) + 80|0);
    $786 = HEAP32[$785>>2]|0;
    $0 = $786;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 249) {
    $802 = $1;
    $803 = (($802) + 80|0);
    $804 = HEAP32[$803>>2]|0;
    $0 = $804;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 262) {
    $839 = $1;
    $840 = (($839) + 80|0);
    $841 = HEAP32[$840>>2]|0;
    $0 = $841;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 268) {
    $908 = $1;
    $909 = (($908) + 80|0);
    HEAP32[$909>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 283) {
    $939 = $1;
    $940 = (($939) + 80|0);
    $941 = HEAP32[$940>>2]|0;
    $0 = $941;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 289) {
    $957 = $1;
    $958 = (($957) + 80|0);
    $959 = HEAP32[$958>>2]|0;
    $0 = $959;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 299) {
    $994 = $1;
    $995 = (($994) + 80|0);
    HEAP32[$995>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 309) {
    $1047 = $1;
    $1048 = (($1047) + 80|0);
    HEAP32[$1048>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 318) {
    $1057 = $1;
    $1058 = (($1057) + 80|0);
    $1059 = HEAP32[$1058>>2]|0;
    $0 = $1059;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 324) {
    $1075 = $1;
    $1076 = (($1075) + 80|0);
    $1077 = HEAP32[$1076>>2]|0;
    $0 = $1077;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 334) {
    $1112 = $1;
    $1113 = (($1112) + 80|0);
    HEAP32[$1113>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 354) {
    $1175 = $1;
    $1176 = (($1175) + 80|0);
    $1177 = HEAP32[$1176>>2]|0;
    $0 = $1177;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 360) {
    $1193 = $1;
    $1194 = (($1193) + 80|0);
    $1195 = HEAP32[$1194>>2]|0;
    $0 = $1195;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 369) {
    $1244 = $1;
    $1245 = (($1244) + 80|0);
    HEAP32[$1245>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 372) {
    $1261 = $1;
    $1262 = (($1261) + 80|0);
    HEAP32[$1262>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 399) {
    $1321 = $1;
    $1322 = (($1321) + 80|0);
    $1323 = HEAP32[$1322>>2]|0;
    $0 = $1323;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 405) {
    $1339 = $1;
    $1340 = (($1339) + 80|0);
    $1341 = HEAP32[$1340>>2]|0;
    $0 = $1341;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 415) {
    $1376 = $1;
    $1377 = (($1376) + 80|0);
    HEAP32[$1377>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 425) {
    $1429 = $1;
    $1430 = (($1429) + 80|0);
    HEAP32[$1430>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 434) {
    $1439 = $1;
    $1440 = (($1439) + 80|0);
    $1441 = HEAP32[$1440>>2]|0;
    $0 = $1441;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 440) {
    $1457 = $1;
    $1458 = (($1457) + 80|0);
    $1459 = HEAP32[$1458>>2]|0;
    $0 = $1459;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 450) {
    $1494 = $1;
    $1495 = (($1494) + 80|0);
    HEAP32[$1495>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 470) {
    $1562 = $1;
    $1563 = (($1562) + 80|0);
    $1564 = HEAP32[$1563>>2]|0;
    $0 = $1564;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 476) {
    $1580 = $1;
    $1581 = (($1580) + 80|0);
    $1582 = HEAP32[$1581>>2]|0;
    $0 = $1582;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 491) {
    $1627 = $1;
    $1628 = (($1627) + 80|0);
    $1629 = HEAP32[$1628>>2]|0;
    $0 = $1629;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 497) {
    $1645 = $1;
    $1646 = (($1645) + 80|0);
    $1647 = HEAP32[$1646>>2]|0;
    $0 = $1647;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 507) {
    $1682 = $1;
    $1683 = (($1682) + 80|0);
    HEAP32[$1683>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 523) {
    $1728 = $1;
    $1729 = (($1728) + 80|0);
    $1730 = HEAP32[$1729>>2]|0;
    $0 = $1730;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 529) {
    $1746 = $1;
    $1747 = (($1746) + 80|0);
    $1748 = HEAP32[$1747>>2]|0;
    $0 = $1748;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 539) {
    $1783 = $1;
    $1784 = (($1783) + 80|0);
    HEAP32[$1784>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 555) {
    $1830 = $1;
    $1831 = (($1830) + 80|0);
    $1832 = HEAP32[$1831>>2]|0;
    $0 = $1832;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 561) {
    $1848 = $1;
    $1849 = (($1848) + 80|0);
    $1850 = HEAP32[$1849>>2]|0;
    $0 = $1850;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 574) {
    $1896 = $1;
    $1897 = (($1896) + 80|0);
    HEAP32[$1897>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 577) {
    $1913 = $1;
    $1914 = (($1913) + 80|0);
    HEAP32[$1914>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 600) {
    $1983 = $1;
    $1984 = (($1983) + 80|0);
    $1985 = HEAP32[$1984>>2]|0;
    $0 = $1985;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 609) {
    $2012 = $1;
    $2013 = (($2012) + 80|0);
    HEAP32[$2013>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 612) {
    $2022 = $1;
    $2023 = (($2022) + 80|0);
    HEAP32[$2023>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 616) {
    $2037 = $1;
    $2038 = (($2037) + 80|0);
    HEAP32[$2038>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 625) {
    $2049 = $1;
    $2050 = (($2049) + 80|0);
    $2051 = HEAP32[$2050>>2]|0;
    $0 = $2051;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 631) {
    $2067 = $1;
    $2068 = (($2067) + 80|0);
    $2069 = HEAP32[$2068>>2]|0;
    $0 = $2069;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 641) {
    $2110 = $1;
    $2111 = (($2110) + 80|0);
    HEAP32[$2111>>2] = 11;
    $0 = 11;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 665) {
    $2275 = $1;
    $2276 = (($2275) + 80|0);
    HEAP32[$2276>>2] = 4;
    $0 = 4;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
   else if ((label|0) == 671) {
    $2313 = $2;
    $2314 = ($2313|0)!=(0);
    if ($2314) {
     $2315 = $1;
     $2316 = (($2315) + 80|0);
     HEAP32[$2316>>2] = 11;
     $0 = 11;
     $2341 = $0;
     STACKTOP = sp;return ($2341|0);
    }
    $2317 = $i_ptr;
    $2318 = $1;
    $2319 = (($2318) + 88|0);
    HEAP32[$2319>>2] = $2317;
    $2320 = $i_end;
    $2321 = $1;
    $2322 = (($2321) + 92|0);
    HEAP32[$2322>>2] = $2320;
    $2323 = $bit_buffer;
    $2324 = $1;
    $2325 = (($2324) + 104|0);
    HEAP32[$2325>>2] = $2323;
    $2326 = $bits_left;
    $2327 = $1;
    $2328 = (($2327) + 108|0);
    HEAP32[$2328>>2] = $2326;
    $2329 = $window_posn;
    $2330 = $1;
    $2331 = (($2330) + 28|0);
    HEAP32[$2331>>2] = $2329;
    $2332 = $R0;
    $2333 = $1;
    $2334 = (($2333) + 44|0);
    HEAP32[$2334>>2] = $2332;
    $2335 = $R1;
    $2336 = $1;
    $2337 = (($2336) + 48|0);
    HEAP32[$2337>>2] = $2335;
    $2338 = $R2;
    $2339 = $1;
    $2340 = (($2339) + 52|0);
    HEAP32[$2340>>2] = $2338;
    $0 = 0;
    $2341 = $0;
    STACKTOP = sp;return ($2341|0);
   }
  }
 }
 $0 = 1;
 $2341 = $0;
 STACKTOP = sp;return ($2341|0);
}
function _read_input($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $p;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 112|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iiii[$5 & 15]($8,$11,$14)|0);
 $read = $15;
 $16 = $read;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $1;
  $19 = (($18) + 80|0);
  HEAP32[$19>>2] = 3;
  $0 = 3;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $20 = $read;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $22 = $1;
   $23 = (($22) + 76|0);
   $24 = HEAP8[$23]|0;
   $25 = ($24<<24>>24)!=(0);
   if ($25) {
    $26 = $1;
    $27 = (($26) + 80|0);
    HEAP32[$27>>2] = 3;
    $0 = 3;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   } else {
    $read = 2;
    $28 = $1;
    $29 = (($28) + 84|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1|0);
    HEAP8[$31] = 0;
    $32 = $1;
    $33 = (($32) + 84|0);
    $34 = HEAP32[$33>>2]|0;
    HEAP8[$34] = 0;
    $35 = $1;
    $36 = (($35) + 76|0);
    HEAP8[$36] = 1;
    break;
   }
  }
 } while(0);
 $37 = $1;
 $38 = (($37) + 84|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $1;
 $41 = (($40) + 88|0);
 HEAP32[$41>>2] = $39;
 $42 = $read;
 $43 = $1;
 $44 = (($43) + 84|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42)|0);
 $47 = $1;
 $48 = (($47) + 92|0);
 HEAP32[$48>>2] = $46;
 $0 = 0;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _make_decode_table($nsyms,$nbits,$length,$table) {
 $nsyms = $nsyms|0;
 $nbits = $nbits|0;
 $length = $length|0;
 $table = $table|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bit_mask = 0, $bit_num = 0, $fill = 0, $leaf = 0, $next_symbol = 0, $pos = 0, $sym = 0, $table_mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $nsyms;
 $2 = $nbits;
 $3 = $length;
 $4 = $table;
 $pos = 0;
 $5 = $2;
 $6 = 1 << $5;
 $table_mask = $6;
 $7 = $table_mask;
 $8 = $7 >>> 1;
 $bit_mask = $8;
 $bit_num = 1;
 L1: while(1) {
  $9 = $bit_num;
  $10 = $9&255;
  $11 = $2;
  $12 = ($10>>>0)<=($11>>>0);
  if (!($12)) {
   break;
  }
  $sym = 0;
  while(1) {
   $13 = $sym;
   $14 = $13&65535;
   $15 = $1;
   $16 = ($14>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $sym;
   $18 = $17&65535;
   $19 = $3;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20]|0;
   $22 = $21&255;
   $23 = $bit_num;
   $24 = $23&255;
   $25 = ($22|0)!=($24|0);
   if ($25) {
   } else {
    $26 = $pos;
    $leaf = $26;
    $27 = $bit_mask;
    $28 = $pos;
    $29 = (($28) + ($27))|0;
    $pos = $29;
    $30 = $table_mask;
    $31 = ($29>>>0)>($30>>>0);
    if ($31) {
     label = 8;
     break L1;
    }
    $32 = $bit_mask;
    $fill = $32;
    while(1) {
     $33 = $fill;
     $34 = (($33) + -1)|0;
     $fill = $34;
     $35 = ($33>>>0)>(0);
     if (!($35)) {
      break;
     }
     $36 = $sym;
     $37 = $leaf;
     $38 = (($37) + 1)|0;
     $leaf = $38;
     $39 = $4;
     $40 = (($39) + ($37<<1)|0);
     HEAP16[$40>>1] = $36;
    }
   }
   $41 = $sym;
   $42 = (($41) + 1)<<16>>16;
   $sym = $42;
  }
  $43 = $bit_mask;
  $44 = $43 >>> 1;
  $bit_mask = $44;
  $45 = $bit_num;
  $46 = (($45) + 1)<<24>>24;
  $bit_num = $46;
 }
 if ((label|0) == 8) {
  $0 = 1;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 $47 = $pos;
 $48 = $table_mask;
 $49 = ($47|0)==($48|0);
 if ($49) {
  $0 = 0;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 $50 = $pos;
 $51 = $50&65535;
 $sym = $51;
 while(1) {
  $52 = $sym;
  $53 = $52&65535;
  $54 = $table_mask;
  $55 = ($53>>>0)<($54>>>0);
  if (!($55)) {
   break;
  }
  $56 = $sym;
  $57 = $56&65535;
  $58 = $4;
  $59 = (($58) + ($57<<1)|0);
  HEAP16[$59>>1] = -1;
  $60 = $sym;
  $61 = (($60) + 1)<<16>>16;
  $sym = $61;
 }
 $62 = $table_mask;
 $63 = $62 >>> 1;
 $64 = $1;
 $65 = ($63>>>0)<($64>>>0);
 if ($65) {
  $66 = $1;
  $70 = $66;
 } else {
  $67 = $table_mask;
  $68 = $67 >>> 1;
  $70 = $68;
 }
 $69 = $70&65535;
 $next_symbol = $69;
 $71 = $pos;
 $72 = $71 << 16;
 $pos = $72;
 $73 = $table_mask;
 $74 = $73 << 16;
 $table_mask = $74;
 $bit_mask = 32768;
 $75 = $2;
 $76 = (($75) + 1)|0;
 $77 = $76&255;
 $bit_num = $77;
 L35: while(1) {
  $78 = $bit_num;
  $79 = $78&255;
  $80 = ($79|0)<=(16);
  if (!($80)) {
   label = 45;
   break;
  }
  $sym = 0;
  while(1) {
   $81 = $sym;
   $82 = $81&65535;
   $83 = $1;
   $84 = ($82>>>0)<($83>>>0);
   if (!($84)) {
    break;
   }
   $85 = $sym;
   $86 = $85&65535;
   $87 = $3;
   $88 = (($87) + ($86)|0);
   $89 = HEAP8[$88]|0;
   $90 = $89&255;
   $91 = $bit_num;
   $92 = $91&255;
   $93 = ($90|0)!=($92|0);
   if ($93) {
   } else {
    $94 = $pos;
    $95 = $94 >>> 16;
    $leaf = $95;
    $fill = 0;
    while(1) {
     $96 = $fill;
     $97 = $bit_num;
     $98 = $97&255;
     $99 = $2;
     $100 = (($98) - ($99))|0;
     $101 = ($96>>>0)<($100>>>0);
     if (!($101)) {
      break;
     }
     $102 = $leaf;
     $103 = $4;
     $104 = (($103) + ($102<<1)|0);
     $105 = HEAP16[$104>>1]|0;
     $106 = $105&65535;
     $107 = ($106|0)==(65535);
     if ($107) {
      $108 = $next_symbol;
      $109 = $108&65535;
      $110 = $109 << 1;
      $111 = $4;
      $112 = (($111) + ($110<<1)|0);
      HEAP16[$112>>1] = -1;
      $113 = $next_symbol;
      $114 = $113&65535;
      $115 = $114 << 1;
      $116 = (($115) + 1)|0;
      $117 = $4;
      $118 = (($117) + ($116<<1)|0);
      HEAP16[$118>>1] = -1;
      $119 = $next_symbol;
      $120 = (($119) + 1)<<16>>16;
      $next_symbol = $120;
      $121 = $leaf;
      $122 = $4;
      $123 = (($122) + ($121<<1)|0);
      HEAP16[$123>>1] = $119;
     }
     $124 = $leaf;
     $125 = $4;
     $126 = (($125) + ($124<<1)|0);
     $127 = HEAP16[$126>>1]|0;
     $128 = $127&65535;
     $129 = $128 << 1;
     $leaf = $129;
     $130 = $pos;
     $131 = $fill;
     $132 = (15 - ($131))|0;
     $133 = $130 >>> $132;
     $134 = $133 & 1;
     $135 = ($134|0)!=(0);
     if ($135) {
      $136 = $leaf;
      $137 = (($136) + 1)|0;
      $leaf = $137;
     }
     $138 = $fill;
     $139 = (($138) + 1)|0;
     $fill = $139;
    }
    $140 = $sym;
    $141 = $leaf;
    $142 = $4;
    $143 = (($142) + ($141<<1)|0);
    HEAP16[$143>>1] = $140;
    $144 = $bit_mask;
    $145 = $pos;
    $146 = (($145) + ($144))|0;
    $pos = $146;
    $147 = $table_mask;
    $148 = ($146>>>0)>($147>>>0);
    if ($148) {
     label = 40;
     break L35;
    }
   }
   $149 = $sym;
   $150 = (($149) + 1)<<16>>16;
   $sym = $150;
  }
  $151 = $bit_mask;
  $152 = $151 >>> 1;
  $bit_mask = $152;
  $153 = $bit_num;
  $154 = (($153) + 1)<<24>>24;
  $bit_num = $154;
 }
 if ((label|0) == 40) {
  $0 = 1;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 else if ((label|0) == 45) {
  $155 = $pos;
  $156 = $table_mask;
  $157 = ($155|0)==($156|0);
  $158 = $157 ? 0 : 1;
  $0 = $158;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 return 0|0;
}
function _lzxd_read_lens($lzx,$lens,$first,$last) {
 $lzx = $lzx|0;
 $lens = $lens|0;
 $first = $first|0;
 $last = $last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b0 = 0, $b01 = 0, $b03 = 0, $b05 = 0, $b07 = 0;
 var $b09 = 0, $b1 = 0, $b110 = 0, $b12 = 0, $b14 = 0, $b16 = 0, $b18 = 0, $bit_buffer = 0, $bits_left = 0, $i = 0, $i_end = 0, $i_ptr = 0, $sym = 0, $x = 0, $y = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = $lzx;
 $2 = $lens;
 $3 = $first;
 $4 = $last;
 $5 = $1;
 $6 = (($5) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 $i_ptr = $7;
 $8 = $1;
 $9 = (($8) + 92|0);
 $10 = HEAP32[$9>>2]|0;
 $i_end = $10;
 $11 = $1;
 $12 = (($11) + 104|0);
 $13 = HEAP32[$12>>2]|0;
 $bit_buffer = $13;
 $14 = $1;
 $15 = (($14) + 108|0);
 $16 = HEAP32[$15>>2]|0;
 $bits_left = $16;
 $x = 0;
 L3: while(1) {
  $17 = $x;
  $18 = ($17>>>0)<(20);
  if (!($18)) {
   label = 28;
   break;
  }
  while(1) {
   $19 = $bits_left;
   $20 = ($19|0)<(4);
   if (!($20)) {
    break;
   }
   $21 = $i_ptr;
   $22 = $i_end;
   $23 = ($21>>>0)>=($22>>>0);
   if ($23) {
    $24 = $1;
    $25 = (_read_input($24)|0);
    $26 = ($25|0)!=(0);
    if ($26) {
     label = 13;
     break L3;
    }
    $30 = $1;
    $31 = (($30) + 88|0);
    $32 = HEAP32[$31>>2]|0;
    $i_ptr = $32;
    $33 = $1;
    $34 = (($33) + 92|0);
    $35 = HEAP32[$34>>2]|0;
    $i_end = $35;
   }
   $36 = $i_ptr;
   $37 = (($36) + 1|0);
   $i_ptr = $37;
   $38 = HEAP8[$36]|0;
   $b0 = $38;
   $39 = $i_ptr;
   $40 = $i_end;
   $41 = ($39>>>0)>=($40>>>0);
   if ($41) {
    $42 = $1;
    $43 = (_read_input($42)|0);
    $44 = ($43|0)!=(0);
    if ($44) {
     label = 19;
     break L3;
    }
    $48 = $1;
    $49 = (($48) + 88|0);
    $50 = HEAP32[$49>>2]|0;
    $i_ptr = $50;
    $51 = $1;
    $52 = (($51) + 92|0);
    $53 = HEAP32[$52>>2]|0;
    $i_end = $53;
   }
   $54 = $i_ptr;
   $55 = (($54) + 1|0);
   $i_ptr = $55;
   $56 = HEAP8[$54]|0;
   $b1 = $56;
   $57 = $b1;
   $58 = $57&255;
   $59 = $58 << 8;
   $60 = $b0;
   $61 = $60&255;
   $62 = $59 | $61;
   $63 = $bits_left;
   $64 = (16 - ($63))|0;
   $65 = $62 << $64;
   $66 = $bit_buffer;
   $67 = $66 | $65;
   $bit_buffer = $67;
   $68 = $bits_left;
   $69 = (($68) + 16)|0;
   $bits_left = $69;
  }
  $70 = $bit_buffer;
  $71 = $70 >>> 28;
  $y = $71;
  $72 = $bit_buffer;
  $73 = $72 << 4;
  $bit_buffer = $73;
  $74 = $bits_left;
  $75 = (($74) - 4)|0;
  $bits_left = $75;
  $76 = $y;
  $77 = $76&255;
  $78 = $x;
  $79 = $1;
  $80 = (($79) + 116|0);
  $81 = (($80) + ($78)|0);
  HEAP8[$81] = $77;
  $82 = $x;
  $83 = (($82) + 1)|0;
  $x = $83;
 }
 if ((label|0) == 13) {
  $27 = $1;
  $28 = (($27) + 80|0);
  $29 = HEAP32[$28>>2]|0;
  $0 = $29;
  $534 = $0;
  STACKTOP = sp;return ($534|0);
 }
 else if ((label|0) == 19) {
  $45 = $1;
  $46 = (($45) + 80|0);
  $47 = HEAP32[$46>>2]|0;
  $0 = $47;
  $534 = $0;
  STACKTOP = sp;return ($534|0);
 }
 else if ((label|0) == 28) {
  $84 = $1;
  $85 = (($84) + 116|0);
  $86 = $1;
  $87 = (($86) + 1306|0);
  $88 = (_make_decode_table(20,6,$85,$87)|0);
  $89 = ($88|0)!=(0);
  if ($89) {
   $90 = $1;
   $91 = (($90) + 80|0);
   HEAP32[$91>>2] = 11;
   $0 = 11;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  $92 = $3;
  $x = $92;
  L39: while(1) {
   $93 = $x;
   $94 = $4;
   $95 = ($93>>>0)<($94>>>0);
   if (!($95)) {
    label = 178;
    break;
   }
   while(1) {
    $96 = $bits_left;
    $97 = ($96|0)<(16);
    if (!($97)) {
     break;
    }
    $98 = $i_ptr;
    $99 = $i_end;
    $100 = ($98>>>0)>=($99>>>0);
    if ($100) {
     $101 = $1;
     $102 = (_read_input($101)|0);
     $103 = ($102|0)!=(0);
     if ($103) {
      label = 40;
      break L39;
     }
     $107 = $1;
     $108 = (($107) + 88|0);
     $109 = HEAP32[$108>>2]|0;
     $i_ptr = $109;
     $110 = $1;
     $111 = (($110) + 92|0);
     $112 = HEAP32[$111>>2]|0;
     $i_end = $112;
    }
    $113 = $i_ptr;
    $114 = (($113) + 1|0);
    $i_ptr = $114;
    $115 = HEAP8[$113]|0;
    $b01 = $115;
    $116 = $i_ptr;
    $117 = $i_end;
    $118 = ($116>>>0)>=($117>>>0);
    if ($118) {
     $119 = $1;
     $120 = (_read_input($119)|0);
     $121 = ($120|0)!=(0);
     if ($121) {
      label = 46;
      break L39;
     }
     $125 = $1;
     $126 = (($125) + 88|0);
     $127 = HEAP32[$126>>2]|0;
     $i_ptr = $127;
     $128 = $1;
     $129 = (($128) + 92|0);
     $130 = HEAP32[$129>>2]|0;
     $i_end = $130;
    }
    $131 = $i_ptr;
    $132 = (($131) + 1|0);
    $i_ptr = $132;
    $133 = HEAP8[$131]|0;
    $b12 = $133;
    $134 = $b12;
    $135 = $134&255;
    $136 = $135 << 8;
    $137 = $b01;
    $138 = $137&255;
    $139 = $136 | $138;
    $140 = $bits_left;
    $141 = (16 - ($140))|0;
    $142 = $139 << $141;
    $143 = $bit_buffer;
    $144 = $143 | $142;
    $bit_buffer = $144;
    $145 = $bits_left;
    $146 = (($145) + 16)|0;
    $bits_left = $146;
   }
   $147 = $bit_buffer;
   $148 = $147 >>> 26;
   $149 = $1;
   $150 = (($149) + 1306|0);
   $151 = (($150) + ($148<<1)|0);
   $152 = HEAP16[$151>>1]|0;
   $sym = $152;
   $153 = $sym;
   $154 = $153&65535;
   $155 = ($154|0)>=(20);
   if ($155) {
    $i = 67108864;
    while(1) {
     $156 = $i;
     $157 = $156 >> 1;
     $i = $157;
     $158 = ($157|0)==(0);
     if ($158) {
      label = 56;
      break L39;
     }
     $161 = $sym;
     $162 = $161&65535;
     $163 = $162 << 1;
     $164 = $bit_buffer;
     $165 = $i;
     $166 = $164 & $165;
     $167 = ($166|0)!=(0);
     $168 = $167 ? 1 : 0;
     $169 = $163 | $168;
     $170 = $1;
     $171 = (($170) + 1306|0);
     $172 = (($171) + ($169<<1)|0);
     $173 = HEAP16[$172>>1]|0;
     $sym = $173;
     $174 = $sym;
     $175 = $174&65535;
     $176 = ($175|0)>=(20);
     if (!($176)) {
      break;
     }
    }
   }
   $177 = $sym;
   $178 = $177&65535;
   $z = $178;
   $179 = $sym;
   $180 = $179&65535;
   $181 = $1;
   $182 = (($181) + 116|0);
   $183 = (($182) + ($180)|0);
   $184 = HEAP8[$183]|0;
   $185 = $184&255;
   $i = $185;
   $186 = $i;
   $187 = $bit_buffer;
   $188 = $187 << $186;
   $bit_buffer = $188;
   $189 = $i;
   $190 = $bits_left;
   $191 = (($190) - ($189))|0;
   $bits_left = $191;
   $192 = $z;
   $193 = ($192|0)==(17);
   if ($193) {
    while(1) {
     $194 = $bits_left;
     $195 = ($194|0)<(4);
     if (!($195)) {
      break;
     }
     $196 = $i_ptr;
     $197 = $i_end;
     $198 = ($196>>>0)>=($197>>>0);
     if ($198) {
      $199 = $1;
      $200 = (_read_input($199)|0);
      $201 = ($200|0)!=(0);
      if ($201) {
       label = 71;
       break L39;
      }
      $205 = $1;
      $206 = (($205) + 88|0);
      $207 = HEAP32[$206>>2]|0;
      $i_ptr = $207;
      $208 = $1;
      $209 = (($208) + 92|0);
      $210 = HEAP32[$209>>2]|0;
      $i_end = $210;
     }
     $211 = $i_ptr;
     $212 = (($211) + 1|0);
     $i_ptr = $212;
     $213 = HEAP8[$211]|0;
     $b03 = $213;
     $214 = $i_ptr;
     $215 = $i_end;
     $216 = ($214>>>0)>=($215>>>0);
     if ($216) {
      $217 = $1;
      $218 = (_read_input($217)|0);
      $219 = ($218|0)!=(0);
      if ($219) {
       label = 77;
       break L39;
      }
      $223 = $1;
      $224 = (($223) + 88|0);
      $225 = HEAP32[$224>>2]|0;
      $i_ptr = $225;
      $226 = $1;
      $227 = (($226) + 92|0);
      $228 = HEAP32[$227>>2]|0;
      $i_end = $228;
     }
     $229 = $i_ptr;
     $230 = (($229) + 1|0);
     $i_ptr = $230;
     $231 = HEAP8[$229]|0;
     $b14 = $231;
     $232 = $b14;
     $233 = $232&255;
     $234 = $233 << 8;
     $235 = $b03;
     $236 = $235&255;
     $237 = $234 | $236;
     $238 = $bits_left;
     $239 = (16 - ($238))|0;
     $240 = $237 << $239;
     $241 = $bit_buffer;
     $242 = $241 | $240;
     $bit_buffer = $242;
     $243 = $bits_left;
     $244 = (($243) + 16)|0;
     $bits_left = $244;
    }
    $245 = $bit_buffer;
    $246 = $245 >>> 28;
    $y = $246;
    $247 = $bit_buffer;
    $248 = $247 << 4;
    $bit_buffer = $248;
    $249 = $bits_left;
    $250 = (($249) - 4)|0;
    $bits_left = $250;
    $251 = $y;
    $252 = (($251) + 4)|0;
    $y = $252;
    while(1) {
     $253 = $y;
     $254 = (($253) + -1)|0;
     $y = $254;
     $255 = ($253|0)!=(0);
     if (!($255)) {
      break;
     }
     $256 = $x;
     $257 = (($256) + 1)|0;
     $x = $257;
     $258 = $2;
     $259 = (($258) + ($256)|0);
     HEAP8[$259] = 0;
    }
   } else {
    $260 = $z;
    $261 = ($260|0)==(18);
    if ($261) {
     while(1) {
      $262 = $bits_left;
      $263 = ($262|0)<(5);
      if (!($263)) {
       break;
      }
      $264 = $i_ptr;
      $265 = $i_end;
      $266 = ($264>>>0)>=($265>>>0);
      if ($266) {
       $267 = $1;
       $268 = (_read_input($267)|0);
       $269 = ($268|0)!=(0);
       if ($269) {
        label = 97;
        break L39;
       }
       $273 = $1;
       $274 = (($273) + 88|0);
       $275 = HEAP32[$274>>2]|0;
       $i_ptr = $275;
       $276 = $1;
       $277 = (($276) + 92|0);
       $278 = HEAP32[$277>>2]|0;
       $i_end = $278;
      }
      $279 = $i_ptr;
      $280 = (($279) + 1|0);
      $i_ptr = $280;
      $281 = HEAP8[$279]|0;
      $b05 = $281;
      $282 = $i_ptr;
      $283 = $i_end;
      $284 = ($282>>>0)>=($283>>>0);
      if ($284) {
       $285 = $1;
       $286 = (_read_input($285)|0);
       $287 = ($286|0)!=(0);
       if ($287) {
        label = 103;
        break L39;
       }
       $291 = $1;
       $292 = (($291) + 88|0);
       $293 = HEAP32[$292>>2]|0;
       $i_ptr = $293;
       $294 = $1;
       $295 = (($294) + 92|0);
       $296 = HEAP32[$295>>2]|0;
       $i_end = $296;
      }
      $297 = $i_ptr;
      $298 = (($297) + 1|0);
      $i_ptr = $298;
      $299 = HEAP8[$297]|0;
      $b16 = $299;
      $300 = $b16;
      $301 = $300&255;
      $302 = $301 << 8;
      $303 = $b05;
      $304 = $303&255;
      $305 = $302 | $304;
      $306 = $bits_left;
      $307 = (16 - ($306))|0;
      $308 = $305 << $307;
      $309 = $bit_buffer;
      $310 = $309 | $308;
      $bit_buffer = $310;
      $311 = $bits_left;
      $312 = (($311) + 16)|0;
      $bits_left = $312;
     }
     $313 = $bit_buffer;
     $314 = $313 >>> 27;
     $y = $314;
     $315 = $bit_buffer;
     $316 = $315 << 5;
     $bit_buffer = $316;
     $317 = $bits_left;
     $318 = (($317) - 5)|0;
     $bits_left = $318;
     $319 = $y;
     $320 = (($319) + 20)|0;
     $y = $320;
     while(1) {
      $321 = $y;
      $322 = (($321) + -1)|0;
      $y = $322;
      $323 = ($321|0)!=(0);
      if (!($323)) {
       break;
      }
      $324 = $x;
      $325 = (($324) + 1)|0;
      $x = $325;
      $326 = $2;
      $327 = (($326) + ($324)|0);
      HEAP8[$327] = 0;
     }
    } else {
     $328 = $z;
     $329 = ($328|0)==(19);
     if ($329) {
      while(1) {
       $330 = $bits_left;
       $331 = ($330|0)<(1);
       if (!($331)) {
        break;
       }
       $332 = $i_ptr;
       $333 = $i_end;
       $334 = ($332>>>0)>=($333>>>0);
       if ($334) {
        $335 = $1;
        $336 = (_read_input($335)|0);
        $337 = ($336|0)!=(0);
        if ($337) {
         label = 123;
         break L39;
        }
        $341 = $1;
        $342 = (($341) + 88|0);
        $343 = HEAP32[$342>>2]|0;
        $i_ptr = $343;
        $344 = $1;
        $345 = (($344) + 92|0);
        $346 = HEAP32[$345>>2]|0;
        $i_end = $346;
       }
       $347 = $i_ptr;
       $348 = (($347) + 1|0);
       $i_ptr = $348;
       $349 = HEAP8[$347]|0;
       $b07 = $349;
       $350 = $i_ptr;
       $351 = $i_end;
       $352 = ($350>>>0)>=($351>>>0);
       if ($352) {
        $353 = $1;
        $354 = (_read_input($353)|0);
        $355 = ($354|0)!=(0);
        if ($355) {
         label = 129;
         break L39;
        }
        $359 = $1;
        $360 = (($359) + 88|0);
        $361 = HEAP32[$360>>2]|0;
        $i_ptr = $361;
        $362 = $1;
        $363 = (($362) + 92|0);
        $364 = HEAP32[$363>>2]|0;
        $i_end = $364;
       }
       $365 = $i_ptr;
       $366 = (($365) + 1|0);
       $i_ptr = $366;
       $367 = HEAP8[$365]|0;
       $b18 = $367;
       $368 = $b18;
       $369 = $368&255;
       $370 = $369 << 8;
       $371 = $b07;
       $372 = $371&255;
       $373 = $370 | $372;
       $374 = $bits_left;
       $375 = (16 - ($374))|0;
       $376 = $373 << $375;
       $377 = $bit_buffer;
       $378 = $377 | $376;
       $bit_buffer = $378;
       $379 = $bits_left;
       $380 = (($379) + 16)|0;
       $bits_left = $380;
      }
      $381 = $bit_buffer;
      $382 = $381 >>> 31;
      $y = $382;
      $383 = $bit_buffer;
      $384 = $383 << 1;
      $bit_buffer = $384;
      $385 = $bits_left;
      $386 = (($385) - 1)|0;
      $bits_left = $386;
      $387 = $y;
      $388 = (($387) + 4)|0;
      $y = $388;
      while(1) {
       $389 = $bits_left;
       $390 = ($389|0)<(16);
       if (!($390)) {
        break;
       }
       $391 = $i_ptr;
       $392 = $i_end;
       $393 = ($391>>>0)>=($392>>>0);
       if ($393) {
        $394 = $1;
        $395 = (_read_input($394)|0);
        $396 = ($395|0)!=(0);
        if ($396) {
         label = 144;
         break L39;
        }
        $400 = $1;
        $401 = (($400) + 88|0);
        $402 = HEAP32[$401>>2]|0;
        $i_ptr = $402;
        $403 = $1;
        $404 = (($403) + 92|0);
        $405 = HEAP32[$404>>2]|0;
        $i_end = $405;
       }
       $406 = $i_ptr;
       $407 = (($406) + 1|0);
       $i_ptr = $407;
       $408 = HEAP8[$406]|0;
       $b09 = $408;
       $409 = $i_ptr;
       $410 = $i_end;
       $411 = ($409>>>0)>=($410>>>0);
       if ($411) {
        $412 = $1;
        $413 = (_read_input($412)|0);
        $414 = ($413|0)!=(0);
        if ($414) {
         label = 150;
         break L39;
        }
        $418 = $1;
        $419 = (($418) + 88|0);
        $420 = HEAP32[$419>>2]|0;
        $i_ptr = $420;
        $421 = $1;
        $422 = (($421) + 92|0);
        $423 = HEAP32[$422>>2]|0;
        $i_end = $423;
       }
       $424 = $i_ptr;
       $425 = (($424) + 1|0);
       $i_ptr = $425;
       $426 = HEAP8[$424]|0;
       $b110 = $426;
       $427 = $b110;
       $428 = $427&255;
       $429 = $428 << 8;
       $430 = $b09;
       $431 = $430&255;
       $432 = $429 | $431;
       $433 = $bits_left;
       $434 = (16 - ($433))|0;
       $435 = $432 << $434;
       $436 = $bit_buffer;
       $437 = $436 | $435;
       $bit_buffer = $437;
       $438 = $bits_left;
       $439 = (($438) + 16)|0;
       $bits_left = $439;
      }
      $440 = $bit_buffer;
      $441 = $440 >>> 26;
      $442 = $1;
      $443 = (($442) + 1306|0);
      $444 = (($443) + ($441<<1)|0);
      $445 = HEAP16[$444>>1]|0;
      $sym = $445;
      $446 = $sym;
      $447 = $446&65535;
      $448 = ($447|0)>=(20);
      if ($448) {
       $i = 67108864;
       while(1) {
        $449 = $i;
        $450 = $449 >> 1;
        $i = $450;
        $451 = ($450|0)==(0);
        if ($451) {
         label = 160;
         break L39;
        }
        $454 = $sym;
        $455 = $454&65535;
        $456 = $455 << 1;
        $457 = $bit_buffer;
        $458 = $i;
        $459 = $457 & $458;
        $460 = ($459|0)!=(0);
        $461 = $460 ? 1 : 0;
        $462 = $456 | $461;
        $463 = $1;
        $464 = (($463) + 1306|0);
        $465 = (($464) + ($462<<1)|0);
        $466 = HEAP16[$465>>1]|0;
        $sym = $466;
        $467 = $sym;
        $468 = $467&65535;
        $469 = ($468|0)>=(20);
        if (!($469)) {
         break;
        }
       }
      }
      $470 = $sym;
      $471 = $470&65535;
      $z = $471;
      $472 = $sym;
      $473 = $472&65535;
      $474 = $1;
      $475 = (($474) + 116|0);
      $476 = (($475) + ($473)|0);
      $477 = HEAP8[$476]|0;
      $478 = $477&255;
      $i = $478;
      $479 = $i;
      $480 = $bit_buffer;
      $481 = $480 << $479;
      $bit_buffer = $481;
      $482 = $i;
      $483 = $bits_left;
      $484 = (($483) - ($482))|0;
      $bits_left = $484;
      $485 = $x;
      $486 = $2;
      $487 = (($486) + ($485)|0);
      $488 = HEAP8[$487]|0;
      $489 = $488&255;
      $490 = $z;
      $491 = (($489) - ($490))|0;
      $z = $491;
      $492 = $z;
      $493 = ($492|0)<(0);
      if ($493) {
       $494 = $z;
       $495 = (($494) + 17)|0;
       $z = $495;
      }
      while(1) {
       $496 = $y;
       $497 = (($496) + -1)|0;
       $y = $497;
       $498 = ($496|0)!=(0);
       if (!($498)) {
        break;
       }
       $499 = $z;
       $500 = $499&255;
       $501 = $x;
       $502 = (($501) + 1)|0;
       $x = $502;
       $503 = $2;
       $504 = (($503) + ($501)|0);
       HEAP8[$504] = $500;
      }
     } else {
      $505 = $x;
      $506 = $2;
      $507 = (($506) + ($505)|0);
      $508 = HEAP8[$507]|0;
      $509 = $508&255;
      $510 = $z;
      $511 = (($509) - ($510))|0;
      $z = $511;
      $512 = $z;
      $513 = ($512|0)<(0);
      if ($513) {
       $514 = $z;
       $515 = (($514) + 17)|0;
       $z = $515;
      }
      $516 = $z;
      $517 = $516&255;
      $518 = $x;
      $519 = (($518) + 1)|0;
      $x = $519;
      $520 = $2;
      $521 = (($520) + ($518)|0);
      HEAP8[$521] = $517;
     }
    }
   }
  }
  if ((label|0) == 40) {
   $104 = $1;
   $105 = (($104) + 80|0);
   $106 = HEAP32[$105>>2]|0;
   $0 = $106;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 46) {
   $122 = $1;
   $123 = (($122) + 80|0);
   $124 = HEAP32[$123>>2]|0;
   $0 = $124;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 56) {
   $159 = $1;
   $160 = (($159) + 80|0);
   HEAP32[$160>>2] = 11;
   $0 = 11;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 71) {
   $202 = $1;
   $203 = (($202) + 80|0);
   $204 = HEAP32[$203>>2]|0;
   $0 = $204;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 77) {
   $220 = $1;
   $221 = (($220) + 80|0);
   $222 = HEAP32[$221>>2]|0;
   $0 = $222;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 97) {
   $270 = $1;
   $271 = (($270) + 80|0);
   $272 = HEAP32[$271>>2]|0;
   $0 = $272;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 103) {
   $288 = $1;
   $289 = (($288) + 80|0);
   $290 = HEAP32[$289>>2]|0;
   $0 = $290;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 123) {
   $338 = $1;
   $339 = (($338) + 80|0);
   $340 = HEAP32[$339>>2]|0;
   $0 = $340;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 129) {
   $356 = $1;
   $357 = (($356) + 80|0);
   $358 = HEAP32[$357>>2]|0;
   $0 = $358;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 144) {
   $397 = $1;
   $398 = (($397) + 80|0);
   $399 = HEAP32[$398>>2]|0;
   $0 = $399;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 150) {
   $415 = $1;
   $416 = (($415) + 80|0);
   $417 = HEAP32[$416>>2]|0;
   $0 = $417;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 160) {
   $452 = $1;
   $453 = (($452) + 80|0);
   HEAP32[$453>>2] = 11;
   $0 = 11;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
  else if ((label|0) == 178) {
   $522 = $i_ptr;
   $523 = $1;
   $524 = (($523) + 88|0);
   HEAP32[$524>>2] = $522;
   $525 = $i_end;
   $526 = $1;
   $527 = (($526) + 92|0);
   HEAP32[$527>>2] = $525;
   $528 = $bit_buffer;
   $529 = $1;
   $530 = (($529) + 104|0);
   HEAP32[$530>>2] = $528;
   $531 = $bits_left;
   $532 = $1;
   $533 = (($532) + 108|0);
   HEAP32[$533>>2] = $531;
   $0 = 0;
   $534 = $0;
   STACKTOP = sp;return ($534|0);
  }
 }
 return 0|0;
}
function _lzxd_free($lzx) {
 $lzx = $lzx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $sys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $lzx;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $sys = $4;
 $5 = $sys;
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 84|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$7 & 3]($10);
 $11 = $sys;
 $12 = (($11) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = (($14) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vi[$13 & 3]($16);
 $17 = $sys;
 $18 = (($17) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 FUNCTION_TABLE_vi[$19 & 3]($20);
 STACKTOP = sp;return;
}
function _mszipd_init($system,$input,$output,$input_buffer_size,$repair_mode) {
 $system = $system|0;
 $input = $input|0;
 $output = $output|0;
 $input_buffer_size = $input_buffer_size|0;
 $repair_mode = $repair_mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $zip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $system;
 $2 = $input;
 $3 = $output;
 $4 = $input_buffer_size;
 $5 = $repair_mode;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $8 = $4;
 $9 = (($8) + 1)|0;
 $10 = $9 & -2;
 $4 = $10;
 $11 = $4;
 $12 = ($11|0)!=(0);
 if (!($12)) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $13 = $1;
 $14 = (($13) + 28|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = (FUNCTION_TABLE_iii[$15 & 15]($16,35716)|0);
 $zip = $17;
 $18 = ($17|0)!=(0|0);
 if (!($18)) {
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 $19 = $1;
 $20 = (($19) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = $4;
 $24 = (FUNCTION_TABLE_iii[$21 & 15]($22,$23)|0);
 $25 = $zip;
 $26 = (($25) + 32|0);
 HEAP32[$26>>2] = $24;
 $27 = $zip;
 $28 = (($27) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $35 = $1;
  $36 = $zip;
  HEAP32[$36>>2] = $35;
  $37 = $2;
  $38 = $zip;
  $39 = (($38) + 4|0);
  HEAP32[$39>>2] = $37;
  $40 = $3;
  $41 = $zip;
  $42 = (($41) + 8|0);
  HEAP32[$42>>2] = $40;
  $43 = $4;
  $44 = $zip;
  $45 = (($44) + 64|0);
  HEAP32[$45>>2] = $43;
  $46 = $zip;
  $47 = (($46) + 52|0);
  HEAP8[$47] = 0;
  $48 = $zip;
  $49 = (($48) + 20|0);
  HEAP32[$49>>2] = 0;
  $50 = $5;
  $51 = $zip;
  $52 = (($51) + 24|0);
  HEAP32[$52>>2] = $50;
  $53 = $zip;
  $54 = (($53) + 16|0);
  HEAP32[$54>>2] = 8;
  $55 = $zip;
  $56 = (($55) + 32|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $zip;
  $59 = (($58) + 40|0);
  HEAP32[$59>>2] = $57;
  $60 = $zip;
  $61 = (($60) + 36|0);
  HEAP32[$61>>2] = $57;
  $62 = $zip;
  $63 = (($62) + 48|0);
  HEAP32[$63>>2] = 0;
  $64 = $zip;
  $65 = (($64) + 44|0);
  HEAP32[$65>>2] = 0;
  $66 = $zip;
  $67 = (($66) + 56|0);
  HEAP32[$67>>2] = 0;
  $68 = $zip;
  $69 = (($68) + 60|0);
  HEAP32[$69>>2] = 0;
  $70 = $zip;
  $0 = $70;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 } else {
  $31 = $1;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $zip;
  FUNCTION_TABLE_vi[$33 & 3]($34);
  $0 = 0;
  $71 = $0;
  STACKTOP = sp;return ($71|0);
 }
 return 0|0;
}
function _mszipd_flush_window($zip,$data_flushed) {
 $zip = $zip|0;
 $data_flushed = $data_flushed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $zip;
 $2 = $data_flushed;
 $3 = $2;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($3))|0;
 HEAP32[$5>>2] = $7;
 $8 = $1;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(32768);
 if ($11) {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return 0|0;
}
function _mszipd_decompress($zip,$out_bytes) {
 $zip = $zip|0;
 $out_bytes = $out_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bit_buffer = 0, $bits_left = 0, $error = 0, $i = 0, $i_end = 0, $i_ptr = 0, $state = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $1 = $zip;
 $2 = $out_bytes;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = ($5|0)<(0);
  if (!($6)) {
   $7 = $1;
   $8 = (($7) + 20|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = (($11) + 20|0);
    $13 = HEAP32[$12>>2]|0;
    $0 = $13;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   $14 = $1;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 44|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $16;
   $21 = $19;
   $22 = (($20) - ($21))|0;
   $i = $22;
   $23 = $i;
   $24 = $2;
   $25 = ($23|0)>($24|0);
   if ($25) {
    $26 = $2;
    $i = $26;
   }
   $27 = $i;
   $28 = ($27|0)!=(0);
   do {
    if ($28) {
     $29 = $1;
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $1;
     $34 = (($33) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $1;
     $37 = (($36) + 44|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $i;
     $40 = (FUNCTION_TABLE_iiii[$32 & 15]($35,$38,$39)|0);
     $41 = $i;
     $42 = ($40|0)!=($41|0);
     if (!($42)) {
      $45 = $i;
      $46 = $1;
      $47 = (($46) + 44|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($48) + ($45)|0);
      HEAP32[$47>>2] = $49;
      $50 = $i;
      $51 = $2;
      $52 = (($51) - ($50))|0;
      $2 = $52;
      break;
     }
     $43 = $1;
     $44 = (($43) + 20|0);
     HEAP32[$44>>2] = 4;
     $0 = 4;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
   } while(0);
   $53 = $2;
   $54 = ($53|0)==(0);
   if ($54) {
    $0 = 0;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   L22: while(1) {
    $55 = $2;
    $56 = ($55|0)>(0);
    if (!($56)) {
     label = 69;
     break;
    }
    $57 = $1;
    $58 = (($57) + 36|0);
    $59 = HEAP32[$58>>2]|0;
    $i_ptr = $59;
    $60 = $1;
    $61 = (($60) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    $i_end = $62;
    $63 = $1;
    $64 = (($63) + 56|0);
    $65 = HEAP32[$64>>2]|0;
    $bit_buffer = $65;
    $66 = $1;
    $67 = (($66) + 60|0);
    $68 = HEAP32[$67>>2]|0;
    $bits_left = $68;
    $69 = $bits_left;
    $70 = $69 & 7;
    $i = $70;
    $71 = $i;
    $72 = $bit_buffer;
    $73 = $72 >>> $71;
    $bit_buffer = $73;
    $74 = $i;
    $75 = $bits_left;
    $76 = (($75) - ($74))|0;
    $bits_left = $76;
    $state = 0;
    while(1) {
     while(1) {
      $77 = $bits_left;
      $78 = ($77|0)<(8);
      if (!($78)) {
       break;
      }
      $79 = $i_ptr;
      $80 = $i_end;
      $81 = ($79>>>0)>=($80>>>0);
      if ($81) {
       $82 = $1;
       $83 = (_read_input93($82)|0);
       $84 = ($83|0)!=(0);
       if ($84) {
        label = 27;
        break L22;
       }
       $88 = $1;
       $89 = (($88) + 36|0);
       $90 = HEAP32[$89>>2]|0;
       $i_ptr = $90;
       $91 = $1;
       $92 = (($91) + 40|0);
       $93 = HEAP32[$92>>2]|0;
       $i_end = $93;
      }
      $94 = $i_ptr;
      $95 = (($94) + 1|0);
      $i_ptr = $95;
      $96 = HEAP8[$94]|0;
      $97 = $96&255;
      $98 = $bits_left;
      $99 = $97 << $98;
      $100 = $bit_buffer;
      $101 = $100 | $99;
      $bit_buffer = $101;
      $102 = $bits_left;
      $103 = (($102) + 8)|0;
      $bits_left = $103;
     }
     $104 = $bit_buffer;
     $105 = $104 & 255;
     $i = $105;
     $106 = $bit_buffer;
     $107 = $106 >>> 8;
     $bit_buffer = $107;
     $108 = $bits_left;
     $109 = (($108) - 8)|0;
     $bits_left = $109;
     $110 = $i;
     $111 = ($110|0)==(67);
     if ($111) {
      $state = 1;
     } else {
      $112 = $state;
      $113 = ($112|0)==(1);
      if ($113) {
       $114 = $i;
       $115 = ($114|0)==(75);
       if ($115) {
        $state = 2;
       } else {
        label = 39;
       }
      } else {
       label = 39;
      }
      if ((label|0) == 39) {
       label = 0;
       $state = 0;
      }
     }
     $116 = $state;
     $117 = ($116|0)!=(2);
     if (!($117)) {
      break;
     }
    }
    $118 = $1;
    $119 = (($118) + 12|0);
    HEAP32[$119>>2] = 0;
    $120 = $1;
    $121 = (($120) + 28|0);
    HEAP32[$121>>2] = 0;
    $122 = $i_ptr;
    $123 = $1;
    $124 = (($123) + 36|0);
    HEAP32[$124>>2] = $122;
    $125 = $i_end;
    $126 = $1;
    $127 = (($126) + 40|0);
    HEAP32[$127>>2] = $125;
    $128 = $bit_buffer;
    $129 = $1;
    $130 = (($129) + 56|0);
    HEAP32[$130>>2] = $128;
    $131 = $bits_left;
    $132 = $1;
    $133 = (($132) + 60|0);
    HEAP32[$133>>2] = $131;
    $134 = $1;
    $135 = (_inflate($134)|0);
    $error = $135;
    $136 = ($135|0)!=(0);
    if ($136) {
     $137 = $1;
     $138 = (($137) + 24|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = ($139|0)!=(0);
     if (!($140)) {
      label = 55;
      break;
     }
     $141 = $1;
     $142 = (($141) + 28|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==(0);
     if ($144) {
      $145 = $1;
      $146 = (($145) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($147>>>0)>(0);
      if ($148) {
       $149 = $1;
       $150 = (($149) + 16|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = $1;
       $153 = $1;
       $154 = (($153) + 12|0);
       $155 = HEAP32[$154>>2]|0;
       (FUNCTION_TABLE_iii[$151 & 15]($152,$155)|0);
      }
     }
     $156 = $1;
     $157 = HEAP32[$156>>2]|0;
     $158 = (($157) + 24|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $1;
     $161 = (($160) + 28|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (32768 - ($162))|0;
     HEAP32[$vararg_buffer>>2] = $163;
     FUNCTION_TABLE_viii[$159 & 3](0,3984,$vararg_buffer);
     $164 = $1;
     $165 = (($164) + 28|0);
     $166 = HEAP32[$165>>2]|0;
     $i = $166;
     while(1) {
      $167 = $i;
      $168 = ($167|0)<(32768);
      if (!($168)) {
       break;
      }
      $169 = $i;
      $170 = $1;
      $171 = (($170) + 2948|0);
      $172 = (($171) + ($169)|0);
      HEAP8[$172] = 0;
      $173 = $i;
      $174 = (($173) + 1)|0;
      $i = $174;
     }
     $175 = $1;
     $176 = (($175) + 28|0);
     HEAP32[$176>>2] = 32768;
    }
    $183 = $1;
    $184 = (($183) + 2948|0);
    $185 = $1;
    $186 = (($185) + 44|0);
    HEAP32[$186>>2] = $184;
    $187 = $1;
    $188 = (($187) + 28|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $1;
    $191 = (($190) + 44|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (($192) + ($189)|0);
    $194 = $1;
    $195 = (($194) + 48|0);
    HEAP32[$195>>2] = $193;
    $196 = $2;
    $197 = $1;
    $198 = (($197) + 28|0);
    $199 = HEAP32[$198>>2]|0;
    $200 = ($196|0)<($199|0);
    if ($200) {
     $201 = $2;
     $205 = $201;
    } else {
     $202 = $1;
     $203 = (($202) + 28|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $204;
    }
    $i = $205;
    $206 = $1;
    $207 = HEAP32[$206>>2]|0;
    $208 = (($207) + 12|0);
    $209 = HEAP32[$208>>2]|0;
    $210 = $1;
    $211 = (($210) + 8|0);
    $212 = HEAP32[$211>>2]|0;
    $213 = $1;
    $214 = (($213) + 44|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $i;
    $217 = (FUNCTION_TABLE_iiii[$209 & 15]($212,$215,$216)|0);
    $218 = $i;
    $219 = ($217|0)!=($218|0);
    if ($219) {
     label = 64;
     break;
    }
    $222 = $error;
    $223 = ($222|0)>(0);
    if ($223) {
     $224 = $1;
     $225 = (($224) + 24|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = ($226|0)!=(0);
     if ($227) {
      label = 67;
      break;
     }
    }
    $229 = $i;
    $230 = $1;
    $231 = (($230) + 44|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = (($232) + ($229)|0);
    HEAP32[$231>>2] = $233;
    $234 = $i;
    $235 = $2;
    $236 = (($235) - ($234))|0;
    $2 = $236;
   }
   if ((label|0) == 27) {
    $85 = $1;
    $86 = (($85) + 20|0);
    $87 = HEAP32[$86>>2]|0;
    $0 = $87;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   else if ((label|0) == 55) {
    $177 = $error;
    $178 = ($177|0)>(0);
    if ($178) {
     $179 = $error;
     $182 = $179;
    } else {
     $182 = 11;
    }
    $180 = $1;
    $181 = (($180) + 20|0);
    HEAP32[$181>>2] = $182;
    $0 = $182;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   else if ((label|0) == 64) {
    $220 = $1;
    $221 = (($220) + 20|0);
    HEAP32[$221>>2] = 4;
    $0 = 4;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   else if ((label|0) == 67) {
    $228 = $error;
    $0 = $228;
    $241 = $0;
    STACKTOP = sp;return ($241|0);
   }
   else if ((label|0) == 69) {
    $237 = $2;
    $238 = ($237|0)!=(0);
    if ($238) {
     $239 = $1;
     $240 = (($239) + 20|0);
     HEAP32[$240>>2] = 11;
     $0 = 11;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    } else {
     $0 = 0;
     $241 = $0;
     STACKTOP = sp;return ($241|0);
    }
   }
  }
 }
 $0 = 1;
 $241 = $0;
 STACKTOP = sp;return ($241|0);
}
function _read_input93($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $p;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 32|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iiii[$5 & 15]($8,$11,$14)|0);
 $read = $15;
 $16 = $read;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $1;
  $19 = (($18) + 20|0);
  HEAP32[$19>>2] = 3;
  $0 = 3;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $20 = $read;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $22 = $1;
   $23 = (($22) + 52|0);
   $24 = HEAP8[$23]|0;
   $25 = ($24<<24>>24)!=(0);
   if ($25) {
    $26 = $1;
    $27 = (($26) + 20|0);
    HEAP32[$27>>2] = 3;
    $0 = 3;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   } else {
    $read = 2;
    $28 = $1;
    $29 = (($28) + 32|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1|0);
    HEAP8[$31] = 0;
    $32 = $1;
    $33 = (($32) + 32|0);
    $34 = HEAP32[$33>>2]|0;
    HEAP8[$34] = 0;
    $35 = $1;
    $36 = (($35) + 52|0);
    HEAP8[$36] = 1;
    break;
   }
  }
 } while(0);
 $37 = $1;
 $38 = (($37) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $1;
 $41 = (($40) + 36|0);
 HEAP32[$41>>2] = $39;
 $42 = $read;
 $43 = $1;
 $44 = (($43) + 32|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42)|0);
 $47 = $1;
 $48 = (($47) + 40|0);
 HEAP32[$48>>2] = $46;
 $0 = 0;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _inflate($zip) {
 $zip = $zip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit_buffer = 0, $bits_left = 0, $block_type = 0, $code = 0, $distance = 0, $i = 0, $i_end = 0, $i_ptr = 0, $last_block = 0, $length = 0, $lens_buf = 0, $match_posn = 0, $rundest = 0;
 var $runsrc = 0, $sym = 0, $this_run = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $lens_buf = sp + 68|0;
 $1 = $zip;
 $2 = $1;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $i_ptr = $4;
 $5 = $1;
 $6 = (($5) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $i_end = $7;
 $8 = $1;
 $9 = (($8) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $bit_buffer = $10;
 $11 = $1;
 $12 = (($11) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $bits_left = $13;
 L3: while(1) {
  while(1) {
   $14 = $bits_left;
   $15 = ($14|0)<(1);
   if (!($15)) {
    break;
   }
   $16 = $i_ptr;
   $17 = $i_end;
   $18 = ($16>>>0)>=($17>>>0);
   if ($18) {
    $19 = $1;
    $20 = (_read_input93($19)|0);
    $21 = ($20|0)!=(0);
    if ($21) {
     label = 12;
     break L3;
    }
    $25 = $1;
    $26 = (($25) + 36|0);
    $27 = HEAP32[$26>>2]|0;
    $i_ptr = $27;
    $28 = $1;
    $29 = (($28) + 40|0);
    $30 = HEAP32[$29>>2]|0;
    $i_end = $30;
   }
   $31 = $i_ptr;
   $32 = (($31) + 1|0);
   $i_ptr = $32;
   $33 = HEAP8[$31]|0;
   $34 = $33&255;
   $35 = $bits_left;
   $36 = $34 << $35;
   $37 = $bit_buffer;
   $38 = $37 | $36;
   $bit_buffer = $38;
   $39 = $bits_left;
   $40 = (($39) + 8)|0;
   $bits_left = $40;
  }
  $41 = $bit_buffer;
  $42 = $41 & 1;
  $last_block = $42;
  $43 = $bit_buffer;
  $44 = $43 >>> 1;
  $bit_buffer = $44;
  $45 = $bits_left;
  $46 = (($45) - 1)|0;
  $bits_left = $46;
  while(1) {
   $47 = $bits_left;
   $48 = ($47|0)<(2);
   if (!($48)) {
    break;
   }
   $49 = $i_ptr;
   $50 = $i_end;
   $51 = ($49>>>0)>=($50>>>0);
   if ($51) {
    $52 = $1;
    $53 = (_read_input93($52)|0);
    $54 = ($53|0)!=(0);
    if ($54) {
     label = 27;
     break L3;
    }
    $58 = $1;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $i_ptr = $60;
    $61 = $1;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    $i_end = $63;
   }
   $64 = $i_ptr;
   $65 = (($64) + 1|0);
   $i_ptr = $65;
   $66 = HEAP8[$64]|0;
   $67 = $66&255;
   $68 = $bits_left;
   $69 = $67 << $68;
   $70 = $bit_buffer;
   $71 = $70 | $69;
   $bit_buffer = $71;
   $72 = $bits_left;
   $73 = (($72) + 8)|0;
   $bits_left = $73;
  }
  $74 = $bit_buffer;
  $75 = $74 & 3;
  $block_type = $75;
  $76 = $bit_buffer;
  $77 = $76 >>> 2;
  $bit_buffer = $77;
  $78 = $bits_left;
  $79 = (($78) - 2)|0;
  $bits_left = $79;
  $80 = $block_type;
  $81 = ($80|0)==(0);
  if ($81) {
   $82 = $bits_left;
   $83 = $82 & 7;
   $i = $83;
   $84 = $i;
   $85 = $bit_buffer;
   $86 = $85 >>> $84;
   $bit_buffer = $86;
   $87 = $i;
   $88 = $bits_left;
   $89 = (($88) - ($87))|0;
   $bits_left = $89;
   $i = 0;
   while(1) {
    $90 = $bits_left;
    $91 = ($90|0)>=(8);
    if (!($91)) {
     break;
    }
    $92 = $i;
    $93 = ($92|0)==(4);
    if ($93) {
     label = 38;
     break L3;
    }
    $94 = $bit_buffer;
    $95 = $94 & 255;
    $96 = $95&255;
    $97 = $i;
    $98 = (($lens_buf) + ($97)|0);
    HEAP8[$98] = $96;
    $99 = $bit_buffer;
    $100 = $99 >>> 8;
    $bit_buffer = $100;
    $101 = $bits_left;
    $102 = (($101) - 8)|0;
    $bits_left = $102;
    $103 = $i;
    $104 = (($103) + 1)|0;
    $i = $104;
   }
   $105 = $bits_left;
   $106 = ($105|0)!=(0);
   if ($106) {
    label = 42;
    break;
   }
   while(1) {
    $107 = $i;
    $108 = ($107>>>0)<(4);
    if (!($108)) {
     break;
    }
    $109 = $i_ptr;
    $110 = $i_end;
    $111 = ($109>>>0)>=($110>>>0);
    if ($111) {
     $112 = $1;
     $113 = (_read_input93($112)|0);
     $114 = ($113|0)!=(0);
     if ($114) {
      label = 48;
      break L3;
     }
     $118 = $1;
     $119 = (($118) + 36|0);
     $120 = HEAP32[$119>>2]|0;
     $i_ptr = $120;
     $121 = $1;
     $122 = (($121) + 40|0);
     $123 = HEAP32[$122>>2]|0;
     $i_end = $123;
    }
    $124 = $i_ptr;
    $125 = (($124) + 1|0);
    $i_ptr = $125;
    $126 = HEAP8[$124]|0;
    $127 = $i;
    $128 = (($127) + 1)|0;
    $i = $128;
    $129 = (($lens_buf) + ($127)|0);
    HEAP8[$129] = $126;
   }
   $130 = HEAP8[$lens_buf]|0;
   $131 = $130&255;
   $132 = (($lens_buf) + 1|0);
   $133 = HEAP8[$132]|0;
   $134 = $133&255;
   $135 = $134 << 8;
   $136 = $131 | $135;
   $length = $136;
   $137 = (($lens_buf) + 2|0);
   $138 = HEAP8[$137]|0;
   $139 = $138&255;
   $140 = (($lens_buf) + 3|0);
   $141 = HEAP8[$140]|0;
   $142 = $141&255;
   $143 = $142 << 8;
   $144 = $139 | $143;
   $i = $144;
   $145 = $length;
   $146 = $i;
   $147 = $146 ^ -1;
   $148 = $147 & 65535;
   $149 = ($145|0)!=($148|0);
   if ($149) {
    label = 53;
    break;
   }
   while(1) {
    $150 = $length;
    $151 = ($150>>>0)>(0);
    if (!($151)) {
     break;
    }
    $152 = $i_ptr;
    $153 = $i_end;
    $154 = ($152>>>0)>=($153>>>0);
    if ($154) {
     $155 = $1;
     $156 = (_read_input93($155)|0);
     $157 = ($156|0)!=(0);
     if ($157) {
      label = 59;
      break L3;
     }
     $161 = $1;
     $162 = (($161) + 36|0);
     $163 = HEAP32[$162>>2]|0;
     $i_ptr = $163;
     $164 = $1;
     $165 = (($164) + 40|0);
     $166 = HEAP32[$165>>2]|0;
     $i_end = $166;
    }
    $167 = $length;
    $this_run = $167;
    $168 = $this_run;
    $169 = $i_end;
    $170 = $i_ptr;
    $171 = $169;
    $172 = $170;
    $173 = (($171) - ($172))|0;
    $174 = ($168>>>0)>($173>>>0);
    if ($174) {
     $175 = $i_end;
     $176 = $i_ptr;
     $177 = $175;
     $178 = $176;
     $179 = (($177) - ($178))|0;
     $this_run = $179;
    }
    $180 = $this_run;
    $181 = $1;
    $182 = (($181) + 12|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (32768 - ($183))|0;
    $185 = ($180>>>0)>($184>>>0);
    if ($185) {
     $186 = $1;
     $187 = (($186) + 12|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (32768 - ($188))|0;
     $this_run = $189;
    }
    $190 = $1;
    $191 = HEAP32[$190>>2]|0;
    $192 = (($191) + 36|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $i_ptr;
    $195 = $1;
    $196 = (($195) + 12|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = $1;
    $199 = (($198) + 2948|0);
    $200 = (($199) + ($197)|0);
    $201 = $this_run;
    FUNCTION_TABLE_viii[$193 & 3]($194,$200,$201);
    $202 = $this_run;
    $203 = $1;
    $204 = (($203) + 12|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = (($205) + ($202))|0;
    HEAP32[$204>>2] = $206;
    $207 = $this_run;
    $208 = $i_ptr;
    $209 = (($208) + ($207)|0);
    $i_ptr = $209;
    $210 = $this_run;
    $211 = $length;
    $212 = (($211) - ($210))|0;
    $length = $212;
    $213 = $1;
    $214 = (($213) + 12|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ($215|0)==(32768);
    if ($216) {
     $217 = $1;
     $218 = (($217) + 16|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $1;
     $221 = (FUNCTION_TABLE_iii[$219 & 15]($220,32768)|0);
     $222 = ($221|0)!=(0);
     if ($222) {
      label = 69;
      break L3;
     }
     $223 = $1;
     $224 = (($223) + 12|0);
     HEAP32[$224>>2] = 0;
    }
   }
  } else {
   $225 = $block_type;
   $226 = ($225|0)==(1);
   if (!($226)) {
    $227 = $block_type;
    $228 = ($227|0)==(2);
    if (!($228)) {
     label = 232;
     break;
    }
   }
   $229 = $block_type;
   $230 = ($229|0)==(1);
   if ($230) {
    $i = 0;
    while(1) {
     $231 = $i;
     $232 = ($231>>>0)<(144);
     if (!($232)) {
      break;
     }
     $233 = $i;
     $234 = (($233) + 1)|0;
     $i = $234;
     $235 = $1;
     $236 = (($235) + 68|0);
     $237 = (($236) + ($233)|0);
     HEAP8[$237] = 8;
    }
    while(1) {
     $238 = $i;
     $239 = ($238>>>0)<(256);
     if (!($239)) {
      break;
     }
     $240 = $i;
     $241 = (($240) + 1)|0;
     $i = $241;
     $242 = $1;
     $243 = (($242) + 68|0);
     $244 = (($243) + ($240)|0);
     HEAP8[$244] = 9;
    }
    while(1) {
     $245 = $i;
     $246 = ($245>>>0)<(280);
     if (!($246)) {
      break;
     }
     $247 = $i;
     $248 = (($247) + 1)|0;
     $i = $248;
     $249 = $1;
     $250 = (($249) + 68|0);
     $251 = (($250) + ($247)|0);
     HEAP8[$251] = 7;
    }
    while(1) {
     $252 = $i;
     $253 = ($252>>>0)<(288);
     if (!($253)) {
      break;
     }
     $254 = $i;
     $255 = (($254) + 1)|0;
     $i = $255;
     $256 = $1;
     $257 = (($256) + 68|0);
     $258 = (($257) + ($254)|0);
     HEAP8[$258] = 8;
    }
    $i = 0;
    while(1) {
     $259 = $i;
     $260 = ($259>>>0)<(32);
     if (!($260)) {
      break;
     }
     $261 = $i;
     $262 = $1;
     $263 = (($262) + 356|0);
     $264 = (($263) + ($261)|0);
     HEAP8[$264] = 5;
     $265 = $i;
     $266 = (($265) + 1)|0;
     $i = $266;
    }
   } else {
    $267 = $i_ptr;
    $268 = $1;
    $269 = (($268) + 36|0);
    HEAP32[$269>>2] = $267;
    $270 = $i_end;
    $271 = $1;
    $272 = (($271) + 40|0);
    HEAP32[$272>>2] = $270;
    $273 = $bit_buffer;
    $274 = $1;
    $275 = (($274) + 56|0);
    HEAP32[$275>>2] = $273;
    $276 = $bits_left;
    $277 = $1;
    $278 = (($277) + 60|0);
    HEAP32[$278>>2] = $276;
    $279 = $1;
    $280 = (_zip_read_lens($279)|0);
    $i = $280;
    $281 = ($280|0)!=(0);
    if ($281) {
     label = 97;
     break;
    }
    $283 = $1;
    $284 = (($283) + 36|0);
    $285 = HEAP32[$284>>2]|0;
    $i_ptr = $285;
    $286 = $1;
    $287 = (($286) + 40|0);
    $288 = HEAP32[$287>>2]|0;
    $i_end = $288;
    $289 = $1;
    $290 = (($289) + 56|0);
    $291 = HEAP32[$290>>2]|0;
    $bit_buffer = $291;
    $292 = $1;
    $293 = (($292) + 60|0);
    $294 = HEAP32[$293>>2]|0;
    $bits_left = $294;
   }
   $295 = $1;
   $296 = (($295) + 68|0);
   $297 = $1;
   $298 = (($297) + 388|0);
   $299 = (_make_decode_table96(288,9,$296,$298)|0);
   $300 = ($299|0)!=(0);
   if ($300) {
    label = 102;
    break;
   }
   $301 = $1;
   $302 = (($301) + 356|0);
   $303 = $1;
   $304 = (($303) + 2692|0);
   $305 = (_make_decode_table96(32,6,$302,$304)|0);
   $306 = ($305|0)!=(0);
   if ($306) {
    label = 104;
    break;
   }
   while(1) {
    while(1) {
     $307 = $bits_left;
     $308 = ($307|0)<(16);
     if (!($308)) {
      break;
     }
     $309 = $i_ptr;
     $310 = $i_end;
     $311 = ($309>>>0)>=($310>>>0);
     if ($311) {
      $312 = $1;
      $313 = (_read_input93($312)|0);
      $314 = ($313|0)!=(0);
      if ($314) {
       label = 114;
       break L3;
      }
      $318 = $1;
      $319 = (($318) + 36|0);
      $320 = HEAP32[$319>>2]|0;
      $i_ptr = $320;
      $321 = $1;
      $322 = (($321) + 40|0);
      $323 = HEAP32[$322>>2]|0;
      $i_end = $323;
     }
     $324 = $i_ptr;
     $325 = (($324) + 1|0);
     $i_ptr = $325;
     $326 = HEAP8[$324]|0;
     $327 = $326&255;
     $328 = $bits_left;
     $329 = $327 << $328;
     $330 = $bit_buffer;
     $331 = $330 | $329;
     $bit_buffer = $331;
     $332 = $bits_left;
     $333 = (($332) + 8)|0;
     $bits_left = $333;
    }
    $334 = $bit_buffer;
    $335 = $334 & 511;
    $336 = $1;
    $337 = (($336) + 388|0);
    $338 = (($337) + ($335<<1)|0);
    $339 = HEAP16[$338>>1]|0;
    $sym = $339;
    $340 = $sym;
    $341 = $340&65535;
    $342 = ($341|0)>=(288);
    if ($342) {
     $i = 8;
     while(1) {
      $343 = $i;
      $344 = (($343) + 1)|0;
      $i = $344;
      $345 = ($343>>>0)>(16);
      if ($345) {
       label = 124;
       break L3;
      }
      $346 = $sym;
      $347 = $346&65535;
      $348 = $347 << 1;
      $349 = $bit_buffer;
      $350 = $i;
      $351 = $349 >>> $350;
      $352 = $351 & 1;
      $353 = $348 | $352;
      $354 = $1;
      $355 = (($354) + 388|0);
      $356 = (($355) + ($353<<1)|0);
      $357 = HEAP16[$356>>1]|0;
      $sym = $357;
      $358 = $sym;
      $359 = $358&65535;
      $360 = ($359|0)>=(288);
      if (!($360)) {
       break;
      }
     }
    }
    $361 = $sym;
    $362 = $361&65535;
    $code = $362;
    $363 = $sym;
    $364 = $363&65535;
    $365 = $1;
    $366 = (($365) + 68|0);
    $367 = (($366) + ($364)|0);
    $368 = HEAP8[$367]|0;
    $369 = $368&255;
    $i = $369;
    $370 = $i;
    $371 = $bit_buffer;
    $372 = $371 >>> $370;
    $bit_buffer = $372;
    $373 = $i;
    $374 = $bits_left;
    $375 = (($374) - ($373))|0;
    $bits_left = $375;
    $376 = $code;
    $377 = ($376>>>0)<(256);
    if ($377) {
     $378 = $code;
     $379 = $378&255;
     $380 = $1;
     $381 = (($380) + 12|0);
     $382 = HEAP32[$381>>2]|0;
     $383 = (($382) + 1)|0;
     HEAP32[$381>>2] = $383;
     $384 = $1;
     $385 = (($384) + 2948|0);
     $386 = (($385) + ($382)|0);
     HEAP8[$386] = $379;
     $387 = $1;
     $388 = (($387) + 12|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = ($389|0)==(32768);
     if ($390) {
      $391 = $1;
      $392 = (($391) + 16|0);
      $393 = HEAP32[$392>>2]|0;
      $394 = $1;
      $395 = (FUNCTION_TABLE_iii[$393 & 15]($394,32768)|0);
      $396 = ($395|0)!=(0);
      if ($396) {
       label = 134;
       break L3;
      }
      $397 = $1;
      $398 = (($397) + 12|0);
      HEAP32[$398>>2] = 0;
     }
    } else {
     $399 = $code;
     $400 = ($399|0)==(256);
     if ($400) {
      break;
     }
     $401 = $code;
     $402 = (($401) - 257)|0;
     $code = $402;
     $403 = $code;
     $404 = ($403>>>0)>=(29);
     if ($404) {
      label = 141;
      break L3;
     }
     while(1) {
      $405 = $bits_left;
      $406 = $code;
      $407 = (4024 + ($406)|0);
      $408 = HEAP8[$407]|0;
      $409 = $408&255;
      $410 = ($405|0)<($409|0);
      if (!($410)) {
       break;
      }
      $411 = $i_ptr;
      $412 = $i_end;
      $413 = ($411>>>0)>=($412>>>0);
      if ($413) {
       $414 = $1;
       $415 = (_read_input93($414)|0);
       $416 = ($415|0)!=(0);
       if ($416) {
        label = 150;
        break L3;
       }
       $420 = $1;
       $421 = (($420) + 36|0);
       $422 = HEAP32[$421>>2]|0;
       $i_ptr = $422;
       $423 = $1;
       $424 = (($423) + 40|0);
       $425 = HEAP32[$424>>2]|0;
       $i_end = $425;
      }
      $426 = $i_ptr;
      $427 = (($426) + 1|0);
      $i_ptr = $427;
      $428 = HEAP8[$426]|0;
      $429 = $428&255;
      $430 = $bits_left;
      $431 = $429 << $430;
      $432 = $bit_buffer;
      $433 = $432 | $431;
      $bit_buffer = $433;
      $434 = $bits_left;
      $435 = (($434) + 8)|0;
      $bits_left = $435;
     }
     $436 = $bit_buffer;
     $437 = $code;
     $438 = (4024 + ($437)|0);
     $439 = HEAP8[$438]|0;
     $440 = $439&255;
     $441 = (4056 + ($440<<1)|0);
     $442 = HEAP16[$441>>1]|0;
     $443 = $442&65535;
     $444 = $436 & $443;
     $length = $444;
     $445 = $code;
     $446 = (4024 + ($445)|0);
     $447 = HEAP8[$446]|0;
     $448 = $447&255;
     $449 = $bit_buffer;
     $450 = $449 >>> $448;
     $bit_buffer = $450;
     $451 = $code;
     $452 = (4024 + ($451)|0);
     $453 = HEAP8[$452]|0;
     $454 = $453&255;
     $455 = $bits_left;
     $456 = (($455) - ($454))|0;
     $bits_left = $456;
     $457 = $code;
     $458 = (4096 + ($457<<1)|0);
     $459 = HEAP16[$458>>1]|0;
     $460 = $459&65535;
     $461 = $length;
     $462 = (($461) + ($460))|0;
     $length = $462;
     while(1) {
      $463 = $bits_left;
      $464 = ($463|0)<(16);
      if (!($464)) {
       break;
      }
      $465 = $i_ptr;
      $466 = $i_end;
      $467 = ($465>>>0)>=($466>>>0);
      if ($467) {
       $468 = $1;
       $469 = (_read_input93($468)|0);
       $470 = ($469|0)!=(0);
       if ($470) {
        label = 165;
        break L3;
       }
       $474 = $1;
       $475 = (($474) + 36|0);
       $476 = HEAP32[$475>>2]|0;
       $i_ptr = $476;
       $477 = $1;
       $478 = (($477) + 40|0);
       $479 = HEAP32[$478>>2]|0;
       $i_end = $479;
      }
      $480 = $i_ptr;
      $481 = (($480) + 1|0);
      $i_ptr = $481;
      $482 = HEAP8[$480]|0;
      $483 = $482&255;
      $484 = $bits_left;
      $485 = $483 << $484;
      $486 = $bit_buffer;
      $487 = $486 | $485;
      $bit_buffer = $487;
      $488 = $bits_left;
      $489 = (($488) + 8)|0;
      $bits_left = $489;
     }
     $490 = $bit_buffer;
     $491 = $490 & 63;
     $492 = $1;
     $493 = (($492) + 2692|0);
     $494 = (($493) + ($491<<1)|0);
     $495 = HEAP16[$494>>1]|0;
     $sym = $495;
     $496 = $sym;
     $497 = $496&65535;
     $498 = ($497|0)>=(32);
     if ($498) {
      $i = 5;
      while(1) {
       $499 = $i;
       $500 = (($499) + 1)|0;
       $i = $500;
       $501 = ($499>>>0)>(16);
       if ($501) {
        label = 175;
        break L3;
       }
       $502 = $sym;
       $503 = $502&65535;
       $504 = $503 << 1;
       $505 = $bit_buffer;
       $506 = $i;
       $507 = $505 >>> $506;
       $508 = $507 & 1;
       $509 = $504 | $508;
       $510 = $1;
       $511 = (($510) + 2692|0);
       $512 = (($511) + ($509<<1)|0);
       $513 = HEAP16[$512>>1]|0;
       $sym = $513;
       $514 = $sym;
       $515 = $514&65535;
       $516 = ($515|0)>=(32);
       if (!($516)) {
        break;
       }
      }
     }
     $517 = $sym;
     $518 = $517&65535;
     $code = $518;
     $519 = $sym;
     $520 = $519&65535;
     $521 = $1;
     $522 = (($521) + 356|0);
     $523 = (($522) + ($520)|0);
     $524 = HEAP8[$523]|0;
     $525 = $524&255;
     $i = $525;
     $526 = $i;
     $527 = $bit_buffer;
     $528 = $527 >>> $526;
     $bit_buffer = $528;
     $529 = $i;
     $530 = $bits_left;
     $531 = (($530) - ($529))|0;
     $bits_left = $531;
     $532 = $code;
     $533 = ($532>>>0)>(30);
     if ($533) {
      label = 182;
      break L3;
     }
     while(1) {
      $534 = $bits_left;
      $535 = $code;
      $536 = (4160 + ($535)|0);
      $537 = HEAP8[$536]|0;
      $538 = $537&255;
      $539 = ($534|0)<($538|0);
      if (!($539)) {
       break;
      }
      $540 = $i_ptr;
      $541 = $i_end;
      $542 = ($540>>>0)>=($541>>>0);
      if ($542) {
       $543 = $1;
       $544 = (_read_input93($543)|0);
       $545 = ($544|0)!=(0);
       if ($545) {
        label = 191;
        break L3;
       }
       $549 = $1;
       $550 = (($549) + 36|0);
       $551 = HEAP32[$550>>2]|0;
       $i_ptr = $551;
       $552 = $1;
       $553 = (($552) + 40|0);
       $554 = HEAP32[$553>>2]|0;
       $i_end = $554;
      }
      $555 = $i_ptr;
      $556 = (($555) + 1|0);
      $i_ptr = $556;
      $557 = HEAP8[$555]|0;
      $558 = $557&255;
      $559 = $bits_left;
      $560 = $558 << $559;
      $561 = $bit_buffer;
      $562 = $561 | $560;
      $bit_buffer = $562;
      $563 = $bits_left;
      $564 = (($563) + 8)|0;
      $bits_left = $564;
     }
     $565 = $bit_buffer;
     $566 = $code;
     $567 = (4160 + ($566)|0);
     $568 = HEAP8[$567]|0;
     $569 = $568&255;
     $570 = (4056 + ($569<<1)|0);
     $571 = HEAP16[$570>>1]|0;
     $572 = $571&65535;
     $573 = $565 & $572;
     $distance = $573;
     $574 = $code;
     $575 = (4160 + ($574)|0);
     $576 = HEAP8[$575]|0;
     $577 = $576&255;
     $578 = $bit_buffer;
     $579 = $578 >>> $577;
     $bit_buffer = $579;
     $580 = $code;
     $581 = (4160 + ($580)|0);
     $582 = HEAP8[$581]|0;
     $583 = $582&255;
     $584 = $bits_left;
     $585 = (($584) - ($583))|0;
     $bits_left = $585;
     $586 = $code;
     $587 = (4192 + ($586<<1)|0);
     $588 = HEAP16[$587>>1]|0;
     $589 = $588&65535;
     $590 = $distance;
     $591 = (($590) + ($589))|0;
     $distance = $591;
     $592 = $distance;
     $593 = $1;
     $594 = (($593) + 12|0);
     $595 = HEAP32[$594>>2]|0;
     $596 = ($592>>>0)>($595>>>0);
     $597 = $596 ? 32768 : 0;
     $598 = $1;
     $599 = (($598) + 12|0);
     $600 = HEAP32[$599>>2]|0;
     $601 = (($597) + ($600))|0;
     $602 = $distance;
     $603 = (($601) - ($602))|0;
     $match_posn = $603;
     $604 = $length;
     $605 = ($604>>>0)<(12);
     if ($605) {
      while(1) {
       $606 = $length;
       $607 = (($606) + -1)|0;
       $length = $607;
       $608 = ($606|0)!=(0);
       if (!($608)) {
        break;
       }
       $609 = $match_posn;
       $610 = (($609) + 1)|0;
       $match_posn = $610;
       $611 = $1;
       $612 = (($611) + 2948|0);
       $613 = (($612) + ($609)|0);
       $614 = HEAP8[$613]|0;
       $615 = $1;
       $616 = (($615) + 12|0);
       $617 = HEAP32[$616>>2]|0;
       $618 = (($617) + 1)|0;
       HEAP32[$616>>2] = $618;
       $619 = $1;
       $620 = (($619) + 2948|0);
       $621 = (($620) + ($617)|0);
       HEAP8[$621] = $614;
       $622 = $match_posn;
       $623 = $622 & 32767;
       $match_posn = $623;
       $624 = $1;
       $625 = (($624) + 12|0);
       $626 = HEAP32[$625>>2]|0;
       $627 = ($626|0)==(32768);
       if ($627) {
        $628 = $1;
        $629 = (($628) + 16|0);
        $630 = HEAP32[$629>>2]|0;
        $631 = $1;
        $632 = (FUNCTION_TABLE_iii[$630 & 15]($631,32768)|0);
        $633 = ($632|0)!=(0);
        if ($633) {
         label = 204;
         break L3;
        }
        $634 = $1;
        $635 = (($634) + 12|0);
        HEAP32[$635>>2] = 0;
       }
      }
     } else {
      while(1) {
       $636 = $length;
       $this_run = $636;
       $637 = $match_posn;
       $638 = $this_run;
       $639 = (($637) + ($638))|0;
       $640 = ($639>>>0)>(32768);
       if ($640) {
        $641 = $match_posn;
        $642 = (32768 - ($641))|0;
        $this_run = $642;
       }
       $643 = $1;
       $644 = (($643) + 12|0);
       $645 = HEAP32[$644>>2]|0;
       $646 = $this_run;
       $647 = (($645) + ($646))|0;
       $648 = ($647>>>0)>(32768);
       if ($648) {
        $649 = $1;
        $650 = (($649) + 12|0);
        $651 = HEAP32[$650>>2]|0;
        $652 = (32768 - ($651))|0;
        $this_run = $652;
       }
       $653 = $1;
       $654 = (($653) + 12|0);
       $655 = HEAP32[$654>>2]|0;
       $656 = $1;
       $657 = (($656) + 2948|0);
       $658 = (($657) + ($655)|0);
       $rundest = $658;
       $659 = $this_run;
       $660 = $1;
       $661 = (($660) + 12|0);
       $662 = HEAP32[$661>>2]|0;
       $663 = (($662) + ($659))|0;
       HEAP32[$661>>2] = $663;
       $664 = $match_posn;
       $665 = $1;
       $666 = (($665) + 2948|0);
       $667 = (($666) + ($664)|0);
       $runsrc = $667;
       $668 = $this_run;
       $669 = $match_posn;
       $670 = (($669) + ($668))|0;
       $match_posn = $670;
       $671 = $this_run;
       $672 = $length;
       $673 = (($672) - ($671))|0;
       $length = $673;
       while(1) {
        $674 = $this_run;
        $675 = (($674) + -1)|0;
        $this_run = $675;
        $676 = ($674|0)!=(0);
        if (!($676)) {
         break;
        }
        $677 = $runsrc;
        $678 = (($677) + 1|0);
        $runsrc = $678;
        $679 = HEAP8[$677]|0;
        $680 = $rundest;
        $681 = (($680) + 1|0);
        $rundest = $681;
        HEAP8[$680] = $679;
       }
       $682 = $match_posn;
       $683 = ($682|0)==(32768);
       if ($683) {
        $match_posn = 0;
       }
       $684 = $1;
       $685 = (($684) + 12|0);
       $686 = HEAP32[$685>>2]|0;
       $687 = ($686|0)==(32768);
       if ($687) {
        $688 = $1;
        $689 = (($688) + 16|0);
        $690 = HEAP32[$689>>2]|0;
        $691 = $1;
        $692 = (FUNCTION_TABLE_iii[$690 & 15]($691,32768)|0);
        $693 = ($692|0)!=(0);
        if ($693) {
         label = 222;
         break L3;
        }
        $694 = $1;
        $695 = (($694) + 12|0);
        HEAP32[$695>>2] = 0;
       }
       $696 = $length;
       $697 = ($696>>>0)>(0);
       if (!($697)) {
        break;
       }
      }
     }
    }
   }
  }
  $698 = $last_block;
  $699 = ($698|0)!=(0);
  $700 = $699 ^ 1;
  if (!($700)) {
   label = 236;
   break;
  }
 }
 if ((label|0) == 12) {
  $22 = $1;
  $23 = (($22) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $0 = $24;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 27) {
  $55 = $1;
  $56 = (($55) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $0 = $57;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 38) {
  $0 = -4;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 42) {
  $0 = -4;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 48) {
  $115 = $1;
  $116 = (($115) + 20|0);
  $117 = HEAP32[$116>>2]|0;
  $0 = $117;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 53) {
  $0 = -2;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 59) {
  $158 = $1;
  $159 = (($158) + 20|0);
  $160 = HEAP32[$159>>2]|0;
  $0 = $160;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 69) {
  $0 = -3;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 97) {
  $282 = $i;
  $0 = $282;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 102) {
  $0 = -7;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 104) {
  $0 = -8;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 114) {
  $315 = $1;
  $316 = (($315) + 20|0);
  $317 = HEAP32[$316>>2]|0;
  $0 = $317;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 124) {
  $0 = -14;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 134) {
  $0 = -3;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 141) {
  $0 = -11;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 150) {
  $417 = $1;
  $418 = (($417) + 20|0);
  $419 = HEAP32[$418>>2]|0;
  $0 = $419;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 165) {
  $471 = $1;
  $472 = (($471) + 20|0);
  $473 = HEAP32[$472>>2]|0;
  $0 = $473;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 175) {
  $0 = -14;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 182) {
  $0 = -12;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 191) {
  $546 = $1;
  $547 = (($546) + 20|0);
  $548 = HEAP32[$547>>2]|0;
  $0 = $548;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 204) {
  $0 = -3;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 222) {
  $0 = -3;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 232) {
  $0 = -1;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 else if ((label|0) == 236) {
  $701 = $1;
  $702 = (($701) + 12|0);
  $703 = HEAP32[$702>>2]|0;
  $704 = ($703|0)!=(0);
  do {
   if ($704) {
    $705 = $1;
    $706 = (($705) + 16|0);
    $707 = HEAP32[$706>>2]|0;
    $708 = $1;
    $709 = $1;
    $710 = (($709) + 12|0);
    $711 = HEAP32[$710>>2]|0;
    $712 = (FUNCTION_TABLE_iii[$707 & 15]($708,$711)|0);
    $713 = ($712|0)!=(0);
    if (!($713)) {
     break;
    }
    $0 = -3;
    $726 = $0;
    STACKTOP = sp;return ($726|0);
   }
  } while(0);
  $714 = $i_ptr;
  $715 = $1;
  $716 = (($715) + 36|0);
  HEAP32[$716>>2] = $714;
  $717 = $i_end;
  $718 = $1;
  $719 = (($718) + 40|0);
  HEAP32[$719>>2] = $717;
  $720 = $bit_buffer;
  $721 = $1;
  $722 = (($721) + 56|0);
  HEAP32[$722>>2] = $720;
  $723 = $bits_left;
  $724 = $1;
  $725 = (($724) + 60|0);
  HEAP32[$725>>2] = $723;
  $0 = 0;
  $726 = $0;
  STACKTOP = sp;return ($726|0);
 }
 return 0|0;
}
function _mszipd_free($zip) {
 $zip = $zip|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $zip;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $sys = $4;
 $5 = $sys;
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$7 & 3]($10);
 $11 = $sys;
 $12 = (($11) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 FUNCTION_TABLE_vi[$13 & 3]($14);
 STACKTOP = sp;return;
}
function _zip_read_lens($zip) {
 $zip = $zip|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $bit_buffer = 0, $bitlen_codes = 0, $bits_left = 0, $bl_len = 0, $bl_table = 0, $code = 0, $dist_codes = 0, $i = 0, $i_end = 0, $i_ptr = 0, $last_code = 0, $lens = 0, $lit_codes = 0, $run = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0;
 $bl_table = sp + 56|0;
 $bl_len = sp + 312|0;
 $lens = sp + 336|0;
 $1 = $zip;
 $last_code = 0;
 $2 = $1;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $i_ptr = $4;
 $5 = $1;
 $6 = (($5) + 40|0);
 $7 = HEAP32[$6>>2]|0;
 $i_end = $7;
 $8 = $1;
 $9 = (($8) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $bit_buffer = $10;
 $11 = $1;
 $12 = (($11) + 60|0);
 $13 = HEAP32[$12>>2]|0;
 $bits_left = $13;
 while(1) {
  $14 = $bits_left;
  $15 = ($14|0)<(5);
  if (!($15)) {
   break;
  }
  $16 = $i_ptr;
  $17 = $i_end;
  $18 = ($16>>>0)>=($17>>>0);
  if ($18) {
   $19 = $1;
   $20 = (_read_input93($19)|0);
   $21 = ($20|0)!=(0);
   if ($21) {
    label = 11;
    break;
   }
   $25 = $1;
   $26 = (($25) + 36|0);
   $27 = HEAP32[$26>>2]|0;
   $i_ptr = $27;
   $28 = $1;
   $29 = (($28) + 40|0);
   $30 = HEAP32[$29>>2]|0;
   $i_end = $30;
  }
  $31 = $i_ptr;
  $32 = (($31) + 1|0);
  $i_ptr = $32;
  $33 = HEAP8[$31]|0;
  $34 = $33&255;
  $35 = $bits_left;
  $36 = $34 << $35;
  $37 = $bit_buffer;
  $38 = $37 | $36;
  $bit_buffer = $38;
  $39 = $bits_left;
  $40 = (($39) + 8)|0;
  $bits_left = $40;
 }
 if ((label|0) == 11) {
  $22 = $1;
  $23 = (($22) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $0 = $24;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $41 = $bit_buffer;
 $42 = $41 & 31;
 $lit_codes = $42;
 $43 = $bit_buffer;
 $44 = $43 >>> 5;
 $bit_buffer = $44;
 $45 = $bits_left;
 $46 = (($45) - 5)|0;
 $bits_left = $46;
 $47 = $lit_codes;
 $48 = (($47) + 257)|0;
 $lit_codes = $48;
 while(1) {
  $49 = $bits_left;
  $50 = ($49|0)<(5);
  if (!($50)) {
   break;
  }
  $51 = $i_ptr;
  $52 = $i_end;
  $53 = ($51>>>0)>=($52>>>0);
  if ($53) {
   $54 = $1;
   $55 = (_read_input93($54)|0);
   $56 = ($55|0)!=(0);
   if ($56) {
    label = 26;
    break;
   }
   $60 = $1;
   $61 = (($60) + 36|0);
   $62 = HEAP32[$61>>2]|0;
   $i_ptr = $62;
   $63 = $1;
   $64 = (($63) + 40|0);
   $65 = HEAP32[$64>>2]|0;
   $i_end = $65;
  }
  $66 = $i_ptr;
  $67 = (($66) + 1|0);
  $i_ptr = $67;
  $68 = HEAP8[$66]|0;
  $69 = $68&255;
  $70 = $bits_left;
  $71 = $69 << $70;
  $72 = $bit_buffer;
  $73 = $72 | $71;
  $bit_buffer = $73;
  $74 = $bits_left;
  $75 = (($74) + 8)|0;
  $bits_left = $75;
 }
 if ((label|0) == 26) {
  $57 = $1;
  $58 = (($57) + 20|0);
  $59 = HEAP32[$58>>2]|0;
  $0 = $59;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $76 = $bit_buffer;
 $77 = $76 & 31;
 $dist_codes = $77;
 $78 = $bit_buffer;
 $79 = $78 >>> 5;
 $bit_buffer = $79;
 $80 = $bits_left;
 $81 = (($80) - 5)|0;
 $bits_left = $81;
 $82 = $dist_codes;
 $83 = (($82) + 1)|0;
 $dist_codes = $83;
 while(1) {
  $84 = $bits_left;
  $85 = ($84|0)<(4);
  if (!($85)) {
   break;
  }
  $86 = $i_ptr;
  $87 = $i_end;
  $88 = ($86>>>0)>=($87>>>0);
  if ($88) {
   $89 = $1;
   $90 = (_read_input93($89)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    label = 41;
    break;
   }
   $95 = $1;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $i_ptr = $97;
   $98 = $1;
   $99 = (($98) + 40|0);
   $100 = HEAP32[$99>>2]|0;
   $i_end = $100;
  }
  $101 = $i_ptr;
  $102 = (($101) + 1|0);
  $i_ptr = $102;
  $103 = HEAP8[$101]|0;
  $104 = $103&255;
  $105 = $bits_left;
  $106 = $104 << $105;
  $107 = $bit_buffer;
  $108 = $107 | $106;
  $bit_buffer = $108;
  $109 = $bits_left;
  $110 = (($109) + 8)|0;
  $bits_left = $110;
 }
 if ((label|0) == 41) {
  $92 = $1;
  $93 = (($92) + 20|0);
  $94 = HEAP32[$93>>2]|0;
  $0 = $94;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $111 = $bit_buffer;
 $112 = $111 & 15;
 $bitlen_codes = $112;
 $113 = $bit_buffer;
 $114 = $113 >>> 4;
 $bit_buffer = $114;
 $115 = $bits_left;
 $116 = (($115) - 4)|0;
 $bits_left = $116;
 $117 = $bitlen_codes;
 $118 = (($117) + 4)|0;
 $bitlen_codes = $118;
 $119 = $lit_codes;
 $120 = ($119>>>0)>(288);
 if ($120) {
  $0 = -5;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $121 = $dist_codes;
 $122 = ($121>>>0)>(32);
 if ($122) {
  $0 = -5;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $i = 0;
 L68: while(1) {
  $123 = $i;
  $124 = $bitlen_codes;
  $125 = ($123>>>0)<($124>>>0);
  if (!($125)) {
   break;
  }
  while(1) {
   $126 = $bits_left;
   $127 = ($126|0)<(3);
   if (!($127)) {
    break;
   }
   $128 = $i_ptr;
   $129 = $i_end;
   $130 = ($128>>>0)>=($129>>>0);
   if ($130) {
    $131 = $1;
    $132 = (_read_input93($131)|0);
    $133 = ($132|0)!=(0);
    if ($133) {
     label = 62;
     break L68;
    }
    $137 = $1;
    $138 = (($137) + 36|0);
    $139 = HEAP32[$138>>2]|0;
    $i_ptr = $139;
    $140 = $1;
    $141 = (($140) + 40|0);
    $142 = HEAP32[$141>>2]|0;
    $i_end = $142;
   }
   $143 = $i_ptr;
   $144 = (($143) + 1|0);
   $i_ptr = $144;
   $145 = HEAP8[$143]|0;
   $146 = $145&255;
   $147 = $bits_left;
   $148 = $146 << $147;
   $149 = $bit_buffer;
   $150 = $149 | $148;
   $bit_buffer = $150;
   $151 = $bits_left;
   $152 = (($151) + 8)|0;
   $bits_left = $152;
  }
  $153 = $bit_buffer;
  $154 = $153 & 7;
  $155 = $154&255;
  $156 = $i;
  $157 = (4256 + ($156)|0);
  $158 = HEAP8[$157]|0;
  $159 = $158&255;
  $160 = (($bl_len) + ($159)|0);
  HEAP8[$160] = $155;
  $161 = $bit_buffer;
  $162 = $161 >>> 3;
  $bit_buffer = $162;
  $163 = $bits_left;
  $164 = (($163) - 3)|0;
  $bits_left = $164;
  $165 = $i;
  $166 = (($165) + 1)|0;
  $i = $166;
 }
 if ((label|0) == 62) {
  $134 = $1;
  $135 = (($134) + 20|0);
  $136 = HEAP32[$135>>2]|0;
  $0 = $136;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 while(1) {
  $167 = $i;
  $168 = ($167>>>0)<(19);
  if (!($168)) {
   break;
  }
  $169 = $i;
  $170 = (($169) + 1)|0;
  $i = $170;
  $171 = (4256 + ($169)|0);
  $172 = HEAP8[$171]|0;
  $173 = $172&255;
  $174 = (($bl_len) + ($173)|0);
  HEAP8[$174] = 0;
 }
 $175 = (_make_decode_table96(19,7,$bl_len,$bl_table)|0);
 $176 = ($175|0)!=(0);
 if ($176) {
  $0 = -6;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 $i = 0;
 L100: while(1) {
  $177 = $i;
  $178 = $lit_codes;
  $179 = $dist_codes;
  $180 = (($178) + ($179))|0;
  $181 = ($177>>>0)<($180>>>0);
  if (!($181)) {
   label = 151;
   break;
  }
  while(1) {
   $182 = $bits_left;
   $183 = ($182|0)<(7);
   if (!($183)) {
    break;
   }
   $184 = $i_ptr;
   $185 = $i_end;
   $186 = ($184>>>0)>=($185>>>0);
   if ($186) {
    $187 = $1;
    $188 = (_read_input93($187)|0);
    $189 = ($188|0)!=(0);
    if ($189) {
     label = 85;
     break L100;
    }
    $193 = $1;
    $194 = (($193) + 36|0);
    $195 = HEAP32[$194>>2]|0;
    $i_ptr = $195;
    $196 = $1;
    $197 = (($196) + 40|0);
    $198 = HEAP32[$197>>2]|0;
    $i_end = $198;
   }
   $199 = $i_ptr;
   $200 = (($199) + 1|0);
   $i_ptr = $200;
   $201 = HEAP8[$199]|0;
   $202 = $201&255;
   $203 = $bits_left;
   $204 = $202 << $203;
   $205 = $bit_buffer;
   $206 = $205 | $204;
   $bit_buffer = $206;
   $207 = $bits_left;
   $208 = (($207) + 8)|0;
   $bits_left = $208;
  }
  $209 = $bit_buffer;
  $210 = $209 & 127;
  $211 = (($bl_table) + ($210<<1)|0);
  $212 = HEAP16[$211>>1]|0;
  $213 = $212&65535;
  $code = $213;
  $214 = $code;
  $215 = (($bl_len) + ($214)|0);
  $216 = HEAP8[$215]|0;
  $217 = $216&255;
  $218 = $bit_buffer;
  $219 = $218 >>> $217;
  $bit_buffer = $219;
  $220 = $code;
  $221 = (($bl_len) + ($220)|0);
  $222 = HEAP8[$221]|0;
  $223 = $222&255;
  $224 = $bits_left;
  $225 = (($224) - ($223))|0;
  $bits_left = $225;
  $226 = $code;
  $227 = ($226>>>0)<(16);
  if ($227) {
   $228 = $code;
   $last_code = $228;
   $229 = $228&255;
   $230 = $i;
   $231 = (($lens) + ($230)|0);
   HEAP8[$231] = $229;
  } else {
   $232 = $code;
   if ((($232|0) == 18)) {
    while(1) {
     $304 = $bits_left;
     $305 = ($304|0)<(7);
     if (!($305)) {
      break;
     }
     $306 = $i_ptr;
     $307 = $i_end;
     $308 = ($306>>>0)>=($307>>>0);
     if ($308) {
      $309 = $1;
      $310 = (_read_input93($309)|0);
      $311 = ($310|0)!=(0);
      if ($311) {
       label = 134;
       break L100;
      }
      $315 = $1;
      $316 = (($315) + 36|0);
      $317 = HEAP32[$316>>2]|0;
      $i_ptr = $317;
      $318 = $1;
      $319 = (($318) + 40|0);
      $320 = HEAP32[$319>>2]|0;
      $i_end = $320;
     }
     $321 = $i_ptr;
     $322 = (($321) + 1|0);
     $i_ptr = $322;
     $323 = HEAP8[$321]|0;
     $324 = $323&255;
     $325 = $bits_left;
     $326 = $324 << $325;
     $327 = $bit_buffer;
     $328 = $327 | $326;
     $bit_buffer = $328;
     $329 = $bits_left;
     $330 = (($329) + 8)|0;
     $bits_left = $330;
    }
    $331 = $bit_buffer;
    $332 = $331 & 127;
    $run = $332;
    $333 = $bit_buffer;
    $334 = $333 >>> 7;
    $bit_buffer = $334;
    $335 = $bits_left;
    $336 = (($335) - 7)|0;
    $bits_left = $336;
    $337 = $run;
    $338 = (($337) + 11)|0;
    $run = $338;
    $code = 0;
   } else if ((($232|0) == 17)) {
    while(1) {
     $269 = $bits_left;
     $270 = ($269|0)<(3);
     if (!($270)) {
      break;
     }
     $271 = $i_ptr;
     $272 = $i_end;
     $273 = ($271>>>0)>=($272>>>0);
     if ($273) {
      $274 = $1;
      $275 = (_read_input93($274)|0);
      $276 = ($275|0)!=(0);
      if ($276) {
       label = 118;
       break L100;
      }
      $280 = $1;
      $281 = (($280) + 36|0);
      $282 = HEAP32[$281>>2]|0;
      $i_ptr = $282;
      $283 = $1;
      $284 = (($283) + 40|0);
      $285 = HEAP32[$284>>2]|0;
      $i_end = $285;
     }
     $286 = $i_ptr;
     $287 = (($286) + 1|0);
     $i_ptr = $287;
     $288 = HEAP8[$286]|0;
     $289 = $288&255;
     $290 = $bits_left;
     $291 = $289 << $290;
     $292 = $bit_buffer;
     $293 = $292 | $291;
     $bit_buffer = $293;
     $294 = $bits_left;
     $295 = (($294) + 8)|0;
     $bits_left = $295;
    }
    $296 = $bit_buffer;
    $297 = $296 & 7;
    $run = $297;
    $298 = $bit_buffer;
    $299 = $298 >>> 3;
    $bit_buffer = $299;
    $300 = $bits_left;
    $301 = (($300) - 3)|0;
    $bits_left = $301;
    $302 = $run;
    $303 = (($302) + 3)|0;
    $run = $303;
    $code = 0;
   } else if ((($232|0) == 16)) {
    while(1) {
     $233 = $bits_left;
     $234 = ($233|0)<(2);
     if (!($234)) {
      break;
     }
     $235 = $i_ptr;
     $236 = $i_end;
     $237 = ($235>>>0)>=($236>>>0);
     if ($237) {
      $238 = $1;
      $239 = (_read_input93($238)|0);
      $240 = ($239|0)!=(0);
      if ($240) {
       label = 102;
       break L100;
      }
      $244 = $1;
      $245 = (($244) + 36|0);
      $246 = HEAP32[$245>>2]|0;
      $i_ptr = $246;
      $247 = $1;
      $248 = (($247) + 40|0);
      $249 = HEAP32[$248>>2]|0;
      $i_end = $249;
     }
     $250 = $i_ptr;
     $251 = (($250) + 1|0);
     $i_ptr = $251;
     $252 = HEAP8[$250]|0;
     $253 = $252&255;
     $254 = $bits_left;
     $255 = $253 << $254;
     $256 = $bit_buffer;
     $257 = $256 | $255;
     $bit_buffer = $257;
     $258 = $bits_left;
     $259 = (($258) + 8)|0;
     $bits_left = $259;
    }
    $260 = $bit_buffer;
    $261 = $260 & 3;
    $run = $261;
    $262 = $bit_buffer;
    $263 = $262 >>> 2;
    $bit_buffer = $263;
    $264 = $bits_left;
    $265 = (($264) - 2)|0;
    $bits_left = $265;
    $266 = $run;
    $267 = (($266) + 3)|0;
    $run = $267;
    $268 = $last_code;
    $code = $268;
   } else {
    label = 142;
    break;
   }
   $339 = $i;
   $340 = $run;
   $341 = (($339) + ($340))|0;
   $342 = $lit_codes;
   $343 = $dist_codes;
   $344 = (($342) + ($343))|0;
   $345 = ($341>>>0)>($344>>>0);
   if ($345) {
    label = 144;
    break;
   }
   while(1) {
    $346 = $run;
    $347 = (($346) + -1)|0;
    $run = $347;
    $348 = ($346|0)!=(0);
    if (!($348)) {
     break;
    }
    $349 = $code;
    $350 = $349&255;
    $351 = $i;
    $352 = (($351) + 1)|0;
    $i = $352;
    $353 = (($lens) + ($351)|0);
    HEAP8[$353] = $350;
   }
   $354 = $i;
   $355 = (($354) + -1)|0;
   $i = $355;
  }
  $356 = $i;
  $357 = (($356) + 1)|0;
  $i = $357;
 }
 if ((label|0) == 85) {
  $190 = $1;
  $191 = (($190) + 20|0);
  $192 = HEAP32[$191>>2]|0;
  $0 = $192;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 else if ((label|0) == 102) {
  $241 = $1;
  $242 = (($241) + 20|0);
  $243 = HEAP32[$242>>2]|0;
  $0 = $243;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 else if ((label|0) == 118) {
  $277 = $1;
  $278 = (($277) + 20|0);
  $279 = HEAP32[$278>>2]|0;
  $0 = $279;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 else if ((label|0) == 134) {
  $312 = $1;
  $313 = (($312) + 20|0);
  $314 = HEAP32[$313>>2]|0;
  $0 = $314;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 else if ((label|0) == 142) {
  $0 = -10;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 else if ((label|0) == 144) {
  $0 = -9;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 else if ((label|0) == 151) {
  $358 = $lit_codes;
  $i = $358;
  $359 = $1;
  $360 = HEAP32[$359>>2]|0;
  $361 = (($360) + 36|0);
  $362 = HEAP32[$361>>2]|0;
  $363 = $1;
  $364 = (($363) + 68|0);
  $365 = $i;
  FUNCTION_TABLE_viii[$362 & 3]($lens,$364,$365);
  while(1) {
   $366 = $i;
   $367 = ($366>>>0)<(288);
   if (!($367)) {
    break;
   }
   $368 = $i;
   $369 = (($368) + 1)|0;
   $i = $369;
   $370 = $1;
   $371 = (($370) + 68|0);
   $372 = (($371) + ($368)|0);
   HEAP8[$372] = 0;
  }
  $373 = $dist_codes;
  $i = $373;
  $374 = $1;
  $375 = HEAP32[$374>>2]|0;
  $376 = (($375) + 36|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = $lit_codes;
  $379 = (($lens) + ($378)|0);
  $380 = $1;
  $381 = (($380) + 356|0);
  $382 = $i;
  FUNCTION_TABLE_viii[$377 & 3]($379,$381,$382);
  while(1) {
   $383 = $i;
   $384 = ($383>>>0)<(32);
   if (!($384)) {
    break;
   }
   $385 = $i;
   $386 = (($385) + 1)|0;
   $i = $386;
   $387 = $1;
   $388 = (($387) + 356|0);
   $389 = (($388) + ($385)|0);
   HEAP8[$389] = 0;
  }
  $390 = $i_ptr;
  $391 = $1;
  $392 = (($391) + 36|0);
  HEAP32[$392>>2] = $390;
  $393 = $i_end;
  $394 = $1;
  $395 = (($394) + 40|0);
  HEAP32[$395>>2] = $393;
  $396 = $bit_buffer;
  $397 = $1;
  $398 = (($397) + 56|0);
  HEAP32[$398>>2] = $396;
  $399 = $bits_left;
  $400 = $1;
  $401 = (($400) + 60|0);
  HEAP32[$401>>2] = $399;
  $0 = 0;
  $402 = $0;
  STACKTOP = sp;return ($402|0);
 }
 return 0|0;
}
function _make_decode_table96($nsyms,$nbits,$length,$table) {
 $nsyms = $nsyms|0;
 $nbits = $nbits|0;
 $length = $length|0;
 $table = $table|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit_mask = 0, $bit_num = 0, $fill = 0, $leaf = 0, $next_symbol = 0, $pos = 0, $reverse = 0;
 var $sym = 0, $table_mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $nsyms;
 $2 = $nbits;
 $3 = $length;
 $4 = $table;
 $pos = 0;
 $5 = $2;
 $6 = 1 << $5;
 $table_mask = $6;
 $7 = $table_mask;
 $8 = $7 >>> 1;
 $bit_mask = $8;
 $bit_num = 1;
 L1: while(1) {
  $9 = $bit_num;
  $10 = $9&255;
  $11 = $2;
  $12 = ($10>>>0)<=($11>>>0);
  if (!($12)) {
   break;
  }
  $sym = 0;
  while(1) {
   $13 = $sym;
   $14 = $13&65535;
   $15 = $1;
   $16 = ($14>>>0)<($15>>>0);
   if (!($16)) {
    break;
   }
   $17 = $sym;
   $18 = $17&65535;
   $19 = $3;
   $20 = (($19) + ($18)|0);
   $21 = HEAP8[$20]|0;
   $22 = $21&255;
   $23 = $bit_num;
   $24 = $23&255;
   $25 = ($22|0)!=($24|0);
   if ($25) {
   } else {
    $26 = $sym;
    $27 = $26&65535;
    $28 = $3;
    $29 = (($28) + ($27)|0);
    $30 = HEAP8[$29]|0;
    $31 = $30&255;
    $fill = $31;
    $32 = $pos;
    $33 = $2;
    $34 = $fill;
    $35 = (($33) - ($34))|0;
    $36 = $32 >>> $35;
    $reverse = $36;
    $leaf = 0;
    while(1) {
     $37 = $leaf;
     $38 = $37 << 1;
     $leaf = $38;
     $39 = $reverse;
     $40 = $39 & 1;
     $41 = $leaf;
     $42 = $41 | $40;
     $leaf = $42;
     $43 = $reverse;
     $44 = $43 >>> 1;
     $reverse = $44;
     $45 = $fill;
     $46 = (($45) + -1)|0;
     $fill = $46;
     $47 = ($46|0)!=(0);
     if (!($47)) {
      break;
     }
    }
    $48 = $bit_mask;
    $49 = $pos;
    $50 = (($49) + ($48))|0;
    $pos = $50;
    $51 = $table_mask;
    $52 = ($50>>>0)>($51>>>0);
    if ($52) {
     label = 11;
     break L1;
    }
    $53 = $bit_mask;
    $fill = $53;
    $54 = $bit_num;
    $55 = $54&255;
    $56 = 1 << $55;
    $57 = $56&65535;
    $next_symbol = $57;
    while(1) {
     $58 = $sym;
     $59 = $leaf;
     $60 = $4;
     $61 = (($60) + ($59<<1)|0);
     HEAP16[$61>>1] = $58;
     $62 = $next_symbol;
     $63 = $62&65535;
     $64 = $leaf;
     $65 = (($64) + ($63))|0;
     $leaf = $65;
     $66 = $fill;
     $67 = (($66) + -1)|0;
     $fill = $67;
     $68 = ($67|0)!=(0);
     if (!($68)) {
      break;
     }
    }
   }
   $69 = $sym;
   $70 = (($69) + 1)<<16>>16;
   $sym = $70;
  }
  $71 = $bit_mask;
  $72 = $71 >>> 1;
  $bit_mask = $72;
  $73 = $bit_num;
  $74 = (($73) + 1)<<24>>24;
  $bit_num = $74;
 }
 if ((label|0) == 11) {
  $0 = 1;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 $75 = $pos;
 $76 = $table_mask;
 $77 = ($75|0)==($76|0);
 if ($77) {
  $0 = 0;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 $78 = $pos;
 $79 = $78&65535;
 $sym = $79;
 while(1) {
  $80 = $sym;
  $81 = $80&65535;
  $82 = $table_mask;
  $83 = ($81>>>0)<($82>>>0);
  if (!($83)) {
   break;
  }
  $84 = $sym;
  $85 = $84&65535;
  $reverse = $85;
  $leaf = 0;
  $86 = $2;
  $fill = $86;
  while(1) {
   $87 = $leaf;
   $88 = $87 << 1;
   $leaf = $88;
   $89 = $reverse;
   $90 = $89 & 1;
   $91 = $leaf;
   $92 = $91 | $90;
   $leaf = $92;
   $93 = $reverse;
   $94 = $93 >>> 1;
   $reverse = $94;
   $95 = $fill;
   $96 = (($95) + -1)|0;
   $fill = $96;
   $97 = ($96|0)!=(0);
   if (!($97)) {
    break;
   }
  }
  $98 = $leaf;
  $99 = $4;
  $100 = (($99) + ($98<<1)|0);
  HEAP16[$100>>1] = -1;
  $101 = $sym;
  $102 = (($101) + 1)<<16>>16;
  $sym = $102;
 }
 $103 = $table_mask;
 $104 = $103 >>> 1;
 $105 = $1;
 $106 = ($104>>>0)<($105>>>0);
 if ($106) {
  $107 = $1;
  $111 = $107;
 } else {
  $108 = $table_mask;
  $109 = $108 >>> 1;
  $111 = $109;
 }
 $110 = $111&65535;
 $next_symbol = $110;
 $112 = $pos;
 $113 = $112 << 16;
 $pos = $113;
 $114 = $table_mask;
 $115 = $114 << 16;
 $table_mask = $115;
 $bit_mask = 32768;
 $116 = $2;
 $117 = (($116) + 1)|0;
 $118 = $117&255;
 $bit_num = $118;
 L43: while(1) {
  $119 = $bit_num;
  $120 = $119&255;
  $121 = ($120|0)<=(16);
  if (!($121)) {
   label = 54;
   break;
  }
  $sym = 0;
  while(1) {
   $122 = $sym;
   $123 = $122&65535;
   $124 = $1;
   $125 = ($123>>>0)<($124>>>0);
   if (!($125)) {
    break;
   }
   $126 = $sym;
   $127 = $126&65535;
   $128 = $3;
   $129 = (($128) + ($127)|0);
   $130 = HEAP8[$129]|0;
   $131 = $130&255;
   $132 = $bit_num;
   $133 = $132&255;
   $134 = ($131|0)!=($133|0);
   if ($134) {
   } else {
    $135 = $pos;
    $136 = $135 >>> 16;
    $reverse = $136;
    $leaf = 0;
    $137 = $2;
    $fill = $137;
    while(1) {
     $138 = $leaf;
     $139 = $138 << 1;
     $leaf = $139;
     $140 = $reverse;
     $141 = $140 & 1;
     $142 = $leaf;
     $143 = $142 | $141;
     $leaf = $143;
     $144 = $reverse;
     $145 = $144 >>> 1;
     $reverse = $145;
     $146 = $fill;
     $147 = (($146) + -1)|0;
     $fill = $147;
     $148 = ($147|0)!=(0);
     if (!($148)) {
      break;
     }
    }
    $fill = 0;
    while(1) {
     $149 = $fill;
     $150 = $bit_num;
     $151 = $150&255;
     $152 = $2;
     $153 = (($151) - ($152))|0;
     $154 = ($149>>>0)<($153>>>0);
     if (!($154)) {
      break;
     }
     $155 = $leaf;
     $156 = $4;
     $157 = (($156) + ($155<<1)|0);
     $158 = HEAP16[$157>>1]|0;
     $159 = $158&65535;
     $160 = ($159|0)==(65535);
     if ($160) {
      $161 = $next_symbol;
      $162 = $161&65535;
      $163 = $162 << 1;
      $164 = $4;
      $165 = (($164) + ($163<<1)|0);
      HEAP16[$165>>1] = -1;
      $166 = $next_symbol;
      $167 = $166&65535;
      $168 = $167 << 1;
      $169 = (($168) + 1)|0;
      $170 = $4;
      $171 = (($170) + ($169<<1)|0);
      HEAP16[$171>>1] = -1;
      $172 = $next_symbol;
      $173 = (($172) + 1)<<16>>16;
      $next_symbol = $173;
      $174 = $leaf;
      $175 = $4;
      $176 = (($175) + ($174<<1)|0);
      HEAP16[$176>>1] = $172;
     }
     $177 = $leaf;
     $178 = $4;
     $179 = (($178) + ($177<<1)|0);
     $180 = HEAP16[$179>>1]|0;
     $181 = $180&65535;
     $182 = $181 << 1;
     $leaf = $182;
     $183 = $pos;
     $184 = $fill;
     $185 = (15 - ($184))|0;
     $186 = $183 >>> $185;
     $187 = $186 & 1;
     $188 = ($187|0)!=(0);
     if ($188) {
      $189 = $leaf;
      $190 = (($189) + 1)|0;
      $leaf = $190;
     }
     $191 = $fill;
     $192 = (($191) + 1)|0;
     $fill = $192;
    }
    $193 = $sym;
    $194 = $leaf;
    $195 = $4;
    $196 = (($195) + ($194<<1)|0);
    HEAP16[$196>>1] = $193;
    $197 = $bit_mask;
    $198 = $pos;
    $199 = (($198) + ($197))|0;
    $pos = $199;
    $200 = $table_mask;
    $201 = ($199>>>0)>($200>>>0);
    if ($201) {
     label = 49;
     break L43;
    }
   }
   $202 = $sym;
   $203 = (($202) + 1)<<16>>16;
   $sym = $203;
  }
  $204 = $bit_mask;
  $205 = $204 >>> 1;
  $bit_mask = $205;
  $206 = $bit_num;
  $207 = (($206) + 1)<<24>>24;
  $bit_num = $207;
 }
 if ((label|0) == 49) {
  $0 = 1;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 else if ((label|0) == 54) {
  $208 = $pos;
  $209 = $table_mask;
  $210 = ($208|0)==($209|0);
  $211 = $210 ? 0 : 1;
  $0 = $211;
  $212 = $0;
  STACKTOP = sp;return ($212|0);
 }
 return 0|0;
}
function _qtmd_init($system,$input,$output,$window_bits,$input_buffer_size) {
 $system = $system|0;
 $input = $input|0;
 $output = $output|0;
 $window_bits = $window_bits|0;
 $input_buffer_size = $input_buffer_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $qtm = 0, $window_size = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $system;
 $2 = $input;
 $3 = $output;
 $4 = $window_bits;
 $5 = $input_buffer_size;
 $6 = $4;
 $7 = 1 << $6;
 $window_size = $7;
 $8 = $1;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  $0 = 0;
  $155 = $0;
  STACKTOP = sp;return ($155|0);
 }
 $10 = $4;
 $11 = ($10|0)<(10);
 if (!($11)) {
  $12 = $4;
  $13 = ($12|0)>(21);
  if (!($13)) {
   $14 = $5;
   $15 = (($14) + 1)|0;
   $16 = $15 & -2;
   $5 = $16;
   $17 = $5;
   $18 = ($17|0)<(2);
   if ($18) {
    $0 = 0;
    $155 = $0;
    STACKTOP = sp;return ($155|0);
   }
   $19 = $1;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $1;
   $23 = (FUNCTION_TABLE_iii[$21 & 15]($22,1784)|0);
   $qtm = $23;
   $24 = ($23|0)!=(0|0);
   if (!($24)) {
    $0 = 0;
    $155 = $0;
    STACKTOP = sp;return ($155|0);
   }
   $25 = $1;
   $26 = (($25) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = $window_size;
   $30 = (FUNCTION_TABLE_iii[$27 & 15]($28,$29)|0);
   $31 = $qtm;
   $32 = (($31) + 12|0);
   HEAP32[$32>>2] = $30;
   $33 = $1;
   $34 = (($33) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = $5;
   $38 = (FUNCTION_TABLE_iii[$35 & 15]($36,$37)|0);
   $39 = $qtm;
   $40 = (($39) + 40|0);
   HEAP32[$40>>2] = $38;
   $41 = $qtm;
   $42 = (($41) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)!=(0|0);
   if ($44) {
    $45 = $qtm;
    $46 = (($45) + 40|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)!=(0|0);
    if ($48) {
     $65 = $1;
     $66 = $qtm;
     HEAP32[$66>>2] = $65;
     $67 = $2;
     $68 = $qtm;
     $69 = (($68) + 4|0);
     HEAP32[$69>>2] = $67;
     $70 = $3;
     $71 = $qtm;
     $72 = (($71) + 8|0);
     HEAP32[$72>>2] = $70;
     $73 = $5;
     $74 = $qtm;
     $75 = (($74) + 64|0);
     HEAP32[$75>>2] = $73;
     $76 = $window_size;
     $77 = $qtm;
     $78 = (($77) + 16|0);
     HEAP32[$78>>2] = $76;
     $79 = $qtm;
     $80 = (($79) + 20|0);
     HEAP32[$80>>2] = 0;
     $81 = $qtm;
     $82 = (($81) + 24|0);
     HEAP32[$82>>2] = 32768;
     $83 = $qtm;
     $84 = (($83) + 34|0);
     HEAP8[$84] = 0;
     $85 = $qtm;
     $86 = (($85) + 36|0);
     HEAP32[$86>>2] = 0;
     $87 = $qtm;
     $88 = (($87) + 40|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = $qtm;
     $91 = (($90) + 48|0);
     HEAP32[$91>>2] = $89;
     $92 = $qtm;
     $93 = (($92) + 44|0);
     HEAP32[$93>>2] = $89;
     $94 = $qtm;
     $95 = (($94) + 12|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = $qtm;
     $98 = (($97) + 56|0);
     HEAP32[$98>>2] = $96;
     $99 = $qtm;
     $100 = (($99) + 52|0);
     HEAP32[$100>>2] = $96;
     $101 = $qtm;
     $102 = (($101) + 69|0);
     HEAP8[$102] = 0;
     $103 = $qtm;
     $104 = (($103) + 68|0);
     HEAP8[$104] = 0;
     $105 = $qtm;
     $106 = (($105) + 60|0);
     HEAP32[$106>>2] = 0;
     $107 = $4;
     $108 = $107<<1;
     $i = $108;
     $109 = $qtm;
     $110 = (($109) + 72|0);
     $111 = $qtm;
     $112 = (($111) + 180|0);
     _qtmd_init_model($110,$112,0,64);
     $113 = $qtm;
     $114 = (($113) + 84|0);
     $115 = $qtm;
     $116 = (($115) + 440|0);
     _qtmd_init_model($114,$116,64,64);
     $117 = $qtm;
     $118 = (($117) + 96|0);
     $119 = $qtm;
     $120 = (($119) + 700|0);
     _qtmd_init_model($118,$120,128,64);
     $121 = $qtm;
     $122 = (($121) + 108|0);
     $123 = $qtm;
     $124 = (($123) + 960|0);
     _qtmd_init_model($122,$124,192,64);
     $125 = $qtm;
     $126 = (($125) + 120|0);
     $127 = $qtm;
     $128 = (($127) + 1220|0);
     $129 = $i;
     $130 = ($129|0)>(24);
     if ($130) {
      $132 = 24;
     } else {
      $131 = $i;
      $132 = $131;
     }
     _qtmd_init_model($126,$128,0,$132);
     $133 = $qtm;
     $134 = (($133) + 132|0);
     $135 = $qtm;
     $136 = (($135) + 1320|0);
     $137 = $i;
     $138 = ($137|0)>(36);
     if ($138) {
      $140 = 36;
     } else {
      $139 = $i;
      $140 = $139;
     }
     _qtmd_init_model($134,$136,0,$140);
     $141 = $qtm;
     $142 = (($141) + 144|0);
     $143 = $qtm;
     $144 = (($143) + 1468|0);
     $145 = $i;
     _qtmd_init_model($142,$144,0,$145);
     $146 = $qtm;
     $147 = (($146) + 156|0);
     $148 = $qtm;
     $149 = (($148) + 1640|0);
     _qtmd_init_model($147,$149,0,27);
     $150 = $qtm;
     $151 = (($150) + 168|0);
     $152 = $qtm;
     $153 = (($152) + 1752|0);
     _qtmd_init_model($151,$153,0,7);
     $154 = $qtm;
     $0 = $154;
     $155 = $0;
     STACKTOP = sp;return ($155|0);
    }
   }
   $49 = $1;
   $50 = (($49) + 32|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = $qtm;
   $53 = (($52) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   FUNCTION_TABLE_vi[$51 & 3]($54);
   $55 = $1;
   $56 = (($55) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $qtm;
   $59 = (($58) + 40|0);
   $60 = HEAP32[$59>>2]|0;
   FUNCTION_TABLE_vi[$57 & 3]($60);
   $61 = $1;
   $62 = (($61) + 32|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $qtm;
   FUNCTION_TABLE_vi[$63 & 3]($64);
   $0 = 0;
   $155 = $0;
   STACKTOP = sp;return ($155|0);
  }
 }
 $0 = 0;
 $155 = $0;
 STACKTOP = sp;return ($155|0);
}
function _qtmd_init_model($model,$syms,$start,$len) {
 $model = $model|0;
 $syms = $syms|0;
 $start = $start|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $model;
 $1 = $syms;
 $2 = $start;
 $3 = $len;
 $4 = $0;
 HEAP32[$4>>2] = 4;
 $5 = $3;
 $6 = $0;
 $7 = (($6) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = $0;
 $10 = (($9) + 8|0);
 HEAP32[$10>>2] = $8;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $3;
  $13 = ($11|0)<=($12|0);
  if (!($13)) {
   break;
  }
  $14 = $2;
  $15 = $i;
  $16 = (($14) + ($15))|0;
  $17 = $16&65535;
  $18 = $i;
  $19 = $1;
  $20 = (($19) + ($18<<2)|0);
  HEAP16[$20>>1] = $17;
  $21 = $3;
  $22 = $i;
  $23 = (($21) - ($22))|0;
  $24 = $23&65535;
  $25 = $i;
  $26 = $1;
  $27 = (($26) + ($25<<2)|0);
  $28 = (($27) + 2|0);
  HEAP16[$28>>1] = $24;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 STACKTOP = sp;return;
}
function _qtmd_decompress($qtm,$out_bytes) {
 $qtm = $qtm|0;
 $out_bytes = $out_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $C = 0, $H = 0, $L = 0, $b0 = 0, $b01 = 0, $b013 = 0, $b015 = 0, $b019 = 0, $b021 = 0, $b025 = 0, $b027 = 0, $b03 = 0, $b05 = 0;
 var $b07 = 0, $b09 = 0, $b1 = 0, $b110 = 0, $b114 = 0, $b116 = 0, $b12 = 0, $b120 = 0, $b122 = 0, $b126 = 0, $b128 = 0, $b14 = 0, $b16 = 0, $b18 = 0, $bit_buffer = 0, $bitrun = 0, $bitrun12 = 0, $bitrun18 = 0, $bitrun24 = 0, $bits_left = 0;
 var $extra = 0, $frame_end = 0, $frame_todo = 0, $i = 0, $i_end = 0, $i_ptr = 0, $j = 0, $match_length = 0, $match_offset = 0, $mdl = 0, $needed = 0, $needed11 = 0, $needed17 = 0, $needed23 = 0, $range = 0, $rundest = 0, $runsrc = 0, $selector = 0, $sym = 0, $symf = 0;
 var $window = 0, $window_posn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $1 = $qtm;
 $2 = $out_bytes;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $2;
  $6 = ($5|0)<(0);
  if (!($6)) {
   $7 = $1;
   $8 = (($7) + 36|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(0);
   if ($10) {
    $11 = $1;
    $12 = (($11) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $0 = $13;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   $14 = $1;
   $15 = (($14) + 56|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 52|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $16;
   $21 = $19;
   $22 = (($20) - ($21))|0;
   $i = $22;
   $23 = $i;
   $24 = $2;
   $25 = ($23|0)>($24|0);
   if ($25) {
    $26 = $2;
    $i = $26;
   }
   $27 = $i;
   $28 = ($27|0)!=(0);
   do {
    if ($28) {
     $29 = $1;
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $1;
     $34 = (($33) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = $1;
     $37 = (($36) + 52|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $i;
     $40 = (FUNCTION_TABLE_iiii[$32 & 15]($35,$38,$39)|0);
     $41 = $i;
     $42 = ($40|0)!=($41|0);
     if (!($42)) {
      $45 = $i;
      $46 = $1;
      $47 = (($46) + 52|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (($48) + ($45)|0);
      HEAP32[$47>>2] = $49;
      $50 = $i;
      $51 = $2;
      $52 = (($51) - ($50))|0;
      $2 = $52;
      break;
     }
     $43 = $1;
     $44 = (($43) + 36|0);
     HEAP32[$44>>2] = 4;
     $0 = 4;
     $2384 = $0;
     STACKTOP = sp;return ($2384|0);
    }
   } while(0);
   $53 = $2;
   $54 = ($53|0)==(0);
   if ($54) {
    $0 = 0;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   $55 = $1;
   $56 = (($55) + 44|0);
   $57 = HEAP32[$56>>2]|0;
   $i_ptr = $57;
   $58 = $1;
   $59 = (($58) + 48|0);
   $60 = HEAP32[$59>>2]|0;
   $i_end = $60;
   $61 = $1;
   $62 = (($61) + 60|0);
   $63 = HEAP32[$62>>2]|0;
   $bit_buffer = $63;
   $64 = $1;
   $65 = (($64) + 68|0);
   $66 = HEAP8[$65]|0;
   $bits_left = $66;
   $67 = $1;
   $68 = (($67) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $window = $69;
   $70 = $1;
   $71 = (($70) + 20|0);
   $72 = HEAP32[$71>>2]|0;
   $window_posn = $72;
   $73 = $1;
   $74 = (($73) + 24|0);
   $75 = HEAP32[$74>>2]|0;
   $frame_todo = $75;
   $76 = $1;
   $77 = (($76) + 28|0);
   $78 = HEAP16[$77>>1]|0;
   $H = $78;
   $79 = $1;
   $80 = (($79) + 30|0);
   $81 = HEAP16[$80>>1]|0;
   $L = $81;
   $82 = $1;
   $83 = (($82) + 32|0);
   $84 = HEAP16[$83>>1]|0;
   $C = $84;
   L24: while(1) {
    $85 = $1;
    $86 = (($85) + 56|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $1;
    $89 = (($88) + 52|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = $87;
    $92 = $90;
    $93 = (($91) - ($92))|0;
    $94 = $2;
    $95 = ($93|0)<($94|0);
    if (!($95)) {
     break;
    }
    $96 = $1;
    $97 = (($96) + 34|0);
    $98 = HEAP8[$97]|0;
    $99 = ($98<<24>>24)!=(0);
    if (!($99)) {
     $H = -1;
     $L = 0;
     while(1) {
      $100 = $bits_left;
      $101 = $100&255;
      $102 = ($101|0)<(16);
      if (!($102)) {
       break;
      }
      $103 = $i_ptr;
      $104 = $i_end;
      $105 = ($103>>>0)>=($104>>>0);
      if ($105) {
       $106 = $1;
       $107 = (_read_input103($106)|0);
       $108 = ($107|0)!=(0);
       if ($108) {
        label = 27;
        break L24;
       }
       $112 = $1;
       $113 = (($112) + 44|0);
       $114 = HEAP32[$113>>2]|0;
       $i_ptr = $114;
       $115 = $1;
       $116 = (($115) + 48|0);
       $117 = HEAP32[$116>>2]|0;
       $i_end = $117;
      }
      $118 = $i_ptr;
      $119 = (($118) + 1|0);
      $i_ptr = $119;
      $120 = HEAP8[$118]|0;
      $b0 = $120;
      $121 = $i_ptr;
      $122 = $i_end;
      $123 = ($121>>>0)>=($122>>>0);
      if ($123) {
       $124 = $1;
       $125 = (_read_input103($124)|0);
       $126 = ($125|0)!=(0);
       if ($126) {
        label = 33;
        break L24;
       }
       $130 = $1;
       $131 = (($130) + 44|0);
       $132 = HEAP32[$131>>2]|0;
       $i_ptr = $132;
       $133 = $1;
       $134 = (($133) + 48|0);
       $135 = HEAP32[$134>>2]|0;
       $i_end = $135;
      }
      $136 = $i_ptr;
      $137 = (($136) + 1|0);
      $i_ptr = $137;
      $138 = HEAP8[$136]|0;
      $b1 = $138;
      $139 = $b0;
      $140 = $139&255;
      $141 = $140 << 8;
      $142 = $b1;
      $143 = $142&255;
      $144 = $141 | $143;
      $145 = $bits_left;
      $146 = $145&255;
      $147 = (16 - ($146))|0;
      $148 = $144 << $147;
      $149 = $bit_buffer;
      $150 = $149 | $148;
      $bit_buffer = $150;
      $151 = $bits_left;
      $152 = $151&255;
      $153 = (($152) + 16)|0;
      $154 = $153&255;
      $bits_left = $154;
     }
     $155 = $bit_buffer;
     $156 = $155 >>> 16;
     $157 = $156&65535;
     $C = $157;
     $158 = $bit_buffer;
     $159 = $158 << 16;
     $bit_buffer = $159;
     $160 = $bits_left;
     $161 = $160&255;
     $162 = (($161) - 16)|0;
     $163 = $162&255;
     $bits_left = $163;
     $164 = $1;
     $165 = (($164) + 34|0);
     HEAP8[$165] = 1;
    }
    $166 = $window_posn;
    $167 = $2;
    $168 = $1;
    $169 = (($168) + 56|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $1;
    $172 = (($171) + 52|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $170;
    $175 = $173;
    $176 = (($174) - ($175))|0;
    $177 = (($167) - ($176))|0;
    $178 = (($166) + ($177))|0;
    $frame_end = $178;
    $179 = $window_posn;
    $180 = $frame_todo;
    $181 = (($179) + ($180))|0;
    $182 = $frame_end;
    $183 = ($181>>>0)<($182>>>0);
    if ($183) {
     $184 = $window_posn;
     $185 = $frame_todo;
     $186 = (($184) + ($185))|0;
     $frame_end = $186;
    }
    $187 = $frame_end;
    $188 = $1;
    $189 = (($188) + 16|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($187>>>0)>($190>>>0);
    if ($191) {
     $192 = $1;
     $193 = (($192) + 16|0);
     $194 = HEAP32[$193>>2]|0;
     $frame_end = $194;
    }
    while(1) {
     $195 = $window_posn;
     $196 = $frame_end;
     $197 = ($195>>>0)<($196>>>0);
     if (!($197)) {
      break;
     }
     $198 = $H;
     $199 = $198&65535;
     $200 = $L;
     $201 = $200&65535;
     $202 = (($199) - ($201))|0;
     $203 = $202 & 65535;
     $204 = (($203) + 1)|0;
     $range = $204;
     $205 = $C;
     $206 = $205&65535;
     $207 = $L;
     $208 = $207&65535;
     $209 = (($206) - ($208))|0;
     $210 = (($209) + 1)|0;
     $211 = $1;
     $212 = (($211) + 168|0);
     $213 = (($212) + 8|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (($214) + 2|0);
     $216 = HEAP16[$215>>1]|0;
     $217 = $216&65535;
     $218 = Math_imul($210, $217)|0;
     $219 = (($218) - 1)|0;
     $220 = $range;
     $221 = (($219>>>0) / ($220>>>0))&-1;
     $222 = $221 & 65535;
     $223 = $222&65535;
     $symf = $223;
     $i = 1;
     while(1) {
      $224 = $i;
      $225 = $1;
      $226 = (($225) + 168|0);
      $227 = (($226) + 4|0);
      $228 = HEAP32[$227>>2]|0;
      $229 = ($224|0)<($228|0);
      if (!($229)) {
       break;
      }
      $230 = $i;
      $231 = $1;
      $232 = (($231) + 168|0);
      $233 = (($232) + 8|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = (($234) + ($230<<2)|0);
      $236 = (($235) + 2|0);
      $237 = HEAP16[$236>>1]|0;
      $238 = $237&65535;
      $239 = $symf;
      $240 = $239&65535;
      $241 = ($238|0)<=($240|0);
      if ($241) {
       label = 51;
       break;
      }
      $242 = $i;
      $243 = (($242) + 1)|0;
      $i = $243;
     }
     if ((label|0) == 51) {
      label = 0;
     }
     $244 = $i;
     $245 = (($244) - 1)|0;
     $246 = $1;
     $247 = (($246) + 168|0);
     $248 = (($247) + 8|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = (($249) + ($245<<2)|0);
     $251 = HEAP16[$250>>1]|0;
     $252 = $251&65535;
     $selector = $252;
     $253 = $H;
     $254 = $253&65535;
     $255 = $L;
     $256 = $255&65535;
     $257 = (($254) - ($256))|0;
     $258 = (($257) + 1)|0;
     $range = $258;
     $259 = $1;
     $260 = (($259) + 168|0);
     $261 = (($260) + 8|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = (($262) + 2|0);
     $264 = HEAP16[$263>>1]|0;
     $symf = $264;
     $265 = $L;
     $266 = $265&65535;
     $267 = $i;
     $268 = (($267) - 1)|0;
     $269 = $1;
     $270 = (($269) + 168|0);
     $271 = (($270) + 8|0);
     $272 = HEAP32[$271>>2]|0;
     $273 = (($272) + ($268<<2)|0);
     $274 = (($273) + 2|0);
     $275 = HEAP16[$274>>1]|0;
     $276 = $275&65535;
     $277 = $range;
     $278 = Math_imul($276, $277)|0;
     $279 = $symf;
     $280 = $279&65535;
     $281 = (($278>>>0) / ($280>>>0))&-1;
     $282 = (($266) + ($281))|0;
     $283 = (($282) - 1)|0;
     $284 = $283&65535;
     $H = $284;
     $285 = $L;
     $286 = $285&65535;
     $287 = $i;
     $288 = $1;
     $289 = (($288) + 168|0);
     $290 = (($289) + 8|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = (($291) + ($287<<2)|0);
     $293 = (($292) + 2|0);
     $294 = HEAP16[$293>>1]|0;
     $295 = $294&65535;
     $296 = $range;
     $297 = Math_imul($295, $296)|0;
     $298 = $symf;
     $299 = $298&65535;
     $300 = (($297>>>0) / ($299>>>0))&-1;
     $301 = (($286) + ($300))|0;
     $302 = $301&65535;
     $L = $302;
     while(1) {
      $303 = $i;
      $304 = (($303) + -1)|0;
      $i = $304;
      $305 = $1;
      $306 = (($305) + 168|0);
      $307 = (($306) + 8|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = (($308) + ($304<<2)|0);
      $310 = (($309) + 2|0);
      $311 = HEAP16[$310>>1]|0;
      $312 = $311&65535;
      $313 = (($312) + 8)|0;
      $314 = $313&65535;
      HEAP16[$310>>1] = $314;
      $315 = $i;
      $316 = ($315|0)>(0);
      if (!($316)) {
       break;
      }
     }
     $317 = $1;
     $318 = (($317) + 168|0);
     $319 = (($318) + 8|0);
     $320 = HEAP32[$319>>2]|0;
     $321 = (($320) + 2|0);
     $322 = HEAP16[$321>>1]|0;
     $323 = $322&65535;
     $324 = ($323|0)>(3800);
     if ($324) {
      $325 = $1;
      $326 = (($325) + 168|0);
      _qtmd_update_model($326);
     }
     while(1) {
      $327 = $L;
      $328 = $327&65535;
      $329 = $328 & 32768;
      $330 = $H;
      $331 = $330&65535;
      $332 = $331 & 32768;
      $333 = ($329|0)!=($332|0);
      if ($333) {
       $334 = $L;
       $335 = $334&65535;
       $336 = $335 & 16384;
       $337 = ($336|0)!=(0);
       if (!($337)) {
        break;
       }
       $338 = $H;
       $339 = $338&65535;
       $340 = $339 & 16384;
       $341 = ($340|0)!=(0);
       if ($341) {
        break;
       }
       $342 = $C;
       $343 = $342&65535;
       $344 = $343 ^ 16384;
       $345 = $344&65535;
       $C = $345;
       $346 = $L;
       $347 = $346&65535;
       $348 = $347 & 16383;
       $349 = $348&65535;
       $L = $349;
       $350 = $H;
       $351 = $350&65535;
       $352 = $351 | 16384;
       $353 = $352&65535;
       $H = $353;
      }
      $354 = $L;
      $355 = $354&65535;
      $356 = $355 << 1;
      $357 = $356&65535;
      $L = $357;
      $358 = $H;
      $359 = $358&65535;
      $360 = $359 << 1;
      $361 = $360 | 1;
      $362 = $361&65535;
      $H = $362;
      while(1) {
       $363 = $bits_left;
       $364 = $363&255;
       $365 = ($364|0)<(1);
       if (!($365)) {
        break;
       }
       $366 = $i_ptr;
       $367 = $i_end;
       $368 = ($366>>>0)>=($367>>>0);
       if ($368) {
        $369 = $1;
        $370 = (_read_input103($369)|0);
        $371 = ($370|0)!=(0);
        if ($371) {
         label = 73;
         break L24;
        }
        $375 = $1;
        $376 = (($375) + 44|0);
        $377 = HEAP32[$376>>2]|0;
        $i_ptr = $377;
        $378 = $1;
        $379 = (($378) + 48|0);
        $380 = HEAP32[$379>>2]|0;
        $i_end = $380;
       }
       $381 = $i_ptr;
       $382 = (($381) + 1|0);
       $i_ptr = $382;
       $383 = HEAP8[$381]|0;
       $b01 = $383;
       $384 = $i_ptr;
       $385 = $i_end;
       $386 = ($384>>>0)>=($385>>>0);
       if ($386) {
        $387 = $1;
        $388 = (_read_input103($387)|0);
        $389 = ($388|0)!=(0);
        if ($389) {
         label = 79;
         break L24;
        }
        $393 = $1;
        $394 = (($393) + 44|0);
        $395 = HEAP32[$394>>2]|0;
        $i_ptr = $395;
        $396 = $1;
        $397 = (($396) + 48|0);
        $398 = HEAP32[$397>>2]|0;
        $i_end = $398;
       }
       $399 = $i_ptr;
       $400 = (($399) + 1|0);
       $i_ptr = $400;
       $401 = HEAP8[$399]|0;
       $b12 = $401;
       $402 = $b01;
       $403 = $402&255;
       $404 = $403 << 8;
       $405 = $b12;
       $406 = $405&255;
       $407 = $404 | $406;
       $408 = $bits_left;
       $409 = $408&255;
       $410 = (16 - ($409))|0;
       $411 = $407 << $410;
       $412 = $bit_buffer;
       $413 = $412 | $411;
       $bit_buffer = $413;
       $414 = $bits_left;
       $415 = $414&255;
       $416 = (($415) + 16)|0;
       $417 = $416&255;
       $bits_left = $417;
      }
      $418 = $C;
      $419 = $418&65535;
      $420 = $419 << 1;
      $421 = $bit_buffer;
      $422 = $421 >>> 31;
      $423 = $420 | $422;
      $424 = $423&65535;
      $C = $424;
      $425 = $bit_buffer;
      $426 = $425 << 1;
      $bit_buffer = $426;
      $427 = $bits_left;
      $428 = $427&255;
      $429 = (($428) - 1)|0;
      $430 = $429&255;
      $bits_left = $430;
     }
     $431 = $selector;
     $432 = ($431|0)<(4);
     if ($432) {
      $433 = $selector;
      $434 = ($433|0)==(0);
      if ($434) {
       $435 = $1;
       $436 = (($435) + 72|0);
       $447 = $436;
      } else {
       $437 = $selector;
       $438 = ($437|0)==(1);
       if ($438) {
        $439 = $1;
        $440 = (($439) + 84|0);
        $2385 = $440;
       } else {
        $441 = $selector;
        $442 = ($441|0)==(2);
        if ($442) {
         $443 = $1;
         $444 = (($443) + 96|0);
         $2386 = $444;
        } else {
         $445 = $1;
         $446 = (($445) + 108|0);
         $2386 = $446;
        }
        $2385 = $2386;
       }
       $447 = $2385;
      }
      $mdl = $447;
      $448 = $H;
      $449 = $448&65535;
      $450 = $L;
      $451 = $450&65535;
      $452 = (($449) - ($451))|0;
      $453 = $452 & 65535;
      $454 = (($453) + 1)|0;
      $range = $454;
      $455 = $C;
      $456 = $455&65535;
      $457 = $L;
      $458 = $457&65535;
      $459 = (($456) - ($458))|0;
      $460 = (($459) + 1)|0;
      $461 = $mdl;
      $462 = (($461) + 8|0);
      $463 = HEAP32[$462>>2]|0;
      $464 = (($463) + 2|0);
      $465 = HEAP16[$464>>1]|0;
      $466 = $465&65535;
      $467 = Math_imul($460, $466)|0;
      $468 = (($467) - 1)|0;
      $469 = $range;
      $470 = (($468>>>0) / ($469>>>0))&-1;
      $471 = $470 & 65535;
      $472 = $471&65535;
      $symf = $472;
      $i = 1;
      while(1) {
       $473 = $i;
       $474 = $mdl;
       $475 = (($474) + 4|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($473|0)<($476|0);
       if (!($477)) {
        break;
       }
       $478 = $i;
       $479 = $mdl;
       $480 = (($479) + 8|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (($481) + ($478<<2)|0);
       $483 = (($482) + 2|0);
       $484 = HEAP16[$483>>1]|0;
       $485 = $484&65535;
       $486 = $symf;
       $487 = $486&65535;
       $488 = ($485|0)<=($487|0);
       if ($488) {
        label = 101;
        break;
       }
       $489 = $i;
       $490 = (($489) + 1)|0;
       $i = $490;
      }
      if ((label|0) == 101) {
       label = 0;
      }
      $491 = $i;
      $492 = (($491) - 1)|0;
      $493 = $mdl;
      $494 = (($493) + 8|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = (($495) + ($492<<2)|0);
      $497 = HEAP16[$496>>1]|0;
      $498 = $497&65535;
      $sym = $498;
      $499 = $H;
      $500 = $499&65535;
      $501 = $L;
      $502 = $501&65535;
      $503 = (($500) - ($502))|0;
      $504 = (($503) + 1)|0;
      $range = $504;
      $505 = $mdl;
      $506 = (($505) + 8|0);
      $507 = HEAP32[$506>>2]|0;
      $508 = (($507) + 2|0);
      $509 = HEAP16[$508>>1]|0;
      $symf = $509;
      $510 = $L;
      $511 = $510&65535;
      $512 = $i;
      $513 = (($512) - 1)|0;
      $514 = $mdl;
      $515 = (($514) + 8|0);
      $516 = HEAP32[$515>>2]|0;
      $517 = (($516) + ($513<<2)|0);
      $518 = (($517) + 2|0);
      $519 = HEAP16[$518>>1]|0;
      $520 = $519&65535;
      $521 = $range;
      $522 = Math_imul($520, $521)|0;
      $523 = $symf;
      $524 = $523&65535;
      $525 = (($522>>>0) / ($524>>>0))&-1;
      $526 = (($511) + ($525))|0;
      $527 = (($526) - 1)|0;
      $528 = $527&65535;
      $H = $528;
      $529 = $L;
      $530 = $529&65535;
      $531 = $i;
      $532 = $mdl;
      $533 = (($532) + 8|0);
      $534 = HEAP32[$533>>2]|0;
      $535 = (($534) + ($531<<2)|0);
      $536 = (($535) + 2|0);
      $537 = HEAP16[$536>>1]|0;
      $538 = $537&65535;
      $539 = $range;
      $540 = Math_imul($538, $539)|0;
      $541 = $symf;
      $542 = $541&65535;
      $543 = (($540>>>0) / ($542>>>0))&-1;
      $544 = (($530) + ($543))|0;
      $545 = $544&65535;
      $L = $545;
      while(1) {
       $546 = $i;
       $547 = (($546) + -1)|0;
       $i = $547;
       $548 = $mdl;
       $549 = (($548) + 8|0);
       $550 = HEAP32[$549>>2]|0;
       $551 = (($550) + ($547<<2)|0);
       $552 = (($551) + 2|0);
       $553 = HEAP16[$552>>1]|0;
       $554 = $553&65535;
       $555 = (($554) + 8)|0;
       $556 = $555&65535;
       HEAP16[$552>>1] = $556;
       $557 = $i;
       $558 = ($557|0)>(0);
       if (!($558)) {
        break;
       }
      }
      $559 = $mdl;
      $560 = (($559) + 8|0);
      $561 = HEAP32[$560>>2]|0;
      $562 = (($561) + 2|0);
      $563 = HEAP16[$562>>1]|0;
      $564 = $563&65535;
      $565 = ($564|0)>(3800);
      if ($565) {
       $566 = $mdl;
       _qtmd_update_model($566);
      }
      while(1) {
       $567 = $L;
       $568 = $567&65535;
       $569 = $568 & 32768;
       $570 = $H;
       $571 = $570&65535;
       $572 = $571 & 32768;
       $573 = ($569|0)!=($572|0);
       if ($573) {
        $574 = $L;
        $575 = $574&65535;
        $576 = $575 & 16384;
        $577 = ($576|0)!=(0);
        if (!($577)) {
         break;
        }
        $578 = $H;
        $579 = $578&65535;
        $580 = $579 & 16384;
        $581 = ($580|0)!=(0);
        if ($581) {
         break;
        }
        $582 = $C;
        $583 = $582&65535;
        $584 = $583 ^ 16384;
        $585 = $584&65535;
        $C = $585;
        $586 = $L;
        $587 = $586&65535;
        $588 = $587 & 16383;
        $589 = $588&65535;
        $L = $589;
        $590 = $H;
        $591 = $590&65535;
        $592 = $591 | 16384;
        $593 = $592&65535;
        $H = $593;
       }
       $594 = $L;
       $595 = $594&65535;
       $596 = $595 << 1;
       $597 = $596&65535;
       $L = $597;
       $598 = $H;
       $599 = $598&65535;
       $600 = $599 << 1;
       $601 = $600 | 1;
       $602 = $601&65535;
       $H = $602;
       while(1) {
        $603 = $bits_left;
        $604 = $603&255;
        $605 = ($604|0)<(1);
        if (!($605)) {
         break;
        }
        $606 = $i_ptr;
        $607 = $i_end;
        $608 = ($606>>>0)>=($607>>>0);
        if ($608) {
         $609 = $1;
         $610 = (_read_input103($609)|0);
         $611 = ($610|0)!=(0);
         if ($611) {
          label = 123;
          break L24;
         }
         $615 = $1;
         $616 = (($615) + 44|0);
         $617 = HEAP32[$616>>2]|0;
         $i_ptr = $617;
         $618 = $1;
         $619 = (($618) + 48|0);
         $620 = HEAP32[$619>>2]|0;
         $i_end = $620;
        }
        $621 = $i_ptr;
        $622 = (($621) + 1|0);
        $i_ptr = $622;
        $623 = HEAP8[$621]|0;
        $b03 = $623;
        $624 = $i_ptr;
        $625 = $i_end;
        $626 = ($624>>>0)>=($625>>>0);
        if ($626) {
         $627 = $1;
         $628 = (_read_input103($627)|0);
         $629 = ($628|0)!=(0);
         if ($629) {
          label = 129;
          break L24;
         }
         $633 = $1;
         $634 = (($633) + 44|0);
         $635 = HEAP32[$634>>2]|0;
         $i_ptr = $635;
         $636 = $1;
         $637 = (($636) + 48|0);
         $638 = HEAP32[$637>>2]|0;
         $i_end = $638;
        }
        $639 = $i_ptr;
        $640 = (($639) + 1|0);
        $i_ptr = $640;
        $641 = HEAP8[$639]|0;
        $b14 = $641;
        $642 = $b03;
        $643 = $642&255;
        $644 = $643 << 8;
        $645 = $b14;
        $646 = $645&255;
        $647 = $644 | $646;
        $648 = $bits_left;
        $649 = $648&255;
        $650 = (16 - ($649))|0;
        $651 = $647 << $650;
        $652 = $bit_buffer;
        $653 = $652 | $651;
        $bit_buffer = $653;
        $654 = $bits_left;
        $655 = $654&255;
        $656 = (($655) + 16)|0;
        $657 = $656&255;
        $bits_left = $657;
       }
       $658 = $C;
       $659 = $658&65535;
       $660 = $659 << 1;
       $661 = $bit_buffer;
       $662 = $661 >>> 31;
       $663 = $660 | $662;
       $664 = $663&65535;
       $C = $664;
       $665 = $bit_buffer;
       $666 = $665 << 1;
       $bit_buffer = $666;
       $667 = $bits_left;
       $668 = $667&255;
       $669 = (($668) - 1)|0;
       $670 = $669&255;
       $bits_left = $670;
      }
      $671 = $sym;
      $672 = $671&255;
      $673 = $window_posn;
      $674 = (($673) + 1)|0;
      $window_posn = $674;
      $675 = $window;
      $676 = (($675) + ($673)|0);
      HEAP8[$676] = $672;
      $677 = $frame_todo;
      $678 = (($677) + -1)|0;
      $frame_todo = $678;
     } else {
      $679 = $selector;
      if ((($679|0) == 4)) {
       $680 = $H;
       $681 = $680&65535;
       $682 = $L;
       $683 = $682&65535;
       $684 = (($681) - ($683))|0;
       $685 = $684 & 65535;
       $686 = (($685) + 1)|0;
       $range = $686;
       $687 = $C;
       $688 = $687&65535;
       $689 = $L;
       $690 = $689&65535;
       $691 = (($688) - ($690))|0;
       $692 = (($691) + 1)|0;
       $693 = $1;
       $694 = (($693) + 120|0);
       $695 = (($694) + 8|0);
       $696 = HEAP32[$695>>2]|0;
       $697 = (($696) + 2|0);
       $698 = HEAP16[$697>>1]|0;
       $699 = $698&65535;
       $700 = Math_imul($692, $699)|0;
       $701 = (($700) - 1)|0;
       $702 = $range;
       $703 = (($701>>>0) / ($702>>>0))&-1;
       $704 = $703 & 65535;
       $705 = $704&65535;
       $symf = $705;
       $i = 1;
       while(1) {
        $706 = $i;
        $707 = $1;
        $708 = (($707) + 120|0);
        $709 = (($708) + 4|0);
        $710 = HEAP32[$709>>2]|0;
        $711 = ($706|0)<($710|0);
        if (!($711)) {
         break;
        }
        $712 = $i;
        $713 = $1;
        $714 = (($713) + 120|0);
        $715 = (($714) + 8|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = (($716) + ($712<<2)|0);
        $718 = (($717) + 2|0);
        $719 = HEAP16[$718>>1]|0;
        $720 = $719&65535;
        $721 = $symf;
        $722 = $721&65535;
        $723 = ($720|0)<=($722|0);
        if ($723) {
         label = 143;
         break;
        }
        $724 = $i;
        $725 = (($724) + 1)|0;
        $i = $725;
       }
       if ((label|0) == 143) {
        label = 0;
       }
       $726 = $i;
       $727 = (($726) - 1)|0;
       $728 = $1;
       $729 = (($728) + 120|0);
       $730 = (($729) + 8|0);
       $731 = HEAP32[$730>>2]|0;
       $732 = (($731) + ($727<<2)|0);
       $733 = HEAP16[$732>>1]|0;
       $734 = $733&65535;
       $sym = $734;
       $735 = $H;
       $736 = $735&65535;
       $737 = $L;
       $738 = $737&65535;
       $739 = (($736) - ($738))|0;
       $740 = (($739) + 1)|0;
       $range = $740;
       $741 = $1;
       $742 = (($741) + 120|0);
       $743 = (($742) + 8|0);
       $744 = HEAP32[$743>>2]|0;
       $745 = (($744) + 2|0);
       $746 = HEAP16[$745>>1]|0;
       $symf = $746;
       $747 = $L;
       $748 = $747&65535;
       $749 = $i;
       $750 = (($749) - 1)|0;
       $751 = $1;
       $752 = (($751) + 120|0);
       $753 = (($752) + 8|0);
       $754 = HEAP32[$753>>2]|0;
       $755 = (($754) + ($750<<2)|0);
       $756 = (($755) + 2|0);
       $757 = HEAP16[$756>>1]|0;
       $758 = $757&65535;
       $759 = $range;
       $760 = Math_imul($758, $759)|0;
       $761 = $symf;
       $762 = $761&65535;
       $763 = (($760>>>0) / ($762>>>0))&-1;
       $764 = (($748) + ($763))|0;
       $765 = (($764) - 1)|0;
       $766 = $765&65535;
       $H = $766;
       $767 = $L;
       $768 = $767&65535;
       $769 = $i;
       $770 = $1;
       $771 = (($770) + 120|0);
       $772 = (($771) + 8|0);
       $773 = HEAP32[$772>>2]|0;
       $774 = (($773) + ($769<<2)|0);
       $775 = (($774) + 2|0);
       $776 = HEAP16[$775>>1]|0;
       $777 = $776&65535;
       $778 = $range;
       $779 = Math_imul($777, $778)|0;
       $780 = $symf;
       $781 = $780&65535;
       $782 = (($779>>>0) / ($781>>>0))&-1;
       $783 = (($768) + ($782))|0;
       $784 = $783&65535;
       $L = $784;
       while(1) {
        $785 = $i;
        $786 = (($785) + -1)|0;
        $i = $786;
        $787 = $1;
        $788 = (($787) + 120|0);
        $789 = (($788) + 8|0);
        $790 = HEAP32[$789>>2]|0;
        $791 = (($790) + ($786<<2)|0);
        $792 = (($791) + 2|0);
        $793 = HEAP16[$792>>1]|0;
        $794 = $793&65535;
        $795 = (($794) + 8)|0;
        $796 = $795&65535;
        HEAP16[$792>>1] = $796;
        $797 = $i;
        $798 = ($797|0)>(0);
        if (!($798)) {
         break;
        }
       }
       $799 = $1;
       $800 = (($799) + 120|0);
       $801 = (($800) + 8|0);
       $802 = HEAP32[$801>>2]|0;
       $803 = (($802) + 2|0);
       $804 = HEAP16[$803>>1]|0;
       $805 = $804&65535;
       $806 = ($805|0)>(3800);
       if ($806) {
        $807 = $1;
        $808 = (($807) + 120|0);
        _qtmd_update_model($808);
       }
       while(1) {
        $809 = $L;
        $810 = $809&65535;
        $811 = $810 & 32768;
        $812 = $H;
        $813 = $812&65535;
        $814 = $813 & 32768;
        $815 = ($811|0)!=($814|0);
        if ($815) {
         $816 = $L;
         $817 = $816&65535;
         $818 = $817 & 16384;
         $819 = ($818|0)!=(0);
         if (!($819)) {
          break;
         }
         $820 = $H;
         $821 = $820&65535;
         $822 = $821 & 16384;
         $823 = ($822|0)!=(0);
         if ($823) {
          break;
         }
         $824 = $C;
         $825 = $824&65535;
         $826 = $825 ^ 16384;
         $827 = $826&65535;
         $C = $827;
         $828 = $L;
         $829 = $828&65535;
         $830 = $829 & 16383;
         $831 = $830&65535;
         $L = $831;
         $832 = $H;
         $833 = $832&65535;
         $834 = $833 | 16384;
         $835 = $834&65535;
         $H = $835;
        }
        $836 = $L;
        $837 = $836&65535;
        $838 = $837 << 1;
        $839 = $838&65535;
        $L = $839;
        $840 = $H;
        $841 = $840&65535;
        $842 = $841 << 1;
        $843 = $842 | 1;
        $844 = $843&65535;
        $H = $844;
        while(1) {
         $845 = $bits_left;
         $846 = $845&255;
         $847 = ($846|0)<(1);
         if (!($847)) {
          break;
         }
         $848 = $i_ptr;
         $849 = $i_end;
         $850 = ($848>>>0)>=($849>>>0);
         if ($850) {
          $851 = $1;
          $852 = (_read_input103($851)|0);
          $853 = ($852|0)!=(0);
          if ($853) {
           label = 165;
           break L24;
          }
          $857 = $1;
          $858 = (($857) + 44|0);
          $859 = HEAP32[$858>>2]|0;
          $i_ptr = $859;
          $860 = $1;
          $861 = (($860) + 48|0);
          $862 = HEAP32[$861>>2]|0;
          $i_end = $862;
         }
         $863 = $i_ptr;
         $864 = (($863) + 1|0);
         $i_ptr = $864;
         $865 = HEAP8[$863]|0;
         $b05 = $865;
         $866 = $i_ptr;
         $867 = $i_end;
         $868 = ($866>>>0)>=($867>>>0);
         if ($868) {
          $869 = $1;
          $870 = (_read_input103($869)|0);
          $871 = ($870|0)!=(0);
          if ($871) {
           label = 171;
           break L24;
          }
          $875 = $1;
          $876 = (($875) + 44|0);
          $877 = HEAP32[$876>>2]|0;
          $i_ptr = $877;
          $878 = $1;
          $879 = (($878) + 48|0);
          $880 = HEAP32[$879>>2]|0;
          $i_end = $880;
         }
         $881 = $i_ptr;
         $882 = (($881) + 1|0);
         $i_ptr = $882;
         $883 = HEAP8[$881]|0;
         $b16 = $883;
         $884 = $b05;
         $885 = $884&255;
         $886 = $885 << 8;
         $887 = $b16;
         $888 = $887&255;
         $889 = $886 | $888;
         $890 = $bits_left;
         $891 = $890&255;
         $892 = (16 - ($891))|0;
         $893 = $889 << $892;
         $894 = $bit_buffer;
         $895 = $894 | $893;
         $bit_buffer = $895;
         $896 = $bits_left;
         $897 = $896&255;
         $898 = (($897) + 16)|0;
         $899 = $898&255;
         $bits_left = $899;
        }
        $900 = $C;
        $901 = $900&65535;
        $902 = $901 << 1;
        $903 = $bit_buffer;
        $904 = $903 >>> 31;
        $905 = $902 | $904;
        $906 = $905&65535;
        $C = $906;
        $907 = $bit_buffer;
        $908 = $907 << 1;
        $bit_buffer = $908;
        $909 = $bits_left;
        $910 = $909&255;
        $911 = (($910) - 1)|0;
        $912 = $911&255;
        $bits_left = $912;
       }
       $913 = $sym;
       $914 = (4280 + ($913)|0);
       $915 = HEAP8[$914]|0;
       $needed = $915;
       $extra = 0;
       while(1) {
        $916 = $needed;
        $917 = $916&255;
        $918 = ($917|0)>(0);
        if (!($918)) {
         break;
        }
        $919 = $bits_left;
        $920 = $919&255;
        $921 = ($920>>>0)<=(16);
        if ($921) {
         $922 = $i_ptr;
         $923 = $i_end;
         $924 = ($922>>>0)>=($923>>>0);
         if ($924) {
          $925 = $1;
          $926 = (_read_input103($925)|0);
          $927 = ($926|0)!=(0);
          if ($927) {
           label = 187;
           break L24;
          }
          $931 = $1;
          $932 = (($931) + 44|0);
          $933 = HEAP32[$932>>2]|0;
          $i_ptr = $933;
          $934 = $1;
          $935 = (($934) + 48|0);
          $936 = HEAP32[$935>>2]|0;
          $i_end = $936;
         }
         $937 = $i_ptr;
         $938 = (($937) + 1|0);
         $i_ptr = $938;
         $939 = HEAP8[$937]|0;
         $b07 = $939;
         $940 = $i_ptr;
         $941 = $i_end;
         $942 = ($940>>>0)>=($941>>>0);
         if ($942) {
          $943 = $1;
          $944 = (_read_input103($943)|0);
          $945 = ($944|0)!=(0);
          if ($945) {
           label = 193;
           break L24;
          }
          $949 = $1;
          $950 = (($949) + 44|0);
          $951 = HEAP32[$950>>2]|0;
          $i_ptr = $951;
          $952 = $1;
          $953 = (($952) + 48|0);
          $954 = HEAP32[$953>>2]|0;
          $i_end = $954;
         }
         $955 = $i_ptr;
         $956 = (($955) + 1|0);
         $i_ptr = $956;
         $957 = HEAP8[$955]|0;
         $b18 = $957;
         $958 = $b07;
         $959 = $958&255;
         $960 = $959 << 8;
         $961 = $b18;
         $962 = $961&255;
         $963 = $960 | $962;
         $964 = $bits_left;
         $965 = $964&255;
         $966 = (16 - ($965))|0;
         $967 = $963 << $966;
         $968 = $bit_buffer;
         $969 = $968 | $967;
         $bit_buffer = $969;
         $970 = $bits_left;
         $971 = $970&255;
         $972 = (($971) + 16)|0;
         $973 = $972&255;
         $bits_left = $973;
        }
        $974 = $bits_left;
        $975 = $974&255;
        $976 = $needed;
        $977 = $976&255;
        $978 = ($975|0)<($977|0);
        if ($978) {
         $979 = $bits_left;
         $980 = $979&255;
         $984 = $980;
        } else {
         $981 = $needed;
         $982 = $981&255;
         $984 = $982;
        }
        $983 = $984&255;
        $bitrun = $983;
        $985 = $extra;
        $986 = $bitrun;
        $987 = $986&255;
        $988 = $985 << $987;
        $989 = $bit_buffer;
        $990 = $bitrun;
        $991 = $990&255;
        $992 = (32 - ($991))|0;
        $993 = $989 >>> $992;
        $994 = $988 | $993;
        $extra = $994;
        $995 = $bitrun;
        $996 = $995&255;
        $997 = $bit_buffer;
        $998 = $997 << $996;
        $bit_buffer = $998;
        $999 = $bitrun;
        $1000 = $999&255;
        $1001 = $bits_left;
        $1002 = $1001&255;
        $1003 = (($1002) - ($1000))|0;
        $1004 = $1003&255;
        $bits_left = $1004;
        $1005 = $bitrun;
        $1006 = $1005&255;
        $1007 = $needed;
        $1008 = $1007&255;
        $1009 = (($1008) - ($1006))|0;
        $1010 = $1009&255;
        $needed = $1010;
       }
       $1011 = $sym;
       $1012 = (4328 + ($1011<<2)|0);
       $1013 = HEAP32[$1012>>2]|0;
       $1014 = $extra;
       $1015 = (($1013) + ($1014))|0;
       $1016 = (($1015) + 1)|0;
       $match_offset = $1016;
       $match_length = 3;
      } else if ((($679|0) == 5)) {
       $1017 = $H;
       $1018 = $1017&65535;
       $1019 = $L;
       $1020 = $1019&65535;
       $1021 = (($1018) - ($1020))|0;
       $1022 = $1021 & 65535;
       $1023 = (($1022) + 1)|0;
       $range = $1023;
       $1024 = $C;
       $1025 = $1024&65535;
       $1026 = $L;
       $1027 = $1026&65535;
       $1028 = (($1025) - ($1027))|0;
       $1029 = (($1028) + 1)|0;
       $1030 = $1;
       $1031 = (($1030) + 132|0);
       $1032 = (($1031) + 8|0);
       $1033 = HEAP32[$1032>>2]|0;
       $1034 = (($1033) + 2|0);
       $1035 = HEAP16[$1034>>1]|0;
       $1036 = $1035&65535;
       $1037 = Math_imul($1029, $1036)|0;
       $1038 = (($1037) - 1)|0;
       $1039 = $range;
       $1040 = (($1038>>>0) / ($1039>>>0))&-1;
       $1041 = $1040 & 65535;
       $1042 = $1041&65535;
       $symf = $1042;
       $i = 1;
       while(1) {
        $1043 = $i;
        $1044 = $1;
        $1045 = (($1044) + 132|0);
        $1046 = (($1045) + 4|0);
        $1047 = HEAP32[$1046>>2]|0;
        $1048 = ($1043|0)<($1047|0);
        if (!($1048)) {
         break;
        }
        $1049 = $i;
        $1050 = $1;
        $1051 = (($1050) + 132|0);
        $1052 = (($1051) + 8|0);
        $1053 = HEAP32[$1052>>2]|0;
        $1054 = (($1053) + ($1049<<2)|0);
        $1055 = (($1054) + 2|0);
        $1056 = HEAP16[$1055>>1]|0;
        $1057 = $1056&65535;
        $1058 = $symf;
        $1059 = $1058&65535;
        $1060 = ($1057|0)<=($1059|0);
        if ($1060) {
         label = 208;
         break;
        }
        $1061 = $i;
        $1062 = (($1061) + 1)|0;
        $i = $1062;
       }
       if ((label|0) == 208) {
        label = 0;
       }
       $1063 = $i;
       $1064 = (($1063) - 1)|0;
       $1065 = $1;
       $1066 = (($1065) + 132|0);
       $1067 = (($1066) + 8|0);
       $1068 = HEAP32[$1067>>2]|0;
       $1069 = (($1068) + ($1064<<2)|0);
       $1070 = HEAP16[$1069>>1]|0;
       $1071 = $1070&65535;
       $sym = $1071;
       $1072 = $H;
       $1073 = $1072&65535;
       $1074 = $L;
       $1075 = $1074&65535;
       $1076 = (($1073) - ($1075))|0;
       $1077 = (($1076) + 1)|0;
       $range = $1077;
       $1078 = $1;
       $1079 = (($1078) + 132|0);
       $1080 = (($1079) + 8|0);
       $1081 = HEAP32[$1080>>2]|0;
       $1082 = (($1081) + 2|0);
       $1083 = HEAP16[$1082>>1]|0;
       $symf = $1083;
       $1084 = $L;
       $1085 = $1084&65535;
       $1086 = $i;
       $1087 = (($1086) - 1)|0;
       $1088 = $1;
       $1089 = (($1088) + 132|0);
       $1090 = (($1089) + 8|0);
       $1091 = HEAP32[$1090>>2]|0;
       $1092 = (($1091) + ($1087<<2)|0);
       $1093 = (($1092) + 2|0);
       $1094 = HEAP16[$1093>>1]|0;
       $1095 = $1094&65535;
       $1096 = $range;
       $1097 = Math_imul($1095, $1096)|0;
       $1098 = $symf;
       $1099 = $1098&65535;
       $1100 = (($1097>>>0) / ($1099>>>0))&-1;
       $1101 = (($1085) + ($1100))|0;
       $1102 = (($1101) - 1)|0;
       $1103 = $1102&65535;
       $H = $1103;
       $1104 = $L;
       $1105 = $1104&65535;
       $1106 = $i;
       $1107 = $1;
       $1108 = (($1107) + 132|0);
       $1109 = (($1108) + 8|0);
       $1110 = HEAP32[$1109>>2]|0;
       $1111 = (($1110) + ($1106<<2)|0);
       $1112 = (($1111) + 2|0);
       $1113 = HEAP16[$1112>>1]|0;
       $1114 = $1113&65535;
       $1115 = $range;
       $1116 = Math_imul($1114, $1115)|0;
       $1117 = $symf;
       $1118 = $1117&65535;
       $1119 = (($1116>>>0) / ($1118>>>0))&-1;
       $1120 = (($1105) + ($1119))|0;
       $1121 = $1120&65535;
       $L = $1121;
       while(1) {
        $1122 = $i;
        $1123 = (($1122) + -1)|0;
        $i = $1123;
        $1124 = $1;
        $1125 = (($1124) + 132|0);
        $1126 = (($1125) + 8|0);
        $1127 = HEAP32[$1126>>2]|0;
        $1128 = (($1127) + ($1123<<2)|0);
        $1129 = (($1128) + 2|0);
        $1130 = HEAP16[$1129>>1]|0;
        $1131 = $1130&65535;
        $1132 = (($1131) + 8)|0;
        $1133 = $1132&65535;
        HEAP16[$1129>>1] = $1133;
        $1134 = $i;
        $1135 = ($1134|0)>(0);
        if (!($1135)) {
         break;
        }
       }
       $1136 = $1;
       $1137 = (($1136) + 132|0);
       $1138 = (($1137) + 8|0);
       $1139 = HEAP32[$1138>>2]|0;
       $1140 = (($1139) + 2|0);
       $1141 = HEAP16[$1140>>1]|0;
       $1142 = $1141&65535;
       $1143 = ($1142|0)>(3800);
       if ($1143) {
        $1144 = $1;
        $1145 = (($1144) + 132|0);
        _qtmd_update_model($1145);
       }
       while(1) {
        $1146 = $L;
        $1147 = $1146&65535;
        $1148 = $1147 & 32768;
        $1149 = $H;
        $1150 = $1149&65535;
        $1151 = $1150 & 32768;
        $1152 = ($1148|0)!=($1151|0);
        if ($1152) {
         $1153 = $L;
         $1154 = $1153&65535;
         $1155 = $1154 & 16384;
         $1156 = ($1155|0)!=(0);
         if (!($1156)) {
          break;
         }
         $1157 = $H;
         $1158 = $1157&65535;
         $1159 = $1158 & 16384;
         $1160 = ($1159|0)!=(0);
         if ($1160) {
          break;
         }
         $1161 = $C;
         $1162 = $1161&65535;
         $1163 = $1162 ^ 16384;
         $1164 = $1163&65535;
         $C = $1164;
         $1165 = $L;
         $1166 = $1165&65535;
         $1167 = $1166 & 16383;
         $1168 = $1167&65535;
         $L = $1168;
         $1169 = $H;
         $1170 = $1169&65535;
         $1171 = $1170 | 16384;
         $1172 = $1171&65535;
         $H = $1172;
        }
        $1173 = $L;
        $1174 = $1173&65535;
        $1175 = $1174 << 1;
        $1176 = $1175&65535;
        $L = $1176;
        $1177 = $H;
        $1178 = $1177&65535;
        $1179 = $1178 << 1;
        $1180 = $1179 | 1;
        $1181 = $1180&65535;
        $H = $1181;
        while(1) {
         $1182 = $bits_left;
         $1183 = $1182&255;
         $1184 = ($1183|0)<(1);
         if (!($1184)) {
          break;
         }
         $1185 = $i_ptr;
         $1186 = $i_end;
         $1187 = ($1185>>>0)>=($1186>>>0);
         if ($1187) {
          $1188 = $1;
          $1189 = (_read_input103($1188)|0);
          $1190 = ($1189|0)!=(0);
          if ($1190) {
           label = 230;
           break L24;
          }
          $1194 = $1;
          $1195 = (($1194) + 44|0);
          $1196 = HEAP32[$1195>>2]|0;
          $i_ptr = $1196;
          $1197 = $1;
          $1198 = (($1197) + 48|0);
          $1199 = HEAP32[$1198>>2]|0;
          $i_end = $1199;
         }
         $1200 = $i_ptr;
         $1201 = (($1200) + 1|0);
         $i_ptr = $1201;
         $1202 = HEAP8[$1200]|0;
         $b09 = $1202;
         $1203 = $i_ptr;
         $1204 = $i_end;
         $1205 = ($1203>>>0)>=($1204>>>0);
         if ($1205) {
          $1206 = $1;
          $1207 = (_read_input103($1206)|0);
          $1208 = ($1207|0)!=(0);
          if ($1208) {
           label = 236;
           break L24;
          }
          $1212 = $1;
          $1213 = (($1212) + 44|0);
          $1214 = HEAP32[$1213>>2]|0;
          $i_ptr = $1214;
          $1215 = $1;
          $1216 = (($1215) + 48|0);
          $1217 = HEAP32[$1216>>2]|0;
          $i_end = $1217;
         }
         $1218 = $i_ptr;
         $1219 = (($1218) + 1|0);
         $i_ptr = $1219;
         $1220 = HEAP8[$1218]|0;
         $b110 = $1220;
         $1221 = $b09;
         $1222 = $1221&255;
         $1223 = $1222 << 8;
         $1224 = $b110;
         $1225 = $1224&255;
         $1226 = $1223 | $1225;
         $1227 = $bits_left;
         $1228 = $1227&255;
         $1229 = (16 - ($1228))|0;
         $1230 = $1226 << $1229;
         $1231 = $bit_buffer;
         $1232 = $1231 | $1230;
         $bit_buffer = $1232;
         $1233 = $bits_left;
         $1234 = $1233&255;
         $1235 = (($1234) + 16)|0;
         $1236 = $1235&255;
         $bits_left = $1236;
        }
        $1237 = $C;
        $1238 = $1237&65535;
        $1239 = $1238 << 1;
        $1240 = $bit_buffer;
        $1241 = $1240 >>> 31;
        $1242 = $1239 | $1241;
        $1243 = $1242&65535;
        $C = $1243;
        $1244 = $bit_buffer;
        $1245 = $1244 << 1;
        $bit_buffer = $1245;
        $1246 = $bits_left;
        $1247 = $1246&255;
        $1248 = (($1247) - 1)|0;
        $1249 = $1248&255;
        $bits_left = $1249;
       }
       $1250 = $sym;
       $1251 = (4280 + ($1250)|0);
       $1252 = HEAP8[$1251]|0;
       $needed11 = $1252;
       $extra = 0;
       while(1) {
        $1253 = $needed11;
        $1254 = $1253&255;
        $1255 = ($1254|0)>(0);
        if (!($1255)) {
         break;
        }
        $1256 = $bits_left;
        $1257 = $1256&255;
        $1258 = ($1257>>>0)<=(16);
        if ($1258) {
         $1259 = $i_ptr;
         $1260 = $i_end;
         $1261 = ($1259>>>0)>=($1260>>>0);
         if ($1261) {
          $1262 = $1;
          $1263 = (_read_input103($1262)|0);
          $1264 = ($1263|0)!=(0);
          if ($1264) {
           label = 252;
           break L24;
          }
          $1268 = $1;
          $1269 = (($1268) + 44|0);
          $1270 = HEAP32[$1269>>2]|0;
          $i_ptr = $1270;
          $1271 = $1;
          $1272 = (($1271) + 48|0);
          $1273 = HEAP32[$1272>>2]|0;
          $i_end = $1273;
         }
         $1274 = $i_ptr;
         $1275 = (($1274) + 1|0);
         $i_ptr = $1275;
         $1276 = HEAP8[$1274]|0;
         $b013 = $1276;
         $1277 = $i_ptr;
         $1278 = $i_end;
         $1279 = ($1277>>>0)>=($1278>>>0);
         if ($1279) {
          $1280 = $1;
          $1281 = (_read_input103($1280)|0);
          $1282 = ($1281|0)!=(0);
          if ($1282) {
           label = 258;
           break L24;
          }
          $1286 = $1;
          $1287 = (($1286) + 44|0);
          $1288 = HEAP32[$1287>>2]|0;
          $i_ptr = $1288;
          $1289 = $1;
          $1290 = (($1289) + 48|0);
          $1291 = HEAP32[$1290>>2]|0;
          $i_end = $1291;
         }
         $1292 = $i_ptr;
         $1293 = (($1292) + 1|0);
         $i_ptr = $1293;
         $1294 = HEAP8[$1292]|0;
         $b114 = $1294;
         $1295 = $b013;
         $1296 = $1295&255;
         $1297 = $1296 << 8;
         $1298 = $b114;
         $1299 = $1298&255;
         $1300 = $1297 | $1299;
         $1301 = $bits_left;
         $1302 = $1301&255;
         $1303 = (16 - ($1302))|0;
         $1304 = $1300 << $1303;
         $1305 = $bit_buffer;
         $1306 = $1305 | $1304;
         $bit_buffer = $1306;
         $1307 = $bits_left;
         $1308 = $1307&255;
         $1309 = (($1308) + 16)|0;
         $1310 = $1309&255;
         $bits_left = $1310;
        }
        $1311 = $bits_left;
        $1312 = $1311&255;
        $1313 = $needed11;
        $1314 = $1313&255;
        $1315 = ($1312|0)<($1314|0);
        if ($1315) {
         $1316 = $bits_left;
         $1317 = $1316&255;
         $1321 = $1317;
        } else {
         $1318 = $needed11;
         $1319 = $1318&255;
         $1321 = $1319;
        }
        $1320 = $1321&255;
        $bitrun12 = $1320;
        $1322 = $extra;
        $1323 = $bitrun12;
        $1324 = $1323&255;
        $1325 = $1322 << $1324;
        $1326 = $bit_buffer;
        $1327 = $bitrun12;
        $1328 = $1327&255;
        $1329 = (32 - ($1328))|0;
        $1330 = $1326 >>> $1329;
        $1331 = $1325 | $1330;
        $extra = $1331;
        $1332 = $bitrun12;
        $1333 = $1332&255;
        $1334 = $bit_buffer;
        $1335 = $1334 << $1333;
        $bit_buffer = $1335;
        $1336 = $bitrun12;
        $1337 = $1336&255;
        $1338 = $bits_left;
        $1339 = $1338&255;
        $1340 = (($1339) - ($1337))|0;
        $1341 = $1340&255;
        $bits_left = $1341;
        $1342 = $bitrun12;
        $1343 = $1342&255;
        $1344 = $needed11;
        $1345 = $1344&255;
        $1346 = (($1345) - ($1343))|0;
        $1347 = $1346&255;
        $needed11 = $1347;
       }
       $1348 = $sym;
       $1349 = (4328 + ($1348<<2)|0);
       $1350 = HEAP32[$1349>>2]|0;
       $1351 = $extra;
       $1352 = (($1350) + ($1351))|0;
       $1353 = (($1352) + 1)|0;
       $match_offset = $1353;
       $match_length = 4;
      } else if ((($679|0) == 6)) {
       $1354 = $H;
       $1355 = $1354&65535;
       $1356 = $L;
       $1357 = $1356&65535;
       $1358 = (($1355) - ($1357))|0;
       $1359 = $1358 & 65535;
       $1360 = (($1359) + 1)|0;
       $range = $1360;
       $1361 = $C;
       $1362 = $1361&65535;
       $1363 = $L;
       $1364 = $1363&65535;
       $1365 = (($1362) - ($1364))|0;
       $1366 = (($1365) + 1)|0;
       $1367 = $1;
       $1368 = (($1367) + 156|0);
       $1369 = (($1368) + 8|0);
       $1370 = HEAP32[$1369>>2]|0;
       $1371 = (($1370) + 2|0);
       $1372 = HEAP16[$1371>>1]|0;
       $1373 = $1372&65535;
       $1374 = Math_imul($1366, $1373)|0;
       $1375 = (($1374) - 1)|0;
       $1376 = $range;
       $1377 = (($1375>>>0) / ($1376>>>0))&-1;
       $1378 = $1377 & 65535;
       $1379 = $1378&65535;
       $symf = $1379;
       $i = 1;
       while(1) {
        $1380 = $i;
        $1381 = $1;
        $1382 = (($1381) + 156|0);
        $1383 = (($1382) + 4|0);
        $1384 = HEAP32[$1383>>2]|0;
        $1385 = ($1380|0)<($1384|0);
        if (!($1385)) {
         break;
        }
        $1386 = $i;
        $1387 = $1;
        $1388 = (($1387) + 156|0);
        $1389 = (($1388) + 8|0);
        $1390 = HEAP32[$1389>>2]|0;
        $1391 = (($1390) + ($1386<<2)|0);
        $1392 = (($1391) + 2|0);
        $1393 = HEAP16[$1392>>1]|0;
        $1394 = $1393&65535;
        $1395 = $symf;
        $1396 = $1395&65535;
        $1397 = ($1394|0)<=($1396|0);
        if ($1397) {
         label = 273;
         break;
        }
        $1398 = $i;
        $1399 = (($1398) + 1)|0;
        $i = $1399;
       }
       if ((label|0) == 273) {
        label = 0;
       }
       $1400 = $i;
       $1401 = (($1400) - 1)|0;
       $1402 = $1;
       $1403 = (($1402) + 156|0);
       $1404 = (($1403) + 8|0);
       $1405 = HEAP32[$1404>>2]|0;
       $1406 = (($1405) + ($1401<<2)|0);
       $1407 = HEAP16[$1406>>1]|0;
       $1408 = $1407&65535;
       $sym = $1408;
       $1409 = $H;
       $1410 = $1409&65535;
       $1411 = $L;
       $1412 = $1411&65535;
       $1413 = (($1410) - ($1412))|0;
       $1414 = (($1413) + 1)|0;
       $range = $1414;
       $1415 = $1;
       $1416 = (($1415) + 156|0);
       $1417 = (($1416) + 8|0);
       $1418 = HEAP32[$1417>>2]|0;
       $1419 = (($1418) + 2|0);
       $1420 = HEAP16[$1419>>1]|0;
       $symf = $1420;
       $1421 = $L;
       $1422 = $1421&65535;
       $1423 = $i;
       $1424 = (($1423) - 1)|0;
       $1425 = $1;
       $1426 = (($1425) + 156|0);
       $1427 = (($1426) + 8|0);
       $1428 = HEAP32[$1427>>2]|0;
       $1429 = (($1428) + ($1424<<2)|0);
       $1430 = (($1429) + 2|0);
       $1431 = HEAP16[$1430>>1]|0;
       $1432 = $1431&65535;
       $1433 = $range;
       $1434 = Math_imul($1432, $1433)|0;
       $1435 = $symf;
       $1436 = $1435&65535;
       $1437 = (($1434>>>0) / ($1436>>>0))&-1;
       $1438 = (($1422) + ($1437))|0;
       $1439 = (($1438) - 1)|0;
       $1440 = $1439&65535;
       $H = $1440;
       $1441 = $L;
       $1442 = $1441&65535;
       $1443 = $i;
       $1444 = $1;
       $1445 = (($1444) + 156|0);
       $1446 = (($1445) + 8|0);
       $1447 = HEAP32[$1446>>2]|0;
       $1448 = (($1447) + ($1443<<2)|0);
       $1449 = (($1448) + 2|0);
       $1450 = HEAP16[$1449>>1]|0;
       $1451 = $1450&65535;
       $1452 = $range;
       $1453 = Math_imul($1451, $1452)|0;
       $1454 = $symf;
       $1455 = $1454&65535;
       $1456 = (($1453>>>0) / ($1455>>>0))&-1;
       $1457 = (($1442) + ($1456))|0;
       $1458 = $1457&65535;
       $L = $1458;
       while(1) {
        $1459 = $i;
        $1460 = (($1459) + -1)|0;
        $i = $1460;
        $1461 = $1;
        $1462 = (($1461) + 156|0);
        $1463 = (($1462) + 8|0);
        $1464 = HEAP32[$1463>>2]|0;
        $1465 = (($1464) + ($1460<<2)|0);
        $1466 = (($1465) + 2|0);
        $1467 = HEAP16[$1466>>1]|0;
        $1468 = $1467&65535;
        $1469 = (($1468) + 8)|0;
        $1470 = $1469&65535;
        HEAP16[$1466>>1] = $1470;
        $1471 = $i;
        $1472 = ($1471|0)>(0);
        if (!($1472)) {
         break;
        }
       }
       $1473 = $1;
       $1474 = (($1473) + 156|0);
       $1475 = (($1474) + 8|0);
       $1476 = HEAP32[$1475>>2]|0;
       $1477 = (($1476) + 2|0);
       $1478 = HEAP16[$1477>>1]|0;
       $1479 = $1478&65535;
       $1480 = ($1479|0)>(3800);
       if ($1480) {
        $1481 = $1;
        $1482 = (($1481) + 156|0);
        _qtmd_update_model($1482);
       }
       while(1) {
        $1483 = $L;
        $1484 = $1483&65535;
        $1485 = $1484 & 32768;
        $1486 = $H;
        $1487 = $1486&65535;
        $1488 = $1487 & 32768;
        $1489 = ($1485|0)!=($1488|0);
        if ($1489) {
         $1490 = $L;
         $1491 = $1490&65535;
         $1492 = $1491 & 16384;
         $1493 = ($1492|0)!=(0);
         if (!($1493)) {
          break;
         }
         $1494 = $H;
         $1495 = $1494&65535;
         $1496 = $1495 & 16384;
         $1497 = ($1496|0)!=(0);
         if ($1497) {
          break;
         }
         $1498 = $C;
         $1499 = $1498&65535;
         $1500 = $1499 ^ 16384;
         $1501 = $1500&65535;
         $C = $1501;
         $1502 = $L;
         $1503 = $1502&65535;
         $1504 = $1503 & 16383;
         $1505 = $1504&65535;
         $L = $1505;
         $1506 = $H;
         $1507 = $1506&65535;
         $1508 = $1507 | 16384;
         $1509 = $1508&65535;
         $H = $1509;
        }
        $1510 = $L;
        $1511 = $1510&65535;
        $1512 = $1511 << 1;
        $1513 = $1512&65535;
        $L = $1513;
        $1514 = $H;
        $1515 = $1514&65535;
        $1516 = $1515 << 1;
        $1517 = $1516 | 1;
        $1518 = $1517&65535;
        $H = $1518;
        while(1) {
         $1519 = $bits_left;
         $1520 = $1519&255;
         $1521 = ($1520|0)<(1);
         if (!($1521)) {
          break;
         }
         $1522 = $i_ptr;
         $1523 = $i_end;
         $1524 = ($1522>>>0)>=($1523>>>0);
         if ($1524) {
          $1525 = $1;
          $1526 = (_read_input103($1525)|0);
          $1527 = ($1526|0)!=(0);
          if ($1527) {
           label = 295;
           break L24;
          }
          $1531 = $1;
          $1532 = (($1531) + 44|0);
          $1533 = HEAP32[$1532>>2]|0;
          $i_ptr = $1533;
          $1534 = $1;
          $1535 = (($1534) + 48|0);
          $1536 = HEAP32[$1535>>2]|0;
          $i_end = $1536;
         }
         $1537 = $i_ptr;
         $1538 = (($1537) + 1|0);
         $i_ptr = $1538;
         $1539 = HEAP8[$1537]|0;
         $b015 = $1539;
         $1540 = $i_ptr;
         $1541 = $i_end;
         $1542 = ($1540>>>0)>=($1541>>>0);
         if ($1542) {
          $1543 = $1;
          $1544 = (_read_input103($1543)|0);
          $1545 = ($1544|0)!=(0);
          if ($1545) {
           label = 301;
           break L24;
          }
          $1549 = $1;
          $1550 = (($1549) + 44|0);
          $1551 = HEAP32[$1550>>2]|0;
          $i_ptr = $1551;
          $1552 = $1;
          $1553 = (($1552) + 48|0);
          $1554 = HEAP32[$1553>>2]|0;
          $i_end = $1554;
         }
         $1555 = $i_ptr;
         $1556 = (($1555) + 1|0);
         $i_ptr = $1556;
         $1557 = HEAP8[$1555]|0;
         $b116 = $1557;
         $1558 = $b015;
         $1559 = $1558&255;
         $1560 = $1559 << 8;
         $1561 = $b116;
         $1562 = $1561&255;
         $1563 = $1560 | $1562;
         $1564 = $bits_left;
         $1565 = $1564&255;
         $1566 = (16 - ($1565))|0;
         $1567 = $1563 << $1566;
         $1568 = $bit_buffer;
         $1569 = $1568 | $1567;
         $bit_buffer = $1569;
         $1570 = $bits_left;
         $1571 = $1570&255;
         $1572 = (($1571) + 16)|0;
         $1573 = $1572&255;
         $bits_left = $1573;
        }
        $1574 = $C;
        $1575 = $1574&65535;
        $1576 = $1575 << 1;
        $1577 = $bit_buffer;
        $1578 = $1577 >>> 31;
        $1579 = $1576 | $1578;
        $1580 = $1579&65535;
        $C = $1580;
        $1581 = $bit_buffer;
        $1582 = $1581 << 1;
        $bit_buffer = $1582;
        $1583 = $bits_left;
        $1584 = $1583&255;
        $1585 = (($1584) - 1)|0;
        $1586 = $1585&255;
        $bits_left = $1586;
       }
       $1587 = $sym;
       $1588 = (4496 + ($1587)|0);
       $1589 = HEAP8[$1588]|0;
       $needed17 = $1589;
       $extra = 0;
       while(1) {
        $1590 = $needed17;
        $1591 = $1590&255;
        $1592 = ($1591|0)>(0);
        if (!($1592)) {
         break;
        }
        $1593 = $bits_left;
        $1594 = $1593&255;
        $1595 = ($1594>>>0)<=(16);
        if ($1595) {
         $1596 = $i_ptr;
         $1597 = $i_end;
         $1598 = ($1596>>>0)>=($1597>>>0);
         if ($1598) {
          $1599 = $1;
          $1600 = (_read_input103($1599)|0);
          $1601 = ($1600|0)!=(0);
          if ($1601) {
           label = 317;
           break L24;
          }
          $1605 = $1;
          $1606 = (($1605) + 44|0);
          $1607 = HEAP32[$1606>>2]|0;
          $i_ptr = $1607;
          $1608 = $1;
          $1609 = (($1608) + 48|0);
          $1610 = HEAP32[$1609>>2]|0;
          $i_end = $1610;
         }
         $1611 = $i_ptr;
         $1612 = (($1611) + 1|0);
         $i_ptr = $1612;
         $1613 = HEAP8[$1611]|0;
         $b019 = $1613;
         $1614 = $i_ptr;
         $1615 = $i_end;
         $1616 = ($1614>>>0)>=($1615>>>0);
         if ($1616) {
          $1617 = $1;
          $1618 = (_read_input103($1617)|0);
          $1619 = ($1618|0)!=(0);
          if ($1619) {
           label = 323;
           break L24;
          }
          $1623 = $1;
          $1624 = (($1623) + 44|0);
          $1625 = HEAP32[$1624>>2]|0;
          $i_ptr = $1625;
          $1626 = $1;
          $1627 = (($1626) + 48|0);
          $1628 = HEAP32[$1627>>2]|0;
          $i_end = $1628;
         }
         $1629 = $i_ptr;
         $1630 = (($1629) + 1|0);
         $i_ptr = $1630;
         $1631 = HEAP8[$1629]|0;
         $b120 = $1631;
         $1632 = $b019;
         $1633 = $1632&255;
         $1634 = $1633 << 8;
         $1635 = $b120;
         $1636 = $1635&255;
         $1637 = $1634 | $1636;
         $1638 = $bits_left;
         $1639 = $1638&255;
         $1640 = (16 - ($1639))|0;
         $1641 = $1637 << $1640;
         $1642 = $bit_buffer;
         $1643 = $1642 | $1641;
         $bit_buffer = $1643;
         $1644 = $bits_left;
         $1645 = $1644&255;
         $1646 = (($1645) + 16)|0;
         $1647 = $1646&255;
         $bits_left = $1647;
        }
        $1648 = $bits_left;
        $1649 = $1648&255;
        $1650 = $needed17;
        $1651 = $1650&255;
        $1652 = ($1649|0)<($1651|0);
        if ($1652) {
         $1653 = $bits_left;
         $1654 = $1653&255;
         $1658 = $1654;
        } else {
         $1655 = $needed17;
         $1656 = $1655&255;
         $1658 = $1656;
        }
        $1657 = $1658&255;
        $bitrun18 = $1657;
        $1659 = $extra;
        $1660 = $bitrun18;
        $1661 = $1660&255;
        $1662 = $1659 << $1661;
        $1663 = $bit_buffer;
        $1664 = $bitrun18;
        $1665 = $1664&255;
        $1666 = (32 - ($1665))|0;
        $1667 = $1663 >>> $1666;
        $1668 = $1662 | $1667;
        $extra = $1668;
        $1669 = $bitrun18;
        $1670 = $1669&255;
        $1671 = $bit_buffer;
        $1672 = $1671 << $1670;
        $bit_buffer = $1672;
        $1673 = $bitrun18;
        $1674 = $1673&255;
        $1675 = $bits_left;
        $1676 = $1675&255;
        $1677 = (($1676) - ($1674))|0;
        $1678 = $1677&255;
        $bits_left = $1678;
        $1679 = $bitrun18;
        $1680 = $1679&255;
        $1681 = $needed17;
        $1682 = $1681&255;
        $1683 = (($1682) - ($1680))|0;
        $1684 = $1683&255;
        $needed17 = $1684;
       }
       $1685 = $sym;
       $1686 = (4528 + ($1685)|0);
       $1687 = HEAP8[$1686]|0;
       $1688 = $1687&255;
       $1689 = $extra;
       $1690 = (($1688) + ($1689))|0;
       $1691 = (($1690) + 5)|0;
       $match_length = $1691;
       $1692 = $H;
       $1693 = $1692&65535;
       $1694 = $L;
       $1695 = $1694&65535;
       $1696 = (($1693) - ($1695))|0;
       $1697 = $1696 & 65535;
       $1698 = (($1697) + 1)|0;
       $range = $1698;
       $1699 = $C;
       $1700 = $1699&65535;
       $1701 = $L;
       $1702 = $1701&65535;
       $1703 = (($1700) - ($1702))|0;
       $1704 = (($1703) + 1)|0;
       $1705 = $1;
       $1706 = (($1705) + 144|0);
       $1707 = (($1706) + 8|0);
       $1708 = HEAP32[$1707>>2]|0;
       $1709 = (($1708) + 2|0);
       $1710 = HEAP16[$1709>>1]|0;
       $1711 = $1710&65535;
       $1712 = Math_imul($1704, $1711)|0;
       $1713 = (($1712) - 1)|0;
       $1714 = $range;
       $1715 = (($1713>>>0) / ($1714>>>0))&-1;
       $1716 = $1715 & 65535;
       $1717 = $1716&65535;
       $symf = $1717;
       $i = 1;
       while(1) {
        $1718 = $i;
        $1719 = $1;
        $1720 = (($1719) + 144|0);
        $1721 = (($1720) + 4|0);
        $1722 = HEAP32[$1721>>2]|0;
        $1723 = ($1718|0)<($1722|0);
        if (!($1723)) {
         break;
        }
        $1724 = $i;
        $1725 = $1;
        $1726 = (($1725) + 144|0);
        $1727 = (($1726) + 8|0);
        $1728 = HEAP32[$1727>>2]|0;
        $1729 = (($1728) + ($1724<<2)|0);
        $1730 = (($1729) + 2|0);
        $1731 = HEAP16[$1730>>1]|0;
        $1732 = $1731&65535;
        $1733 = $symf;
        $1734 = $1733&65535;
        $1735 = ($1732|0)<=($1734|0);
        if ($1735) {
         label = 337;
         break;
        }
        $1736 = $i;
        $1737 = (($1736) + 1)|0;
        $i = $1737;
       }
       if ((label|0) == 337) {
        label = 0;
       }
       $1738 = $i;
       $1739 = (($1738) - 1)|0;
       $1740 = $1;
       $1741 = (($1740) + 144|0);
       $1742 = (($1741) + 8|0);
       $1743 = HEAP32[$1742>>2]|0;
       $1744 = (($1743) + ($1739<<2)|0);
       $1745 = HEAP16[$1744>>1]|0;
       $1746 = $1745&65535;
       $sym = $1746;
       $1747 = $H;
       $1748 = $1747&65535;
       $1749 = $L;
       $1750 = $1749&65535;
       $1751 = (($1748) - ($1750))|0;
       $1752 = (($1751) + 1)|0;
       $range = $1752;
       $1753 = $1;
       $1754 = (($1753) + 144|0);
       $1755 = (($1754) + 8|0);
       $1756 = HEAP32[$1755>>2]|0;
       $1757 = (($1756) + 2|0);
       $1758 = HEAP16[$1757>>1]|0;
       $symf = $1758;
       $1759 = $L;
       $1760 = $1759&65535;
       $1761 = $i;
       $1762 = (($1761) - 1)|0;
       $1763 = $1;
       $1764 = (($1763) + 144|0);
       $1765 = (($1764) + 8|0);
       $1766 = HEAP32[$1765>>2]|0;
       $1767 = (($1766) + ($1762<<2)|0);
       $1768 = (($1767) + 2|0);
       $1769 = HEAP16[$1768>>1]|0;
       $1770 = $1769&65535;
       $1771 = $range;
       $1772 = Math_imul($1770, $1771)|0;
       $1773 = $symf;
       $1774 = $1773&65535;
       $1775 = (($1772>>>0) / ($1774>>>0))&-1;
       $1776 = (($1760) + ($1775))|0;
       $1777 = (($1776) - 1)|0;
       $1778 = $1777&65535;
       $H = $1778;
       $1779 = $L;
       $1780 = $1779&65535;
       $1781 = $i;
       $1782 = $1;
       $1783 = (($1782) + 144|0);
       $1784 = (($1783) + 8|0);
       $1785 = HEAP32[$1784>>2]|0;
       $1786 = (($1785) + ($1781<<2)|0);
       $1787 = (($1786) + 2|0);
       $1788 = HEAP16[$1787>>1]|0;
       $1789 = $1788&65535;
       $1790 = $range;
       $1791 = Math_imul($1789, $1790)|0;
       $1792 = $symf;
       $1793 = $1792&65535;
       $1794 = (($1791>>>0) / ($1793>>>0))&-1;
       $1795 = (($1780) + ($1794))|0;
       $1796 = $1795&65535;
       $L = $1796;
       while(1) {
        $1797 = $i;
        $1798 = (($1797) + -1)|0;
        $i = $1798;
        $1799 = $1;
        $1800 = (($1799) + 144|0);
        $1801 = (($1800) + 8|0);
        $1802 = HEAP32[$1801>>2]|0;
        $1803 = (($1802) + ($1798<<2)|0);
        $1804 = (($1803) + 2|0);
        $1805 = HEAP16[$1804>>1]|0;
        $1806 = $1805&65535;
        $1807 = (($1806) + 8)|0;
        $1808 = $1807&65535;
        HEAP16[$1804>>1] = $1808;
        $1809 = $i;
        $1810 = ($1809|0)>(0);
        if (!($1810)) {
         break;
        }
       }
       $1811 = $1;
       $1812 = (($1811) + 144|0);
       $1813 = (($1812) + 8|0);
       $1814 = HEAP32[$1813>>2]|0;
       $1815 = (($1814) + 2|0);
       $1816 = HEAP16[$1815>>1]|0;
       $1817 = $1816&65535;
       $1818 = ($1817|0)>(3800);
       if ($1818) {
        $1819 = $1;
        $1820 = (($1819) + 144|0);
        _qtmd_update_model($1820);
       }
       while(1) {
        $1821 = $L;
        $1822 = $1821&65535;
        $1823 = $1822 & 32768;
        $1824 = $H;
        $1825 = $1824&65535;
        $1826 = $1825 & 32768;
        $1827 = ($1823|0)!=($1826|0);
        if ($1827) {
         $1828 = $L;
         $1829 = $1828&65535;
         $1830 = $1829 & 16384;
         $1831 = ($1830|0)!=(0);
         if (!($1831)) {
          break;
         }
         $1832 = $H;
         $1833 = $1832&65535;
         $1834 = $1833 & 16384;
         $1835 = ($1834|0)!=(0);
         if ($1835) {
          break;
         }
         $1836 = $C;
         $1837 = $1836&65535;
         $1838 = $1837 ^ 16384;
         $1839 = $1838&65535;
         $C = $1839;
         $1840 = $L;
         $1841 = $1840&65535;
         $1842 = $1841 & 16383;
         $1843 = $1842&65535;
         $L = $1843;
         $1844 = $H;
         $1845 = $1844&65535;
         $1846 = $1845 | 16384;
         $1847 = $1846&65535;
         $H = $1847;
        }
        $1848 = $L;
        $1849 = $1848&65535;
        $1850 = $1849 << 1;
        $1851 = $1850&65535;
        $L = $1851;
        $1852 = $H;
        $1853 = $1852&65535;
        $1854 = $1853 << 1;
        $1855 = $1854 | 1;
        $1856 = $1855&65535;
        $H = $1856;
        while(1) {
         $1857 = $bits_left;
         $1858 = $1857&255;
         $1859 = ($1858|0)<(1);
         if (!($1859)) {
          break;
         }
         $1860 = $i_ptr;
         $1861 = $i_end;
         $1862 = ($1860>>>0)>=($1861>>>0);
         if ($1862) {
          $1863 = $1;
          $1864 = (_read_input103($1863)|0);
          $1865 = ($1864|0)!=(0);
          if ($1865) {
           label = 359;
           break L24;
          }
          $1869 = $1;
          $1870 = (($1869) + 44|0);
          $1871 = HEAP32[$1870>>2]|0;
          $i_ptr = $1871;
          $1872 = $1;
          $1873 = (($1872) + 48|0);
          $1874 = HEAP32[$1873>>2]|0;
          $i_end = $1874;
         }
         $1875 = $i_ptr;
         $1876 = (($1875) + 1|0);
         $i_ptr = $1876;
         $1877 = HEAP8[$1875]|0;
         $b021 = $1877;
         $1878 = $i_ptr;
         $1879 = $i_end;
         $1880 = ($1878>>>0)>=($1879>>>0);
         if ($1880) {
          $1881 = $1;
          $1882 = (_read_input103($1881)|0);
          $1883 = ($1882|0)!=(0);
          if ($1883) {
           label = 365;
           break L24;
          }
          $1887 = $1;
          $1888 = (($1887) + 44|0);
          $1889 = HEAP32[$1888>>2]|0;
          $i_ptr = $1889;
          $1890 = $1;
          $1891 = (($1890) + 48|0);
          $1892 = HEAP32[$1891>>2]|0;
          $i_end = $1892;
         }
         $1893 = $i_ptr;
         $1894 = (($1893) + 1|0);
         $i_ptr = $1894;
         $1895 = HEAP8[$1893]|0;
         $b122 = $1895;
         $1896 = $b021;
         $1897 = $1896&255;
         $1898 = $1897 << 8;
         $1899 = $b122;
         $1900 = $1899&255;
         $1901 = $1898 | $1900;
         $1902 = $bits_left;
         $1903 = $1902&255;
         $1904 = (16 - ($1903))|0;
         $1905 = $1901 << $1904;
         $1906 = $bit_buffer;
         $1907 = $1906 | $1905;
         $bit_buffer = $1907;
         $1908 = $bits_left;
         $1909 = $1908&255;
         $1910 = (($1909) + 16)|0;
         $1911 = $1910&255;
         $bits_left = $1911;
        }
        $1912 = $C;
        $1913 = $1912&65535;
        $1914 = $1913 << 1;
        $1915 = $bit_buffer;
        $1916 = $1915 >>> 31;
        $1917 = $1914 | $1916;
        $1918 = $1917&65535;
        $C = $1918;
        $1919 = $bit_buffer;
        $1920 = $1919 << 1;
        $bit_buffer = $1920;
        $1921 = $bits_left;
        $1922 = $1921&255;
        $1923 = (($1922) - 1)|0;
        $1924 = $1923&255;
        $bits_left = $1924;
       }
       $1925 = $sym;
       $1926 = (4280 + ($1925)|0);
       $1927 = HEAP8[$1926]|0;
       $needed23 = $1927;
       $extra = 0;
       while(1) {
        $1928 = $needed23;
        $1929 = $1928&255;
        $1930 = ($1929|0)>(0);
        if (!($1930)) {
         break;
        }
        $1931 = $bits_left;
        $1932 = $1931&255;
        $1933 = ($1932>>>0)<=(16);
        if ($1933) {
         $1934 = $i_ptr;
         $1935 = $i_end;
         $1936 = ($1934>>>0)>=($1935>>>0);
         if ($1936) {
          $1937 = $1;
          $1938 = (_read_input103($1937)|0);
          $1939 = ($1938|0)!=(0);
          if ($1939) {
           label = 381;
           break L24;
          }
          $1943 = $1;
          $1944 = (($1943) + 44|0);
          $1945 = HEAP32[$1944>>2]|0;
          $i_ptr = $1945;
          $1946 = $1;
          $1947 = (($1946) + 48|0);
          $1948 = HEAP32[$1947>>2]|0;
          $i_end = $1948;
         }
         $1949 = $i_ptr;
         $1950 = (($1949) + 1|0);
         $i_ptr = $1950;
         $1951 = HEAP8[$1949]|0;
         $b025 = $1951;
         $1952 = $i_ptr;
         $1953 = $i_end;
         $1954 = ($1952>>>0)>=($1953>>>0);
         if ($1954) {
          $1955 = $1;
          $1956 = (_read_input103($1955)|0);
          $1957 = ($1956|0)!=(0);
          if ($1957) {
           label = 387;
           break L24;
          }
          $1961 = $1;
          $1962 = (($1961) + 44|0);
          $1963 = HEAP32[$1962>>2]|0;
          $i_ptr = $1963;
          $1964 = $1;
          $1965 = (($1964) + 48|0);
          $1966 = HEAP32[$1965>>2]|0;
          $i_end = $1966;
         }
         $1967 = $i_ptr;
         $1968 = (($1967) + 1|0);
         $i_ptr = $1968;
         $1969 = HEAP8[$1967]|0;
         $b126 = $1969;
         $1970 = $b025;
         $1971 = $1970&255;
         $1972 = $1971 << 8;
         $1973 = $b126;
         $1974 = $1973&255;
         $1975 = $1972 | $1974;
         $1976 = $bits_left;
         $1977 = $1976&255;
         $1978 = (16 - ($1977))|0;
         $1979 = $1975 << $1978;
         $1980 = $bit_buffer;
         $1981 = $1980 | $1979;
         $bit_buffer = $1981;
         $1982 = $bits_left;
         $1983 = $1982&255;
         $1984 = (($1983) + 16)|0;
         $1985 = $1984&255;
         $bits_left = $1985;
        }
        $1986 = $bits_left;
        $1987 = $1986&255;
        $1988 = $needed23;
        $1989 = $1988&255;
        $1990 = ($1987|0)<($1989|0);
        if ($1990) {
         $1991 = $bits_left;
         $1992 = $1991&255;
         $1996 = $1992;
        } else {
         $1993 = $needed23;
         $1994 = $1993&255;
         $1996 = $1994;
        }
        $1995 = $1996&255;
        $bitrun24 = $1995;
        $1997 = $extra;
        $1998 = $bitrun24;
        $1999 = $1998&255;
        $2000 = $1997 << $1999;
        $2001 = $bit_buffer;
        $2002 = $bitrun24;
        $2003 = $2002&255;
        $2004 = (32 - ($2003))|0;
        $2005 = $2001 >>> $2004;
        $2006 = $2000 | $2005;
        $extra = $2006;
        $2007 = $bitrun24;
        $2008 = $2007&255;
        $2009 = $bit_buffer;
        $2010 = $2009 << $2008;
        $bit_buffer = $2010;
        $2011 = $bitrun24;
        $2012 = $2011&255;
        $2013 = $bits_left;
        $2014 = $2013&255;
        $2015 = (($2014) - ($2012))|0;
        $2016 = $2015&255;
        $bits_left = $2016;
        $2017 = $bitrun24;
        $2018 = $2017&255;
        $2019 = $needed23;
        $2020 = $2019&255;
        $2021 = (($2020) - ($2018))|0;
        $2022 = $2021&255;
        $needed23 = $2022;
       }
       $2023 = $sym;
       $2024 = (4328 + ($2023<<2)|0);
       $2025 = HEAP32[$2024>>2]|0;
       $2026 = $extra;
       $2027 = (($2025) + ($2026))|0;
       $2028 = (($2027) + 1)|0;
       $match_offset = $2028;
      } else {
       label = 398;
       break L24;
      }
      $2031 = $window_posn;
      $2032 = $window;
      $2033 = (($2032) + ($2031)|0);
      $rundest = $2033;
      $2034 = $match_length;
      $2035 = $frame_todo;
      $2036 = (($2035) - ($2034))|0;
      $frame_todo = $2036;
      $2037 = $window_posn;
      $2038 = $match_length;
      $2039 = (($2037) + ($2038))|0;
      $2040 = $1;
      $2041 = (($2040) + 16|0);
      $2042 = HEAP32[$2041>>2]|0;
      $2043 = ($2039>>>0)>($2042>>>0);
      if ($2043) {
       label = 400;
       break;
      }
      $2138 = $match_length;
      $i = $2138;
      $2139 = $match_offset;
      $2140 = $window_posn;
      $2141 = ($2139>>>0)>($2140>>>0);
      if ($2141) {
       $2142 = $match_offset;
       $2143 = $window_posn;
       $2144 = (($2142) - ($2143))|0;
       $j = $2144;
       $2145 = $j;
       $2146 = $1;
       $2147 = (($2146) + 16|0);
       $2148 = HEAP32[$2147>>2]|0;
       $2149 = ($2145|0)>($2148|0);
       if ($2149) {
        label = 413;
        break L24;
       }
       $2152 = $1;
       $2153 = (($2152) + 16|0);
       $2154 = HEAP32[$2153>>2]|0;
       $2155 = $j;
       $2156 = (($2154) - ($2155))|0;
       $2157 = $window;
       $2158 = (($2157) + ($2156)|0);
       $runsrc = $2158;
       $2159 = $j;
       $2160 = $i;
       $2161 = ($2159|0)<($2160|0);
       if ($2161) {
        $2162 = $j;
        $2163 = $i;
        $2164 = (($2163) - ($2162))|0;
        $i = $2164;
        while(1) {
         $2165 = $j;
         $2166 = (($2165) + -1)|0;
         $j = $2166;
         $2167 = ($2165|0)>(0);
         if (!($2167)) {
          break;
         }
         $2168 = $runsrc;
         $2169 = (($2168) + 1|0);
         $runsrc = $2169;
         $2170 = HEAP8[$2168]|0;
         $2171 = $rundest;
         $2172 = (($2171) + 1|0);
         $rundest = $2172;
         HEAP8[$2171] = $2170;
        }
        $2173 = $window;
        $runsrc = $2173;
       }
       while(1) {
        $2174 = $i;
        $2175 = (($2174) + -1)|0;
        $i = $2175;
        $2176 = ($2174|0)>(0);
        if (!($2176)) {
         break;
        }
        $2177 = $runsrc;
        $2178 = (($2177) + 1|0);
        $runsrc = $2178;
        $2179 = HEAP8[$2177]|0;
        $2180 = $rundest;
        $2181 = (($2180) + 1|0);
        $rundest = $2181;
        HEAP8[$2180] = $2179;
       }
      } else {
       $2182 = $rundest;
       $2183 = $match_offset;
       $2184 = (0 - ($2183))|0;
       $2185 = (($2182) + ($2184)|0);
       $runsrc = $2185;
       while(1) {
        $2186 = $i;
        $2187 = (($2186) + -1)|0;
        $i = $2187;
        $2188 = ($2186|0)>(0);
        if (!($2188)) {
         break;
        }
        $2189 = $runsrc;
        $2190 = (($2189) + 1|0);
        $runsrc = $2190;
        $2191 = HEAP8[$2189]|0;
        $2192 = $rundest;
        $2193 = (($2192) + 1|0);
        $rundest = $2193;
        HEAP8[$2192] = $2191;
       }
      }
      $2194 = $match_length;
      $2195 = $window_posn;
      $2196 = (($2195) + ($2194))|0;
      $window_posn = $2196;
     }
    }
    if ((label|0) == 400) {
     label = 0;
     $2044 = $1;
     $2045 = (($2044) + 16|0);
     $2046 = HEAP32[$2045>>2]|0;
     $2047 = $window_posn;
     $2048 = (($2046) - ($2047))|0;
     $i = $2048;
     $2049 = $window_posn;
     $2050 = $match_offset;
     $2051 = (($2049) - ($2050))|0;
     $j = $2051;
     while(1) {
      $2052 = $i;
      $2053 = (($2052) + -1)|0;
      $i = $2053;
      $2054 = ($2052|0)!=(0);
      if (!($2054)) {
       break;
      }
      $2055 = $j;
      $2056 = (($2055) + 1)|0;
      $j = $2056;
      $2057 = $1;
      $2058 = (($2057) + 16|0);
      $2059 = HEAP32[$2058>>2]|0;
      $2060 = (($2059) - 1)|0;
      $2061 = $2055 & $2060;
      $2062 = $window;
      $2063 = (($2062) + ($2061)|0);
      $2064 = HEAP8[$2063]|0;
      $2065 = $rundest;
      $2066 = (($2065) + 1|0);
      $rundest = $2066;
      HEAP8[$2065] = $2064;
     }
     $2067 = $1;
     $2068 = (($2067) + 16|0);
     $2069 = HEAP32[$2068>>2]|0;
     $2070 = $window;
     $2071 = (($2070) + ($2069)|0);
     $2072 = $1;
     $2073 = (($2072) + 52|0);
     $2074 = HEAP32[$2073>>2]|0;
     $2075 = $2071;
     $2076 = $2074;
     $2077 = (($2075) - ($2076))|0;
     $i = $2077;
     $2078 = $i;
     $2079 = $2;
     $2080 = ($2078|0)>($2079|0);
     if ($2080) {
      label = 404;
      break;
     }
     $2083 = $1;
     $2084 = HEAP32[$2083>>2]|0;
     $2085 = (($2084) + 12|0);
     $2086 = HEAP32[$2085>>2]|0;
     $2087 = $1;
     $2088 = (($2087) + 8|0);
     $2089 = HEAP32[$2088>>2]|0;
     $2090 = $1;
     $2091 = (($2090) + 52|0);
     $2092 = HEAP32[$2091>>2]|0;
     $2093 = $i;
     $2094 = (FUNCTION_TABLE_iiii[$2086 & 15]($2089,$2092,$2093)|0);
     $2095 = $i;
     $2096 = ($2094|0)!=($2095|0);
     if ($2096) {
      label = 406;
      break;
     }
     $2099 = $i;
     $2100 = $2;
     $2101 = (($2100) - ($2099))|0;
     $2 = $2101;
     $2102 = $window;
     $2103 = $1;
     $2104 = (($2103) + 52|0);
     HEAP32[$2104>>2] = $2102;
     $2105 = $window;
     $2106 = $1;
     $2107 = (($2106) + 56|0);
     HEAP32[$2107>>2] = $2105;
     $2108 = $window;
     $rundest = $2108;
     $2109 = $match_length;
     $2110 = $1;
     $2111 = (($2110) + 16|0);
     $2112 = HEAP32[$2111>>2]|0;
     $2113 = $window_posn;
     $2114 = (($2112) - ($2113))|0;
     $2115 = (($2109) - ($2114))|0;
     $i = $2115;
     while(1) {
      $2116 = $i;
      $2117 = (($2116) + -1)|0;
      $i = $2117;
      $2118 = ($2116|0)!=(0);
      if (!($2118)) {
       break;
      }
      $2119 = $j;
      $2120 = (($2119) + 1)|0;
      $j = $2120;
      $2121 = $1;
      $2122 = (($2121) + 16|0);
      $2123 = HEAP32[$2122>>2]|0;
      $2124 = (($2123) - 1)|0;
      $2125 = $2119 & $2124;
      $2126 = $window;
      $2127 = (($2126) + ($2125)|0);
      $2128 = HEAP8[$2127]|0;
      $2129 = $rundest;
      $2130 = (($2129) + 1|0);
      $rundest = $2130;
      HEAP8[$2129] = $2128;
     }
     $2131 = $window_posn;
     $2132 = $match_length;
     $2133 = (($2131) + ($2132))|0;
     $2134 = $1;
     $2135 = (($2134) + 16|0);
     $2136 = HEAP32[$2135>>2]|0;
     $2137 = (($2133) - ($2136))|0;
     $window_posn = $2137;
    }
    $2197 = $window_posn;
    $2198 = $window;
    $2199 = (($2198) + ($2197)|0);
    $2200 = $1;
    $2201 = (($2200) + 56|0);
    HEAP32[$2201>>2] = $2199;
    $2202 = $frame_todo;
    $2203 = ($2202>>>0)>(32768);
    if ($2203) {
     label = 431;
     break;
    }
    $2206 = $frame_todo;
    $2207 = ($2206|0)==(0);
    if ($2207) {
     $2208 = $bits_left;
     $2209 = $2208&255;
     $2210 = $2209 & 7;
     $2211 = ($2210|0)!=(0);
     if ($2211) {
      $2212 = $bits_left;
      $2213 = $2212&255;
      $2214 = $2213 & 7;
      $2215 = $bit_buffer;
      $2216 = $2215 << $2214;
      $bit_buffer = $2216;
      $2217 = $bits_left;
      $2218 = $2217&255;
      $2219 = $2218 & 7;
      $2220 = $bits_left;
      $2221 = $2220&255;
      $2222 = (($2221) - ($2219))|0;
      $2223 = $2222&255;
      $bits_left = $2223;
     }
     while(1) {
      while(1) {
       $2224 = $bits_left;
       $2225 = $2224&255;
       $2226 = ($2225|0)<(8);
       if (!($2226)) {
        break;
       }
       $2227 = $i_ptr;
       $2228 = $i_end;
       $2229 = ($2227>>>0)>=($2228>>>0);
       if ($2229) {
        $2230 = $1;
        $2231 = (_read_input103($2230)|0);
        $2232 = ($2231|0)!=(0);
        if ($2232) {
         label = 444;
         break L24;
        }
        $2236 = $1;
        $2237 = (($2236) + 44|0);
        $2238 = HEAP32[$2237>>2]|0;
        $i_ptr = $2238;
        $2239 = $1;
        $2240 = (($2239) + 48|0);
        $2241 = HEAP32[$2240>>2]|0;
        $i_end = $2241;
       }
       $2242 = $i_ptr;
       $2243 = (($2242) + 1|0);
       $i_ptr = $2243;
       $2244 = HEAP8[$2242]|0;
       $b027 = $2244;
       $2245 = $i_ptr;
       $2246 = $i_end;
       $2247 = ($2245>>>0)>=($2246>>>0);
       if ($2247) {
        $2248 = $1;
        $2249 = (_read_input103($2248)|0);
        $2250 = ($2249|0)!=(0);
        if ($2250) {
         label = 450;
         break L24;
        }
        $2254 = $1;
        $2255 = (($2254) + 44|0);
        $2256 = HEAP32[$2255>>2]|0;
        $i_ptr = $2256;
        $2257 = $1;
        $2258 = (($2257) + 48|0);
        $2259 = HEAP32[$2258>>2]|0;
        $i_end = $2259;
       }
       $2260 = $i_ptr;
       $2261 = (($2260) + 1|0);
       $i_ptr = $2261;
       $2262 = HEAP8[$2260]|0;
       $b128 = $2262;
       $2263 = $b027;
       $2264 = $2263&255;
       $2265 = $2264 << 8;
       $2266 = $b128;
       $2267 = $2266&255;
       $2268 = $2265 | $2267;
       $2269 = $bits_left;
       $2270 = $2269&255;
       $2271 = (16 - ($2270))|0;
       $2272 = $2268 << $2271;
       $2273 = $bit_buffer;
       $2274 = $2273 | $2272;
       $bit_buffer = $2274;
       $2275 = $bits_left;
       $2276 = $2275&255;
       $2277 = (($2276) + 16)|0;
       $2278 = $2277&255;
       $bits_left = $2278;
      }
      $2279 = $bit_buffer;
      $2280 = $2279 >>> 24;
      $i = $2280;
      $2281 = $bit_buffer;
      $2282 = $2281 << 8;
      $bit_buffer = $2282;
      $2283 = $bits_left;
      $2284 = $2283&255;
      $2285 = (($2284) - 8)|0;
      $2286 = $2285&255;
      $bits_left = $2286;
      $2287 = $i;
      $2288 = ($2287|0)!=(255);
      if (!($2288)) {
       break;
      }
     }
     $2289 = $1;
     $2290 = (($2289) + 34|0);
     HEAP8[$2290] = 0;
     $frame_todo = 32768;
    }
    $2291 = $window_posn;
    $2292 = $1;
    $2293 = (($2292) + 16|0);
    $2294 = HEAP32[$2293>>2]|0;
    $2295 = ($2291|0)==($2294|0);
    if ($2295) {
     $2296 = $1;
     $2297 = (($2296) + 56|0);
     $2298 = HEAP32[$2297>>2]|0;
     $2299 = $1;
     $2300 = (($2299) + 52|0);
     $2301 = HEAP32[$2300>>2]|0;
     $2302 = $2298;
     $2303 = $2301;
     $2304 = (($2302) - ($2303))|0;
     $i = $2304;
     $2305 = $i;
     $2306 = $2;
     $2307 = ($2305|0)>=($2306|0);
     if ($2307) {
      label = 462;
      break;
     }
     $2308 = $1;
     $2309 = HEAP32[$2308>>2]|0;
     $2310 = (($2309) + 12|0);
     $2311 = HEAP32[$2310>>2]|0;
     $2312 = $1;
     $2313 = (($2312) + 8|0);
     $2314 = HEAP32[$2313>>2]|0;
     $2315 = $1;
     $2316 = (($2315) + 52|0);
     $2317 = HEAP32[$2316>>2]|0;
     $2318 = $i;
     $2319 = (FUNCTION_TABLE_iiii[$2311 & 15]($2314,$2317,$2318)|0);
     $2320 = $i;
     $2321 = ($2319|0)!=($2320|0);
     if ($2321) {
      label = 464;
      break;
     }
     $2324 = $i;
     $2325 = $2;
     $2326 = (($2325) - ($2324))|0;
     $2 = $2326;
     $2327 = $window;
     $2328 = $1;
     $2329 = (($2328) + 52|0);
     HEAP32[$2329>>2] = $2327;
     $2330 = $window;
     $2331 = $1;
     $2332 = (($2331) + 56|0);
     HEAP32[$2332>>2] = $2330;
     $window_posn = 0;
    }
   }
   if ((label|0) == 27) {
    $109 = $1;
    $110 = (($109) + 36|0);
    $111 = HEAP32[$110>>2]|0;
    $0 = $111;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 33) {
    $127 = $1;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $0 = $129;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 73) {
    $372 = $1;
    $373 = (($372) + 36|0);
    $374 = HEAP32[$373>>2]|0;
    $0 = $374;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 79) {
    $390 = $1;
    $391 = (($390) + 36|0);
    $392 = HEAP32[$391>>2]|0;
    $0 = $392;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 123) {
    $612 = $1;
    $613 = (($612) + 36|0);
    $614 = HEAP32[$613>>2]|0;
    $0 = $614;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 129) {
    $630 = $1;
    $631 = (($630) + 36|0);
    $632 = HEAP32[$631>>2]|0;
    $0 = $632;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 165) {
    $854 = $1;
    $855 = (($854) + 36|0);
    $856 = HEAP32[$855>>2]|0;
    $0 = $856;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 171) {
    $872 = $1;
    $873 = (($872) + 36|0);
    $874 = HEAP32[$873>>2]|0;
    $0 = $874;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 187) {
    $928 = $1;
    $929 = (($928) + 36|0);
    $930 = HEAP32[$929>>2]|0;
    $0 = $930;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 193) {
    $946 = $1;
    $947 = (($946) + 36|0);
    $948 = HEAP32[$947>>2]|0;
    $0 = $948;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 230) {
    $1191 = $1;
    $1192 = (($1191) + 36|0);
    $1193 = HEAP32[$1192>>2]|0;
    $0 = $1193;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 236) {
    $1209 = $1;
    $1210 = (($1209) + 36|0);
    $1211 = HEAP32[$1210>>2]|0;
    $0 = $1211;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 252) {
    $1265 = $1;
    $1266 = (($1265) + 36|0);
    $1267 = HEAP32[$1266>>2]|0;
    $0 = $1267;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 258) {
    $1283 = $1;
    $1284 = (($1283) + 36|0);
    $1285 = HEAP32[$1284>>2]|0;
    $0 = $1285;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 295) {
    $1528 = $1;
    $1529 = (($1528) + 36|0);
    $1530 = HEAP32[$1529>>2]|0;
    $0 = $1530;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 301) {
    $1546 = $1;
    $1547 = (($1546) + 36|0);
    $1548 = HEAP32[$1547>>2]|0;
    $0 = $1548;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 317) {
    $1602 = $1;
    $1603 = (($1602) + 36|0);
    $1604 = HEAP32[$1603>>2]|0;
    $0 = $1604;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 323) {
    $1620 = $1;
    $1621 = (($1620) + 36|0);
    $1622 = HEAP32[$1621>>2]|0;
    $0 = $1622;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 359) {
    $1866 = $1;
    $1867 = (($1866) + 36|0);
    $1868 = HEAP32[$1867>>2]|0;
    $0 = $1868;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 365) {
    $1884 = $1;
    $1885 = (($1884) + 36|0);
    $1886 = HEAP32[$1885>>2]|0;
    $0 = $1886;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 381) {
    $1940 = $1;
    $1941 = (($1940) + 36|0);
    $1942 = HEAP32[$1941>>2]|0;
    $0 = $1942;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 387) {
    $1958 = $1;
    $1959 = (($1958) + 36|0);
    $1960 = HEAP32[$1959>>2]|0;
    $0 = $1960;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 398) {
    $2029 = $1;
    $2030 = (($2029) + 36|0);
    HEAP32[$2030>>2] = 11;
    $0 = 11;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 404) {
    $2081 = $1;
    $2082 = (($2081) + 36|0);
    HEAP32[$2082>>2] = 11;
    $0 = 11;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 406) {
    $2097 = $1;
    $2098 = (($2097) + 36|0);
    HEAP32[$2098>>2] = 4;
    $0 = 4;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 413) {
    $2150 = $1;
    $2151 = (($2150) + 36|0);
    HEAP32[$2151>>2] = 11;
    $0 = 11;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 431) {
    $2204 = $1;
    $2205 = (($2204) + 36|0);
    HEAP32[$2205>>2] = 11;
    $0 = 11;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 444) {
    $2233 = $1;
    $2234 = (($2233) + 36|0);
    $2235 = HEAP32[$2234>>2]|0;
    $0 = $2235;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 450) {
    $2251 = $1;
    $2252 = (($2251) + 36|0);
    $2253 = HEAP32[$2252>>2]|0;
    $0 = $2253;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   else if ((label|0) == 462) {
   }
   else if ((label|0) == 464) {
    $2322 = $1;
    $2323 = (($2322) + 36|0);
    HEAP32[$2323>>2] = 4;
    $0 = 4;
    $2384 = $0;
    STACKTOP = sp;return ($2384|0);
   }
   $2333 = $2;
   $2334 = ($2333|0)!=(0);
   do {
    if ($2334) {
     $2335 = $2;
     $i = $2335;
     $2336 = $1;
     $2337 = HEAP32[$2336>>2]|0;
     $2338 = (($2337) + 12|0);
     $2339 = HEAP32[$2338>>2]|0;
     $2340 = $1;
     $2341 = (($2340) + 8|0);
     $2342 = HEAP32[$2341>>2]|0;
     $2343 = $1;
     $2344 = (($2343) + 52|0);
     $2345 = HEAP32[$2344>>2]|0;
     $2346 = $i;
     $2347 = (FUNCTION_TABLE_iiii[$2339 & 15]($2342,$2345,$2346)|0);
     $2348 = $i;
     $2349 = ($2347|0)!=($2348|0);
     if (!($2349)) {
      $2352 = $i;
      $2353 = $1;
      $2354 = (($2353) + 52|0);
      $2355 = HEAP32[$2354>>2]|0;
      $2356 = (($2355) + ($2352)|0);
      HEAP32[$2354>>2] = $2356;
      break;
     }
     $2350 = $1;
     $2351 = (($2350) + 36|0);
     HEAP32[$2351>>2] = 4;
     $0 = 4;
     $2384 = $0;
     STACKTOP = sp;return ($2384|0);
    }
   } while(0);
   $2357 = $i_ptr;
   $2358 = $1;
   $2359 = (($2358) + 44|0);
   HEAP32[$2359>>2] = $2357;
   $2360 = $i_end;
   $2361 = $1;
   $2362 = (($2361) + 48|0);
   HEAP32[$2362>>2] = $2360;
   $2363 = $bit_buffer;
   $2364 = $1;
   $2365 = (($2364) + 60|0);
   HEAP32[$2365>>2] = $2363;
   $2366 = $bits_left;
   $2367 = $1;
   $2368 = (($2367) + 68|0);
   HEAP8[$2368] = $2366;
   $2369 = $window_posn;
   $2370 = $1;
   $2371 = (($2370) + 20|0);
   HEAP32[$2371>>2] = $2369;
   $2372 = $frame_todo;
   $2373 = $1;
   $2374 = (($2373) + 24|0);
   HEAP32[$2374>>2] = $2372;
   $2375 = $H;
   $2376 = $1;
   $2377 = (($2376) + 28|0);
   HEAP16[$2377>>1] = $2375;
   $2378 = $L;
   $2379 = $1;
   $2380 = (($2379) + 30|0);
   HEAP16[$2380>>1] = $2378;
   $2381 = $C;
   $2382 = $1;
   $2383 = (($2382) + 32|0);
   HEAP16[$2383>>1] = $2381;
   $0 = 0;
   $2384 = $0;
   STACKTOP = sp;return ($2384|0);
  }
 }
 $0 = 1;
 $2384 = $0;
 STACKTOP = sp;return ($2384|0);
}
function _read_input103($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $read = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $p;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_iiii[$5 & 15]($8,$11,$14)|0);
 $read = $15;
 $16 = $read;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $1;
  $19 = (($18) + 36|0);
  HEAP32[$19>>2] = 3;
  $0 = 3;
  $49 = $0;
  STACKTOP = sp;return ($49|0);
 }
 $20 = $read;
 $21 = ($20|0)==(0);
 do {
  if ($21) {
   $22 = $1;
   $23 = (($22) + 69|0);
   $24 = HEAP8[$23]|0;
   $25 = ($24<<24>>24)!=(0);
   if ($25) {
    $26 = $1;
    $27 = (($26) + 36|0);
    HEAP32[$27>>2] = 3;
    $0 = 3;
    $49 = $0;
    STACKTOP = sp;return ($49|0);
   } else {
    $read = 2;
    $28 = $1;
    $29 = (($28) + 40|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1|0);
    HEAP8[$31] = 0;
    $32 = $1;
    $33 = (($32) + 40|0);
    $34 = HEAP32[$33>>2]|0;
    HEAP8[$34] = 0;
    $35 = $1;
    $36 = (($35) + 69|0);
    HEAP8[$36] = 1;
    break;
   }
  }
 } while(0);
 $37 = $1;
 $38 = (($37) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $1;
 $41 = (($40) + 44|0);
 HEAP32[$41>>2] = $39;
 $42 = $read;
 $43 = $1;
 $44 = (($43) + 40|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($45) + ($42)|0);
 $47 = $1;
 $48 = (($47) + 48|0);
 HEAP32[$48>>2] = $46;
 $0 = 0;
 $49 = $0;
 STACKTOP = sp;return ($49|0);
}
function _qtmd_update_model($model) {
 $model = $model|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $j = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmp = sp + 12|0;
 $0 = $model;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) - 1)|0;
  $i = $8;
  while(1) {
   $9 = $i;
   $10 = ($9|0)>=(0);
   if (!($10)) {
    break;
   }
   $11 = $i;
   $12 = $0;
   $13 = (($12) + 8|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($11<<2)|0);
   $16 = (($15) + 2|0);
   $17 = HEAP16[$16>>1]|0;
   $18 = $17&65535;
   $19 = $18 >> 1;
   $20 = $19&65535;
   HEAP16[$16>>1] = $20;
   $21 = $i;
   $22 = $0;
   $23 = (($22) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21<<2)|0);
   $26 = (($25) + 2|0);
   $27 = HEAP16[$26>>1]|0;
   $28 = $27&65535;
   $29 = $i;
   $30 = (($29) + 1)|0;
   $31 = $0;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + ($30<<2)|0);
   $35 = (($34) + 2|0);
   $36 = HEAP16[$35>>1]|0;
   $37 = $36&65535;
   $38 = ($28|0)<=($37|0);
   if ($38) {
    $39 = $i;
    $40 = (($39) + 1)|0;
    $41 = $0;
    $42 = (($41) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + ($40<<2)|0);
    $45 = (($44) + 2|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $46&65535;
    $48 = (($47) + 1)|0;
    $49 = $48&65535;
    $50 = $i;
    $51 = $0;
    $52 = (($51) + 8|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + ($50<<2)|0);
    $55 = (($54) + 2|0);
    HEAP16[$55>>1] = $49;
   }
   $56 = $i;
   $57 = (($56) + -1)|0;
   $i = $57;
  }
  STACKTOP = sp;return;
 }
 $58 = $0;
 HEAP32[$58>>2] = 50;
 $i = 0;
 while(1) {
  $59 = $i;
  $60 = $0;
  $61 = (($60) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($59|0)<($62|0);
  if (!($63)) {
   break;
  }
  $64 = $i;
  $65 = (($64) + 1)|0;
  $66 = $0;
  $67 = (($66) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65<<2)|0);
  $70 = (($69) + 2|0);
  $71 = HEAP16[$70>>1]|0;
  $72 = $71&65535;
  $73 = $i;
  $74 = $0;
  $75 = (($74) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + ($73<<2)|0);
  $78 = (($77) + 2|0);
  $79 = HEAP16[$78>>1]|0;
  $80 = $79&65535;
  $81 = (($80) - ($72))|0;
  $82 = $81&65535;
  HEAP16[$78>>1] = $82;
  $83 = $i;
  $84 = $0;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + ($83<<2)|0);
  $88 = (($87) + 2|0);
  $89 = HEAP16[$88>>1]|0;
  $90 = (($89) + 1)<<16>>16;
  HEAP16[$88>>1] = $90;
  $91 = $i;
  $92 = $0;
  $93 = (($92) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + ($91<<2)|0);
  $96 = (($95) + 2|0);
  $97 = HEAP16[$96>>1]|0;
  $98 = $97&65535;
  $99 = $98 >> 1;
  $100 = $99&65535;
  HEAP16[$96>>1] = $100;
  $101 = $i;
  $102 = (($101) + 1)|0;
  $i = $102;
 }
 $i = 0;
 while(1) {
  $103 = $i;
  $104 = $0;
  $105 = (($104) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) - 1)|0;
  $108 = ($103|0)<($107|0);
  if (!($108)) {
   break;
  }
  $109 = $i;
  $110 = (($109) + 1)|0;
  $j = $110;
  while(1) {
   $111 = $j;
   $112 = $0;
   $113 = (($112) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($111|0)<($114|0);
   if (!($115)) {
    break;
   }
   $116 = $i;
   $117 = $0;
   $118 = (($117) + 8|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + ($116<<2)|0);
   $121 = (($120) + 2|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122&65535;
   $124 = $j;
   $125 = $0;
   $126 = (($125) + 8|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + ($124<<2)|0);
   $129 = (($128) + 2|0);
   $130 = HEAP16[$129>>1]|0;
   $131 = $130&65535;
   $132 = ($123|0)<($131|0);
   if ($132) {
    $133 = $i;
    $134 = $0;
    $135 = (($134) + 8|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + ($133<<2)|0);
    ;HEAP16[$tmp+0>>1]=HEAP16[$137+0>>1]|0;HEAP16[$tmp+2>>1]=HEAP16[$137+2>>1]|0;
    $138 = $i;
    $139 = $0;
    $140 = (($139) + 8|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + ($138<<2)|0);
    $143 = $j;
    $144 = $0;
    $145 = (($144) + 8|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (($146) + ($143<<2)|0);
    ;HEAP16[$142+0>>1]=HEAP16[$147+0>>1]|0;HEAP16[$142+2>>1]=HEAP16[$147+2>>1]|0;
    $148 = $j;
    $149 = $0;
    $150 = (($149) + 8|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = (($151) + ($148<<2)|0);
    ;HEAP16[$152+0>>1]=HEAP16[$tmp+0>>1]|0;HEAP16[$152+2>>1]=HEAP16[$tmp+2>>1]|0;
   }
   $153 = $j;
   $154 = (($153) + 1)|0;
   $j = $154;
  }
  $155 = $i;
  $156 = (($155) + 1)|0;
  $i = $156;
 }
 $157 = $0;
 $158 = (($157) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = (($159) - 1)|0;
 $i = $160;
 while(1) {
  $161 = $i;
  $162 = ($161|0)>=(0);
  if (!($162)) {
   break;
  }
  $163 = $i;
  $164 = (($163) + 1)|0;
  $165 = $0;
  $166 = (($165) + 8|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + ($164<<2)|0);
  $169 = (($168) + 2|0);
  $170 = HEAP16[$169>>1]|0;
  $171 = $170&65535;
  $172 = $i;
  $173 = $0;
  $174 = (($173) + 8|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = (($175) + ($172<<2)|0);
  $177 = (($176) + 2|0);
  $178 = HEAP16[$177>>1]|0;
  $179 = $178&65535;
  $180 = (($179) + ($171))|0;
  $181 = $180&65535;
  HEAP16[$177>>1] = $181;
  $182 = $i;
  $183 = (($182) + -1)|0;
  $i = $183;
 }
 STACKTOP = sp;return;
}
function _qtmd_free($qtm) {
 $qtm = $qtm|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $sys = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $qtm;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $sys = $4;
 $5 = $sys;
 $6 = (($5) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 FUNCTION_TABLE_vi[$7 & 3]($10);
 $11 = $sys;
 $12 = (($11) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = (($14) + 40|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_vi[$13 & 3]($16);
 $17 = $sys;
 $18 = (($17) + 32|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 FUNCTION_TABLE_vi[$19 & 3]($20);
 STACKTOP = sp;return;
}
function _mktime($tp) {
 $tp = $tp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $tp;
 $1 = $0;
 $2 = (___mktime_internal($1,9,4616)|0);
 STACKTOP = sp;return ($2|0);
}
function ___mktime_internal($tp,$convert,$offset) {
 $tp = $tp|0;
 $convert = $convert|0;
 $offset = $offset|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dday = 0.0, $dsec = 0.0, $dst_diff = 0, $dt = 0, $dyear = 0.0;
 var $hour = 0, $isdst = 0, $mday = 0, $min = 0, $mon = 0, $mon_remainder = 0, $mon_years = 0, $negative_mon_remainder = 0, $ot = 0, $otm = 0, $remaining_probes = 0, $sec = 0, $sec_requested = 0, $t = 0, $t0 = 0, $t1 = 0, $t2 = 0, $time_t_max = 0, $time_t_min = 0, $tm = 0;
 var $yday = 0, $year = 0, $year_requested = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $t = sp + 208|0;
 $tm = sp + 44|0;
 $ot = sp + 180|0;
 $otm = sp + 100|0;
 $1 = $tp;
 $2 = $convert;
 $3 = $offset;
 $remaining_probes = 6;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $sec = $5;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $min = $8;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $hour = $11;
 $12 = $1;
 $13 = (($12) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $mday = $14;
 $15 = $1;
 $16 = (($15) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $mon = $17;
 $18 = $1;
 $19 = (($18) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $year_requested = $20;
 $21 = $1;
 $22 = (($21) + 32|0);
 $23 = HEAP32[$22>>2]|0;
 $isdst = $23;
 $24 = $mon;
 $25 = (($24|0) % 12)&-1;
 $mon_remainder = $25;
 $26 = $mon_remainder;
 $27 = ($26|0)<(0);
 $28 = $27&1;
 $negative_mon_remainder = $28;
 $29 = $mon;
 $30 = (($29|0) / 12)&-1;
 $31 = $negative_mon_remainder;
 $32 = (($30) - ($31))|0;
 $mon_years = $32;
 $33 = $year_requested;
 $34 = $mon_years;
 $35 = (($33) + ($34))|0;
 $year = $35;
 $36 = $mon_remainder;
 $37 = $negative_mon_remainder;
 $38 = ($37*12)|0;
 $39 = (($36) + ($38))|0;
 $40 = $year;
 $41 = (($40) + 1900)|0;
 $42 = (($41|0) % 4)&-1;
 $43 = ($42|0)==(0);
 if ($43) {
  $44 = $year;
  $45 = (($44) + 1900)|0;
  $46 = (($45|0) % 100)&-1;
  $47 = ($46|0)!=(0);
  if ($47) {
   $214 = 1;
  } else {
   $48 = $year;
   $49 = (($48) + 1900)|0;
   $50 = (($49|0) % 400)&-1;
   $51 = ($50|0)==(0);
   $214 = $51;
  }
  $53 = $214;
 } else {
  $53 = 0;
 }
 $52 = $53&1;
 $54 = (4560 + (($52*26)|0)|0);
 $55 = (($54) + ($39<<1)|0);
 $56 = HEAP16[$55>>1]|0;
 $57 = $56&65535;
 $58 = $mday;
 $59 = (($57) + ($58))|0;
 $60 = (($59) - 1)|0;
 $yday = $60;
 $61 = $sec;
 $sec_requested = $61;
 $62 = $sec;
 $63 = ($62|0)<(0);
 if ($63) {
  $sec = 0;
 }
 $64 = $sec;
 $65 = (59)<($64|0);
 if ($65) {
  $sec = 59;
 }
 $66 = (($tm) + 20|0);
 HEAP32[$66>>2] = 70;
 HEAP32[$tm>>2] = 0;
 $67 = (($tm) + 4|0);
 HEAP32[$67>>2] = 0;
 $68 = (($tm) + 8|0);
 HEAP32[$68>>2] = 0;
 $69 = (($tm) + 28|0);
 HEAP32[$69>>2] = 0;
 $70 = $year;
 $71 = $yday;
 $72 = $hour;
 $73 = $min;
 $74 = $sec;
 $75 = (_ydhms_tm_diff($70,$71,$72,$73,$74,$tm)|0);
 $t0 = $75;
 $76 = $t0;
 $77 = $3;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($76) + ($78))|0;
 $t2 = $79;
 $t1 = $79;
 HEAP32[$t>>2] = $79;
 while(1) {
  $80 = $year;
  $81 = $yday;
  $82 = $hour;
  $83 = $min;
  $84 = $sec;
  $85 = $2;
  $86 = (_ranged_convert($85,$t,$tm)|0);
  $87 = (_ydhms_tm_diff($80,$81,$82,$83,$84,$86)|0);
  $dt = $87;
  $88 = ($87|0)!=(0);
  if (!($88)) {
   break;
  }
  $89 = HEAP32[$t>>2]|0;
  $90 = $t1;
  $91 = ($89|0)==($90|0);
  if ($91) {
   $92 = HEAP32[$t>>2]|0;
   $93 = $t2;
   $94 = ($92|0)!=($93|0);
   if ($94) {
    $95 = $isdst;
    $96 = ($95|0)<(0);
    if ($96) {
     label = 16;
     break;
    }
    $97 = (($tm) + 32|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)<(0);
    if ($99) {
     label = 16;
     break;
    }
    $100 = $isdst;
    $101 = ($100|0)!=(0);
    $102 = $101&1;
    $103 = (($tm) + 32|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = ($104|0)!=(0);
    $106 = $105&1;
    $107 = ($102|0)!=($106|0);
    if ($107) {
     label = 16;
     break;
    }
   }
  }
  $108 = $remaining_probes;
  $109 = (($108) + -1)|0;
  $remaining_probes = $109;
  $110 = ($109|0)==(0);
  if ($110) {
   label = 18;
   break;
  }
  $111 = $t2;
  $t1 = $111;
  $112 = HEAP32[$t>>2]|0;
  $t2 = $112;
  $113 = $dt;
  $114 = HEAP32[$t>>2]|0;
  $115 = (($114) + ($113))|0;
  HEAP32[$t>>2] = $115;
 }
 if ((label|0) == 16) {
 }
 else if ((label|0) == 18) {
  $0 = -1;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 }
 $116 = $dt;
 $117 = ($116|0)==(0);
 if ($117) {
  $118 = $isdst;
  $119 = (0)<=($118|0);
  if ($119) {
   $120 = (($tm) + 32|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (0)<=($121|0);
   if ($122) {
    $123 = $isdst;
    $124 = ($123|0)!=(0);
    $125 = $124&1;
    $126 = (($tm) + 32|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)!=(0);
    $129 = $128&1;
    $130 = (($125) - ($129))|0;
    $dst_diff = $130;
    $131 = $dst_diff;
    $132 = ($131|0)!=(0);
    if ($132) {
     $133 = HEAP32[$t>>2]|0;
     $134 = $dst_diff;
     $135 = ($134*7200)|0;
     $136 = (($133) - ($135))|0;
     HEAP32[$ot>>2] = $136;
     while(1) {
      $137 = $remaining_probes;
      $138 = (($137) + -1)|0;
      $remaining_probes = $138;
      $139 = ($138|0)!=(0);
      if (!($139)) {
       break;
      }
      $140 = $year;
      $141 = $yday;
      $142 = $hour;
      $143 = $min;
      $144 = $sec;
      $145 = $2;
      $146 = (_ranged_convert($145,$ot,$otm)|0);
      $147 = (_ydhms_tm_diff($140,$141,$142,$143,$144,$146)|0);
      $dt = $147;
      $148 = ($147|0)!=(0);
      if (!($148)) {
       label = 29;
       break;
      }
      $150 = $dt;
      $151 = HEAP32[$ot>>2]|0;
      $152 = (($151) + ($150))|0;
      HEAP32[$ot>>2] = $152;
      $153 = HEAP32[$t>>2]|0;
      $154 = ($152|0)==($153|0);
      if ($154) {
       label = 31;
       break;
      }
     }
     if ((label|0) == 29) {
      $149 = HEAP32[$ot>>2]|0;
      HEAP32[$t>>2] = $149;
      dest=$tm+0|0; src=$otm+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
     }
     else if ((label|0) == 31) {
     }
    }
   }
  }
 }
 $155 = HEAP32[$t>>2]|0;
 $156 = $t0;
 $157 = (($155) - ($156))|0;
 $158 = $3;
 HEAP32[$158>>2] = $157;
 $159 = $sec_requested;
 $160 = HEAP32[$tm>>2]|0;
 $161 = ($159|0)!=($160|0);
 do {
  if ($161) {
   $162 = $sec_requested;
   $163 = $sec;
   $164 = (($162) - ($163))|0;
   $165 = $sec;
   $166 = ($165|0)==(0);
   if ($166) {
    $167 = HEAP32[$tm>>2]|0;
    $168 = ($167|0)==(60);
    $170 = $168;
   } else {
    $170 = 0;
   }
   $169 = $170&1;
   $171 = (($164) + ($169))|0;
   $172 = HEAP32[$t>>2]|0;
   $173 = (($172) + ($171))|0;
   HEAP32[$t>>2] = $173;
   $174 = $2;
   $175 = (FUNCTION_TABLE_iii[$174 & 15]($t,$tm)|0);
   $176 = ($175|0)!=(0|0);
   if ($176) {
    break;
   }
   $0 = -1;
   $213 = $0;
   STACKTOP = sp;return ($213|0);
  }
 } while(0);
 $177 = $year_requested;
 $178 = (+($177|0));
 $179 = $mon_years;
 $180 = (+($179|0));
 $181 = $178 + $180;
 $182 = (($tm) + 20|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = (+($183|0));
 $185 = $181 - $184;
 $dyear = $185;
 $186 = $dyear;
 $187 = 366.0 * $186;
 $188 = $mday;
 $189 = (+($188|0));
 $190 = $187 + $189;
 $dday = $190;
 $191 = $dday;
 $192 = 24.0 * $191;
 $193 = $hour;
 $194 = (+($193|0));
 $195 = $192 + $194;
 $196 = 60.0 * $195;
 $197 = $min;
 $198 = (+($197|0));
 $199 = $196 + $198;
 $200 = 60.0 * $199;
 $201 = $sec_requested;
 $202 = (+($201|0));
 $203 = $200 + $202;
 $dsec = $203;
 $time_t_max = 2147483647;
 $time_t_min = -2147483648;
 $204 = $dsec;
 $205 = $204 < 0.0;
 if ($205) {
  $206 = $dsec;
  $207 = -$206;
  $210 = $207;
 } else {
  $208 = $dsec;
  $210 = $208;
 }
 $209 = 1431655764.0 < $210;
 if ($209) {
  $0 = -1;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 } else {
  $211 = $1;
  dest=$211+0|0; src=$tm+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $212 = HEAP32[$t>>2]|0;
  $0 = $212;
  $213 = $0;
  STACKTOP = sp;return ($213|0);
 }
 return 0|0;
}
function _my_mktime_localtime_r($t,$tp) {
 $t = $t|0;
 $tp = $tp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $t;
 $2 = $tp;
 $3 = $1;
 $4 = (_localtime(($3|0))|0);
 $l = $4;
 $5 = $l;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $2;
  $8 = $l;
  dest=$7+0|0; src=$8+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $9 = $2;
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return 0|0;
}
function _ydhms_tm_diff($year,$yday,$hour,$min,$sec,$tp) {
 $year = $year|0;
 $yday = $yday|0;
 $hour = $hour|0;
 $min = $min|0;
 $sec = $sec|0;
 $tp = $tp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $a100 = 0, $a4 = 0, $a400 = 0;
 var $b100 = 0, $b4 = 0, $b400 = 0, $days = 0, $intervening_leap_days = 0, $years = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $year;
 $2 = $yday;
 $3 = $hour;
 $4 = $min;
 $5 = $sec;
 $6 = $tp;
 $7 = $6;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $1;
  $10 = $9 >> 2;
  $11 = (($10) + 475)|0;
  $12 = $1;
  $13 = $12 & 3;
  $14 = ($13|0)!=(0);
  $15 = $14 ^ 1;
  $16 = $15&1;
  $17 = (($11) - ($16))|0;
  $a4 = $17;
  $18 = $6;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 >> 2;
  $22 = (($21) + 475)|0;
  $23 = $6;
  $24 = (($23) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 & 3;
  $27 = ($26|0)!=(0);
  $28 = $27 ^ 1;
  $29 = $28&1;
  $30 = (($22) - ($29))|0;
  $b4 = $30;
  $31 = $a4;
  $32 = (($31|0) / 25)&-1;
  $33 = $a4;
  $34 = (($33|0) % 25)&-1;
  $35 = ($34|0)<(0);
  $36 = $35&1;
  $37 = (($32) - ($36))|0;
  $a100 = $37;
  $38 = $b4;
  $39 = (($38|0) / 25)&-1;
  $40 = $b4;
  $41 = (($40|0) % 25)&-1;
  $42 = ($41|0)<(0);
  $43 = $42&1;
  $44 = (($39) - ($43))|0;
  $b100 = $44;
  $45 = $a100;
  $46 = $45 >> 2;
  $a400 = $46;
  $47 = $b100;
  $48 = $47 >> 2;
  $b400 = $48;
  $49 = $a4;
  $50 = $b4;
  $51 = (($49) - ($50))|0;
  $52 = $a100;
  $53 = $b100;
  $54 = (($52) - ($53))|0;
  $55 = (($51) - ($54))|0;
  $56 = $a400;
  $57 = $b400;
  $58 = (($56) - ($57))|0;
  $59 = (($55) + ($58))|0;
  $intervening_leap_days = $59;
  $60 = $1;
  $61 = $6;
  $62 = (($61) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($60) - ($63))|0;
  $years = $64;
  $65 = $years;
  $66 = ($65*365)|0;
  $67 = $intervening_leap_days;
  $68 = (($66) + ($67))|0;
  $69 = $2;
  $70 = $6;
  $71 = (($70) + 28|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($69) - ($72))|0;
  $74 = (($68) + ($73))|0;
  $days = $74;
  $75 = $days;
  $76 = ($75*24)|0;
  $77 = $3;
  $78 = $6;
  $79 = (($78) + 8|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($77) - ($80))|0;
  $82 = (($76) + ($81))|0;
  $83 = ($82*60)|0;
  $84 = $4;
  $85 = $6;
  $86 = (($85) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($84) - ($87))|0;
  $89 = (($83) + ($88))|0;
  $90 = ($89*60)|0;
  $91 = $5;
  $92 = $6;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($91) - ($93))|0;
  $95 = (($90) + ($94))|0;
  $0 = $95;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 } else {
  $0 = 1;
  $96 = $0;
  STACKTOP = sp;return ($96|0);
 }
 return 0|0;
}
function _ranged_convert($convert,$t,$tp) {
 $convert = $convert|0;
 $t = $t|0;
 $tp = $tp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bad = 0, $mid = 0, $ok = 0, $r = 0, $tm = 0, dest = 0, label = 0;
 var sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $tm = sp + 12|0;
 $0 = $convert;
 $1 = $t;
 $2 = $tp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (FUNCTION_TABLE_iii[$3 & 15]($4,$5)|0);
 $r = $6;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $52 = $r;
  STACKTOP = sp;return ($52|0);
 }
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $52 = $r;
  STACKTOP = sp;return ($52|0);
 }
 $11 = $1;
 $12 = HEAP32[$11>>2]|0;
 $bad = $12;
 $ok = 0;
 while(1) {
  $13 = $bad;
  $14 = $ok;
  $15 = $bad;
  $16 = ($15|0)<(0);
  $17 = $16 ? -1 : 1;
  $18 = (($14) + ($17))|0;
  $19 = ($13|0)!=($18|0);
  if (!($19)) {
   break;
  }
  $20 = $bad;
  $21 = ($20|0)<(0);
  if ($21) {
   $22 = $bad;
   $23 = $ok;
   $24 = $bad;
   $25 = (($23) - ($24))|0;
   $26 = $25 >> 1;
   $27 = (($22) + ($26))|0;
   $35 = $27;
  } else {
   $28 = $ok;
   $29 = $bad;
   $30 = $ok;
   $31 = (($29) - ($30))|0;
   $32 = $31 >> 1;
   $33 = (($28) + ($32))|0;
   $35 = $33;
  }
  $34 = $1;
  HEAP32[$34>>2] = $35;
  $mid = $35;
  $36 = $0;
  $37 = $1;
  $38 = $2;
  $39 = (FUNCTION_TABLE_iii[$36 & 15]($37,$38)|0);
  $r = $39;
  $40 = ($39|0)!=(0|0);
  if ($40) {
   $41 = $r;
   dest=$tm+0|0; src=$41+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $42 = $mid;
   $ok = $42;
  } else {
   $43 = $mid;
   $bad = $43;
  }
 }
 $44 = $r;
 $45 = ($44|0)!=(0|0);
 if (!($45)) {
  $46 = $ok;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $ok;
   $49 = $1;
   HEAP32[$49>>2] = $48;
   $50 = $2;
   dest=$50+0|0; src=$tm+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $51 = $2;
   $r = $51;
  }
 }
 $52 = $r;
 STACKTOP = sp;return ($52|0);
}
function _rpl_fnmatch($pattern,$string,$flags) {
 $pattern = $pattern|0;
 $string = $string|0;
 $flags = $flags|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $c1 = 0, $cend = 0, $cstart = 0, $n = 0, $not = 0, $p = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $pattern;
 $2 = $string;
 $3 = $flags;
 $4 = $1;
 $p = $4;
 $5 = $2;
 $n = $5;
 L1: while(1) {
  $6 = $p;
  $7 = (($6) + 1|0);
  $p = $7;
  $8 = HEAP8[$6]|0;
  $c = $8;
  $9 = $8&255;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   label = 152;
   break;
  }
  $11 = $3;
  $12 = $11 & 16;
  $13 = ($12|0)!=(0);
  if ($13) {
   $14 = $c;
   $15 = $14&255;
   $16 = (_isupper(($15|0))|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $c;
    $19 = $18&255;
    $20 = (_tolower(($19|0))|0);
    $24 = $20;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $21 = $c;
   $22 = $21&255;
   $24 = $22;
  }
  $23 = $24&255;
  $c = $23;
  $25 = $c;
  $26 = $25&255;
  do {
   if ((($26|0) == 63)) {
    $27 = $n;
    $28 = HEAP8[$27]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($29|0)==(0);
    if ($30) {
     label = 9;
     break L1;
    }
    $31 = $3;
    $32 = $31 & 1;
    $33 = ($32|0)!=(0);
    if ($33) {
     $34 = $n;
     $35 = HEAP8[$34]|0;
     $36 = $35 << 24 >> 24;
     $37 = ($36|0)==(47);
     if ($37) {
      label = 12;
      break L1;
     }
    }
    $38 = $3;
    $39 = $38 & 4;
    $40 = ($39|0)!=(0);
    if ($40) {
     $41 = $n;
     $42 = HEAP8[$41]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($43|0)==(46);
     if ($44) {
      $45 = $n;
      $46 = $2;
      $47 = ($45|0)==($46|0);
      if ($47) {
       label = 18;
       break L1;
      }
      $48 = $3;
      $49 = $48 & 1;
      $50 = ($49|0)!=(0);
      if ($50) {
       $51 = $n;
       $52 = (($51) + -1|0);
       $53 = HEAP8[$52]|0;
       $54 = $53 << 24 >> 24;
       $55 = ($54|0)==(47);
       if ($55) {
        label = 18;
        break L1;
       }
      }
     }
    }
   } else if ((($26|0) == 91)) {
    $207 = $n;
    $208 = HEAP8[$207]|0;
    $209 = $208 << 24 >> 24;
    $210 = ($209|0)==(0);
    if ($210) {
     label = 76;
     break L1;
    }
    $211 = $3;
    $212 = $211 & 4;
    $213 = ($212|0)!=(0);
    if ($213) {
     $214 = $n;
     $215 = HEAP8[$214]|0;
     $216 = $215 << 24 >> 24;
     $217 = ($216|0)==(46);
     if ($217) {
      $218 = $n;
      $219 = $2;
      $220 = ($218|0)==($219|0);
      if ($220) {
       label = 82;
       break L1;
      }
      $221 = $3;
      $222 = $221 & 1;
      $223 = ($222|0)!=(0);
      if ($223) {
       $224 = $n;
       $225 = (($224) + -1|0);
       $226 = HEAP8[$225]|0;
       $227 = $226 << 24 >> 24;
       $228 = ($227|0)==(47);
       if ($228) {
        label = 82;
        break L1;
       }
      }
     }
    }
    $229 = $p;
    $230 = HEAP8[$229]|0;
    $231 = $230 << 24 >> 24;
    $232 = ($231|0)==(33);
    if ($232) {
     $238 = 1;
    } else {
     $233 = $p;
     $234 = HEAP8[$233]|0;
     $235 = $234 << 24 >> 24;
     $236 = ($235|0)==(94);
     $238 = $236;
    }
    $237 = $238&1;
    $not = $237;
    $239 = $not;
    $240 = ($239|0)!=(0);
    if ($240) {
     $241 = $p;
     $242 = (($241) + 1|0);
     $p = $242;
    }
    $243 = $p;
    $244 = (($243) + 1|0);
    $p = $244;
    $245 = HEAP8[$243]|0;
    $c = $245;
    while(1) {
     $246 = $c;
     $cstart = $246;
     $247 = $c;
     $cend = $247;
     $248 = $3;
     $249 = $248 & 2;
     $250 = ($249|0)!=(0);
     if (!($250)) {
      $251 = $c;
      $252 = $251&255;
      $253 = ($252|0)==(92);
      if ($253) {
       $254 = $p;
       $255 = (($254) + 1|0);
       $p = $255;
       $256 = HEAP8[$254]|0;
       $cend = $256;
       $cstart = $256;
      }
     }
     $257 = $3;
     $258 = $257 & 16;
     $259 = ($258|0)!=(0);
     if ($259) {
      $260 = $cstart;
      $261 = $260&255;
      $262 = (_isupper(($261|0))|0);
      $263 = ($262|0)!=(0);
      if ($263) {
       $264 = $cstart;
       $265 = $264&255;
       $266 = (_tolower(($265|0))|0);
       $270 = $266;
      } else {
       label = 94;
      }
     } else {
      label = 94;
     }
     if ((label|0) == 94) {
      label = 0;
      $267 = $cstart;
      $268 = $267&255;
      $270 = $268;
     }
     $269 = $270&255;
     $cend = $269;
     $cstart = $269;
     $271 = $c;
     $272 = $271&255;
     $273 = ($272|0)==(0);
     if ($273) {
      label = 96;
      break L1;
     }
     $274 = $p;
     $275 = (($274) + 1|0);
     $p = $275;
     $276 = HEAP8[$274]|0;
     $c = $276;
     $277 = $3;
     $278 = $277 & 16;
     $279 = ($278|0)!=(0);
     if ($279) {
      $280 = $c;
      $281 = $280&255;
      $282 = (_isupper(($281|0))|0);
      $283 = ($282|0)!=(0);
      if ($283) {
       $284 = $c;
       $285 = $284&255;
       $286 = (_tolower(($285|0))|0);
       $290 = $286;
      } else {
       label = 100;
      }
     } else {
      label = 100;
     }
     if ((label|0) == 100) {
      label = 0;
      $287 = $c;
      $288 = $287&255;
      $290 = $288;
     }
     $289 = $290&255;
     $c = $289;
     $291 = $3;
     $292 = $291 & 1;
     $293 = ($292|0)!=(0);
     if ($293) {
      $294 = $c;
      $295 = $294&255;
      $296 = ($295|0)==(47);
      if ($296) {
       label = 103;
       break L1;
      }
     }
     $297 = $c;
     $298 = $297&255;
     $299 = ($298|0)==(45);
     if ($299) {
      $300 = $p;
      $301 = HEAP8[$300]|0;
      $302 = $301 << 24 >> 24;
      $303 = ($302|0)!=(93);
      if ($303) {
       $304 = $p;
       $305 = (($304) + 1|0);
       $p = $305;
       $306 = HEAP8[$304]|0;
       $cend = $306;
       $307 = $3;
       $308 = $307 & 2;
       $309 = ($308|0)!=(0);
       if (!($309)) {
        $310 = $cend;
        $311 = $310&255;
        $312 = ($311|0)==(92);
        if ($312) {
         $313 = $p;
         $314 = (($313) + 1|0);
         $p = $314;
         $315 = HEAP8[$313]|0;
         $cend = $315;
        }
       }
       $316 = $cend;
       $317 = $316&255;
       $318 = ($317|0)==(0);
       if ($318) {
        label = 110;
        break L1;
       }
       $319 = $3;
       $320 = $319 & 16;
       $321 = ($320|0)!=(0);
       if ($321) {
        $322 = $cend;
        $323 = $322&255;
        $324 = (_isupper(($323|0))|0);
        $325 = ($324|0)!=(0);
        if ($325) {
         $326 = $cend;
         $327 = $326&255;
         $328 = (_tolower(($327|0))|0);
         $332 = $328;
        } else {
         label = 114;
        }
       } else {
        label = 114;
       }
       if ((label|0) == 114) {
        label = 0;
        $329 = $cend;
        $330 = $329&255;
        $332 = $330;
       }
       $331 = $332&255;
       $cend = $331;
       $333 = $p;
       $334 = (($333) + 1|0);
       $p = $334;
       $335 = HEAP8[$333]|0;
       $c = $335;
      }
     }
     $336 = $3;
     $337 = $336 & 16;
     $338 = ($337|0)!=(0);
     if ($338) {
      $339 = $n;
      $340 = HEAP8[$339]|0;
      $341 = $340&255;
      $342 = (_isupper(($341|0))|0);
      $343 = ($342|0)!=(0);
      if ($343) {
       $344 = $n;
       $345 = HEAP8[$344]|0;
       $346 = $345&255;
       $347 = (_tolower(($346|0))|0);
       $354 = $347;
      } else {
       label = 119;
      }
     } else {
      label = 119;
     }
     if ((label|0) == 119) {
      label = 0;
      $348 = $n;
      $349 = HEAP8[$348]|0;
      $350 = $349&255;
      $354 = $350;
     }
     $351 = $cstart;
     $352 = $351&255;
     $353 = ($354|0)>=($352|0);
     if ($353) {
      $355 = $3;
      $356 = $355 & 16;
      $357 = ($356|0)!=(0);
      if ($357) {
       $358 = $n;
       $359 = HEAP8[$358]|0;
       $360 = $359&255;
       $361 = (_isupper(($360|0))|0);
       $362 = ($361|0)!=(0);
       if ($362) {
        $363 = $n;
        $364 = HEAP8[$363]|0;
        $365 = $364&255;
        $366 = (_tolower(($365|0))|0);
        $373 = $366;
       } else {
        label = 124;
       }
      } else {
       label = 124;
      }
      if ((label|0) == 124) {
       label = 0;
       $367 = $n;
       $368 = HEAP8[$367]|0;
       $369 = $368&255;
       $373 = $369;
      }
      $370 = $cend;
      $371 = $370&255;
      $372 = ($373|0)<=($371|0);
      if ($372) {
       break;
      }
     }
     $374 = $c;
     $375 = $374&255;
     $376 = ($375|0)==(93);
     if ($376) {
      label = 128;
      break;
     }
    }
    if ((label|0) == 128) {
     label = 0;
     $377 = $not;
     $378 = ($377|0)!=(0);
     if (!($378)) {
      label = 131;
      break L1;
     }
     break;
    }
    while(1) {
     $379 = $c;
     $380 = $379&255;
     $381 = ($380|0)!=(93);
     if (!($381)) {
      break;
     }
     $382 = $c;
     $383 = $382&255;
     $384 = ($383|0)==(0);
     if ($384) {
      label = 136;
      break L1;
     }
     $385 = $p;
     $386 = (($385) + 1|0);
     $p = $386;
     $387 = HEAP8[$385]|0;
     $c = $387;
     $388 = $3;
     $389 = $388 & 2;
     $390 = ($389|0)!=(0);
     if (!($390)) {
      $391 = $c;
      $392 = $391&255;
      $393 = ($392|0)==(92);
      if ($393) {
       $394 = $p;
       $395 = (($394) + 1|0);
       $p = $395;
      }
     }
    }
    $396 = $not;
    $397 = ($396|0)!=(0);
    if ($397) {
     label = 142;
     break L1;
    }
   } else if ((($26|0) == 92)) {
    $56 = $3;
    $57 = $56 & 2;
    $58 = ($57|0)!=(0);
    if (!($58)) {
     $59 = $p;
     $60 = (($59) + 1|0);
     $p = $60;
     $61 = HEAP8[$59]|0;
     $c = $61;
     $62 = $3;
     $63 = $62 & 16;
     $64 = ($63|0)!=(0);
     if ($64) {
      $65 = $c;
      $66 = $65&255;
      $67 = (_isupper(($66|0))|0);
      $68 = ($67|0)!=(0);
      if ($68) {
       $69 = $c;
       $70 = $69&255;
       $71 = (_tolower(($70|0))|0);
       $75 = $71;
      } else {
       label = 26;
      }
     } else {
      label = 26;
     }
     if ((label|0) == 26) {
      label = 0;
      $72 = $c;
      $73 = $72&255;
      $75 = $73;
     }
     $74 = $75&255;
     $c = $74;
    }
    $76 = $3;
    $77 = $76 & 16;
    $78 = ($77|0)!=(0);
    if ($78) {
     $79 = $n;
     $80 = HEAP8[$79]|0;
     $81 = $80&255;
     $82 = (_isupper(($81|0))|0);
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = $n;
      $85 = HEAP8[$84]|0;
      $86 = $85&255;
      $87 = (_tolower(($86|0))|0);
      $94 = $87;
     } else {
      label = 31;
     }
    } else {
     label = 31;
    }
    if ((label|0) == 31) {
     label = 0;
     $88 = $n;
     $89 = HEAP8[$88]|0;
     $90 = $89&255;
     $94 = $90;
    }
    $91 = $c;
    $92 = $91&255;
    $93 = ($94|0)!=($92|0);
    if ($93) {
     label = 33;
     break L1;
    }
   } else if ((($26|0) == 42)) {
    label = 35;
    break L1;
   } else {
    $398 = $c;
    $399 = $398&255;
    $400 = $3;
    $401 = $400 & 16;
    $402 = ($401|0)!=(0);
    if ($402) {
     $403 = $n;
     $404 = HEAP8[$403]|0;
     $405 = $404&255;
     $406 = (_isupper(($405|0))|0);
     $407 = ($406|0)!=(0);
     if ($407) {
      $408 = $n;
      $409 = HEAP8[$408]|0;
      $410 = $409&255;
      $411 = (_tolower(($410|0))|0);
      $416 = $411;
     } else {
      label = 147;
     }
    } else {
     label = 147;
    }
    if ((label|0) == 147) {
     label = 0;
     $412 = $n;
     $413 = HEAP8[$412]|0;
     $414 = $413&255;
     $416 = $414;
    }
    $415 = ($399|0)!=($416|0);
    if ($415) {
     label = 149;
     break L1;
    }
   }
  } while(0);
  $417 = $n;
  $418 = (($417) + 1|0);
  $n = $418;
 }
 if ((label|0) == 9) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 12) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 18) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 33) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 35) {
  $95 = $3;
  $96 = $95 & 4;
  $97 = ($96|0)!=(0);
  do {
   if ($97) {
    $98 = $n;
    $99 = HEAP8[$98]|0;
    $100 = $99 << 24 >> 24;
    $101 = ($100|0)==(46);
    if ($101) {
     $102 = $n;
     $103 = $2;
     $104 = ($102|0)==($103|0);
     if (!($104)) {
      $105 = $3;
      $106 = $105 & 1;
      $107 = ($106|0)!=(0);
      if (!($107)) {
       break;
      }
      $108 = $n;
      $109 = (($108) + -1|0);
      $110 = HEAP8[$109]|0;
      $111 = $110 << 24 >> 24;
      $112 = ($111|0)==(47);
      if (!($112)) {
       break;
      }
     }
     $0 = 1;
     $430 = $0;
     STACKTOP = sp;return ($430|0);
    }
   }
  } while(0);
  $113 = $p;
  $114 = (($113) + 1|0);
  $p = $114;
  $115 = HEAP8[$113]|0;
  $c = $115;
  while(1) {
   $116 = $c;
   $117 = $116&255;
   $118 = ($117|0)==(63);
   if ($118) {
    $431 = 1;
   } else {
    $119 = $c;
    $120 = $119&255;
    $121 = ($120|0)==(42);
    $431 = $121;
   }
   if (!($431)) {
    break;
   }
   $122 = $3;
   $123 = $122 & 1;
   $124 = ($123|0)!=(0);
   if ($124) {
    $125 = $n;
    $126 = HEAP8[$125]|0;
    $127 = $126 << 24 >> 24;
    $128 = ($127|0)==(47);
    if ($128) {
     label = 49;
     break;
    }
   }
   $129 = $c;
   $130 = $129&255;
   $131 = ($130|0)==(63);
   if ($131) {
    $132 = $n;
    $133 = HEAP8[$132]|0;
    $134 = $133 << 24 >> 24;
    $135 = ($134|0)==(0);
    if ($135) {
     label = 49;
     break;
    }
   }
   $136 = $p;
   $137 = (($136) + 1|0);
   $p = $137;
   $138 = HEAP8[$136]|0;
   $c = $138;
   $139 = $n;
   $140 = (($139) + 1|0);
   $n = $140;
  }
  if ((label|0) == 49) {
   $0 = 1;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
  }
  $141 = $c;
  $142 = $141&255;
  $143 = ($142|0)==(0);
  if ($143) {
   $0 = 0;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
  }
  $144 = $3;
  $145 = $144 & 2;
  $146 = ($145|0)!=(0);
  if ($146) {
   label = 57;
  } else {
   $147 = $c;
   $148 = $147&255;
   $149 = ($148|0)==(92);
   if ($149) {
    $150 = $p;
    $151 = HEAP8[$150]|0;
    $152 = $151 << 24 >> 24;
    $156 = $152;
   } else {
    label = 57;
   }
  }
  if ((label|0) == 57) {
   $153 = $c;
   $154 = $153&255;
   $156 = $154;
  }
  $155 = $156&255;
  $c1 = $155;
  $157 = $3;
  $158 = $157 & 16;
  $159 = ($158|0)!=(0);
  if ($159) {
   $160 = $c1;
   $161 = $160&255;
   $162 = (_isupper(($161|0))|0);
   $163 = ($162|0)!=(0);
   if ($163) {
    $164 = $c1;
    $165 = $164&255;
    $166 = (_tolower(($165|0))|0);
    $170 = $166;
   } else {
    label = 61;
   }
  } else {
   label = 61;
  }
  if ((label|0) == 61) {
   $167 = $c1;
   $168 = $167&255;
   $170 = $168;
  }
  $169 = $170&255;
  $c1 = $169;
  $171 = $p;
  $172 = (($171) + -1|0);
  $p = $172;
  while(1) {
   $173 = $n;
   $174 = HEAP8[$173]|0;
   $175 = $174 << 24 >> 24;
   $176 = ($175|0)!=(0);
   if (!($176)) {
    label = 74;
    break;
   }
   $177 = $c;
   $178 = $177&255;
   $179 = ($178|0)==(91);
   if ($179) {
    label = 70;
   } else {
    $180 = $3;
    $181 = $180 & 16;
    $182 = ($181|0)!=(0);
    if ($182) {
     $183 = $n;
     $184 = HEAP8[$183]|0;
     $185 = $184&255;
     $186 = (_isupper(($185|0))|0);
     $187 = ($186|0)!=(0);
     if ($187) {
      $188 = $n;
      $189 = HEAP8[$188]|0;
      $190 = $189&255;
      $191 = (_tolower(($190|0))|0);
      $198 = $191;
     } else {
      label = 68;
     }
    } else {
     label = 68;
    }
    if ((label|0) == 68) {
     label = 0;
     $192 = $n;
     $193 = HEAP8[$192]|0;
     $194 = $193&255;
     $198 = $194;
    }
    $195 = $c1;
    $196 = $195&255;
    $197 = ($198|0)==($196|0);
    if ($197) {
     label = 70;
    }
   }
   if ((label|0) == 70) {
    label = 0;
    $199 = $p;
    $200 = $n;
    $201 = $3;
    $202 = $201 & -5;
    $203 = (_rpl_fnmatch($199,$200,$202)|0);
    $204 = ($203|0)==(0);
    if ($204) {
     label = 71;
     break;
    }
   }
   $205 = $n;
   $206 = (($205) + 1|0);
   $n = $206;
  }
  if ((label|0) == 71) {
   $0 = 0;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
  }
  else if ((label|0) == 74) {
   $0 = 1;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
  }
 }
 else if ((label|0) == 76) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 82) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 96) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 103) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 110) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 131) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 136) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 142) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 149) {
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 else if ((label|0) == 152) {
  $419 = $n;
  $420 = HEAP8[$419]|0;
  $421 = $420 << 24 >> 24;
  $422 = ($421|0)==(0);
  if ($422) {
   $0 = 0;
   $430 = $0;
   STACKTOP = sp;return ($430|0);
  }
  $423 = $3;
  $424 = $423 & 8;
  $425 = ($424|0)!=(0);
  if ($425) {
   $426 = $n;
   $427 = HEAP8[$426]|0;
   $428 = $427 << 24 >> 24;
   $429 = ($428|0)==(47);
   if ($429) {
    $0 = 0;
    $430 = $0;
    STACKTOP = sp;return ($430|0);
   }
  }
  $0 = 1;
  $430 = $0;
  STACKTOP = sp;return ($430|0);
 }
 return 0|0;
}
function _getopt($argc,$argv,$optstring) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $c = 0, $d = 0, $i$0$lcssa = 0, $i$04 = 0, $k$0 = 0, $or$cond = 0;
 var $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp + 4|0;
 $d = sp;
 $0 = HEAP32[4624>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[4640>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[4640>>2] = 0;
  HEAP32[4648>>2] = 0;
  HEAP32[4624>>2] = 1;
  $5 = 1;
 } else {
  $5 = $0;
 }
 $4 = ($5|0)<($argc|0);
 if (!($4)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($argv) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP8[$7]|0;
 $10 = ($9<<24>>24)==(45);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($7) + 1|0);
 $12 = HEAP8[$11]|0;
 if ((($12<<24>>24) == 45)) {
  label = 7;
 } else if ((($12<<24>>24) == 0)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 7) {
  $13 = (($7) + 2|0);
  $14 = HEAP8[$13]|0;
  $15 = ($14<<24>>24)==(0);
  if ($15) {
   $16 = (($5) + 1)|0;
   HEAP32[4624>>2] = $16;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $17 = HEAP32[4648>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  HEAP32[4648>>2] = 1;
  $20 = 1;
 } else {
  $20 = $17;
 }
 $19 = (($7) + ($20)|0);
 $21 = (_mbtowc($c,$19,4)|0);
 $22 = ($21|0)<(0);
 if ($22) {
  HEAP32[$c>>2] = 65533;
  $28 = 65533;$k$0 = 1;
 } else {
  $$pre = HEAP32[$c>>2]|0;
  $28 = $$pre;$k$0 = $21;
 }
 $23 = HEAP32[4624>>2]|0;
 $24 = (($argv) + ($23<<2)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[4648>>2]|0;
 $27 = (($25) + ($26)|0);
 HEAP32[4656>>2] = $28;
 $29 = (($26) + ($k$0))|0;
 HEAP32[4648>>2] = $29;
 $30 = (($25) + ($29)|0);
 $31 = HEAP8[$30]|0;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  $33 = (($23) + 1)|0;
  HEAP32[4624>>2] = $33;
  HEAP32[4648>>2] = 0;
 }
 $34 = (_mbtowc($d,$optstring,4)|0);
 $35 = ($34|0)==(0);
 L30: do {
  if ($35) {
   $i$0$lcssa = 0;
  } else {
   $40 = $34;$i$04 = 0;
   while(1) {
    $36 = HEAP32[$d>>2]|0;
    $37 = HEAP32[$c>>2]|0;
    $38 = ($36|0)==($37|0);
    if ($38) {
     $i$0$lcssa = $i$04;
     break L30;
    }
    $39 = ($40|0)<(1);
    $41 = $39 ? 1 : $40;
    $42 = (($41) + ($i$04))|0;
    $43 = (($optstring) + ($42)|0);
    $44 = (_mbtowc($d,$43,4)|0);
    $45 = ($44|0)==(0);
    if ($45) {
     $i$0$lcssa = $42;
     break;
    } else {
     $40 = $44;$i$04 = $42;
    }
   }
  }
 } while(0);
 $46 = HEAP32[$d>>2]|0;
 $47 = HEAP32[$c>>2]|0;
 $48 = ($46|0)==($47|0);
 if (!($48)) {
  $49 = HEAP8[$optstring]|0;
  $50 = ($49<<24>>24)!=(58);
  $51 = HEAP32[4632>>2]|0;
  $52 = ($51|0)!=(0);
  $or$cond3 = $50 & $52;
  if (!($or$cond3)) {
   $$0 = 63;
   STACKTOP = sp;return ($$0|0);
  }
  $53 = HEAP32[$argv>>2]|0;
  $54 = (_strlen(($53|0))|0);
  (_write(2,($53|0),($54|0))|0);
  (_write(2,(4664|0),18)|0);
  (_write(2,($27|0),($k$0|0))|0);
  (_write(2,(4688|0),1)|0);
  $$0 = 63;
  STACKTOP = sp;return ($$0|0);
 }
 $55 = (($i$0$lcssa) + 1)|0;
 $56 = (($optstring) + ($55)|0);
 $57 = HEAP8[$56]|0;
 $58 = ($57<<24>>24)==(58);
 if (!($58)) {
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = HEAP32[4624>>2]|0;
 $60 = ($59|0)<($argc|0);
 if ($60) {
  $67 = (($59) + 1)|0;
  HEAP32[4624>>2] = $67;
  $68 = (($argv) + ($59<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = HEAP32[4648>>2]|0;
  $71 = (($69) + ($70)|0);
  HEAP32[4728>>2] = $71;
  HEAP32[4648>>2] = 0;
  $$0 = $46;
  STACKTOP = sp;return ($$0|0);
 }
 $61 = HEAP8[$optstring]|0;
 $62 = ($61<<24>>24)==(58);
 if ($62) {
  $$0 = 58;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = HEAP32[4632>>2]|0;
 $64 = ($63|0)==(0);
 if ($64) {
  $$0 = 63;
  STACKTOP = sp;return ($$0|0);
 }
 $65 = HEAP32[$argv>>2]|0;
 $66 = (_strlen(($65|0))|0);
 (_write(2,($65|0),($66|0))|0);
 (_write(2,(4696|0),31)|0);
 (_write(2,($27|0),($k$0|0))|0);
 (_write(2,(4688|0),1)|0);
 $$0 = 63;
 STACKTOP = sp;return ($$0|0);
}
function _getopt_long($argc,$argv,$optstring,$longopts,$idx) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___getopt_long($argc,$argv,$optstring,$longopts,$idx,0)|0);
 STACKTOP = sp;return ($0|0);
}
function ___getopt_long($argc,$argv,$optstring,$longopts,$idx,$longonly) {
 $argc = $argc|0;
 $argv = $argv|0;
 $optstring = $optstring|0;
 $longopts = $longopts|0;
 $idx = $idx|0;
 $longonly = $longonly|0;
 var $$ = 0, $$0 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$018 = 0, $name$05 = 0, $opt$04 = 0, $opt$06 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4624>>2]|0;
 $1 = ($0|0)==(0);
 $2 = HEAP32[4640>>2]|0;
 $3 = ($2|0)!=(0);
 $or$cond = $1 | $3;
 if ($or$cond) {
  HEAP32[4640>>2] = 0;
  HEAP32[4648>>2] = 0;
  HEAP32[4624>>2] = 1;
  $5 = 1;
 } else {
  $5 = $0;
 }
 $4 = ($5|0)<($argc|0);
 if (!($4)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($argv) + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = HEAP8[$7]|0;
 $10 = ($9<<24>>24)==(45);
 if (!($10)) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($longonly|0)==(0);
 $$phi$trans$insert = (($7) + 1|0);
 $$pre = HEAP8[$$phi$trans$insert]|0;
 if ($11) {
  $phitmp = ($$pre<<24>>24)==(45);
  if ($phitmp) {
   $13 = (($7) + 2|0);
   $14 = HEAP8[$13]|0;
   $15 = ($14<<24>>24)==(0);
   if (!($15)) {
    $20 = 45;
    label = 10;
   }
  }
 } else {
  $12 = ($$pre<<24>>24)==(0);
  if (!($12)) {
   $20 = $$pre;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $16 = HEAP32[$longopts>>2]|0;
  $17 = ($16|0)==(0|0);
  $18 = (($7) + 1|0);
  $19 = ($20<<24>>24)==(45);
  L19: do {
   if (!($17)) {
    $23 = $16;$i$018 = 0;
    while(1) {
     $21 = (($7) + 2|0);
     $$ = $19 ? $21 : $18;
     $22 = HEAP8[$23]|0;
     $24 = ($22<<24>>24)==(0);
     L22: do {
      if ($24) {
       $opt$04 = $$;
       label = 15;
      } else {
       $$pr = $22;$name$05 = $23;$opt$06 = $$;
       while(1) {
        $25 = HEAP8[$opt$06]|0;
        $26 = ($$pr<<24>>24)==($25<<24>>24);
        if (!($26)) {
         break;
        }
        $27 = (($name$05) + 1|0);
        $28 = (($opt$06) + 1|0);
        $29 = HEAP8[$27]|0;
        $30 = ($29<<24>>24)==(0);
        if ($30) {
         $opt$04 = $28;
         label = 15;
         break L22;
        } else {
         $$pr = $29;$name$05 = $27;$opt$06 = $28;
        }
       }
       $31 = ($$pr<<24>>24)==(0);
       if ($31) {
        $opt$04 = $opt$06;
        label = 15;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $32 = HEAP8[$opt$04]|0;
      if ((($32<<24>>24) == 61) | (($32<<24>>24) == 0)) {
       $33 = ($32<<24>>24)==(61);
       $34 = ((($longopts) + ($i$018<<4)|0) + 4|0);
       $35 = HEAP32[$34>>2]|0;
       if (!($33)) {
        label = 19;
        break;
       }
       $36 = ($35|0)==(0);
       if (!($36)) {
        label = 18;
        break;
       }
      }
     }
     $51 = (($i$018) + 1)|0;
     $52 = (($longopts) + ($51<<4)|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==(0|0);
     if ($54) {
      break L19;
     } else {
      $23 = $53;$i$018 = $51;
     }
    }
    do {
     if ((label|0) == 18) {
      $37 = (($opt$04) + 1|0);
      HEAP32[4728>>2] = $37;
      $44 = $5;
     }
     else if ((label|0) == 19) {
      $38 = ($35|0)==(1);
      if (!($38)) {
       HEAP32[4728>>2] = 0;
       $44 = $5;
       break;
      }
      $39 = (($5) + 1)|0;
      HEAP32[4624>>2] = $39;
      $40 = (($argv) + ($39<<2)|0);
      $41 = HEAP32[$40>>2]|0;
      HEAP32[4728>>2] = $41;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$0 = 58;
       STACKTOP = sp;return ($$0|0);
      } else {
       $44 = $39;
      }
     }
    } while(0);
    $43 = (($44) + 1)|0;
    HEAP32[4624>>2] = $43;
    $45 = ($idx|0)==(0|0);
    if (!($45)) {
     HEAP32[$idx>>2] = $i$018;
    }
    $46 = ((($longopts) + ($i$018<<4)|0) + 8|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    $49 = ((($longopts) + ($i$018<<4)|0) + 12|0);
    $50 = HEAP32[$49>>2]|0;
    if ($48) {
     $$0 = $50;
     STACKTOP = sp;return ($$0|0);
    }
    HEAP32[$47>>2] = $50;
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  if ($19) {
   $55 = (($5) + 1)|0;
   HEAP32[4624>>2] = $55;
   $$0 = 63;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $56 = (_getopt($argc,$argv,$optstring)|0);
 $$0 = $56;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (4736 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33]|0;
     $35 = $34&255;
     $36 = (($35) + -128)|0;
     $37 = ($36>>>0)>(63);
     if (!($37)) {
      $38 = $31 << 6;
      $39 = $36 | $38;
      $40 = ($39|0)<(0);
      if (!($40)) {
       HEAP32[$7>>2] = $39;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $41 = (($src) + 3|0);
      $42 = HEAP8[$41]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if (!($45)) {
       $46 = $39 << 6;
       $47 = $44 | $46;
       HEAP32[$7>>2] = $47;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $48 = (___errno_location()|0);
 HEAP32[$48>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[4944>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((4944 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((4944 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[4944>>2] = $22;
     } else {
      $23 = HEAP32[((4944 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((4944 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((4944 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((4944 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[4944>>2] = $74;
      } else {
       $75 = HEAP32[((4944 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((4944 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((4944 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((4944 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[4944>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[4944>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((4944 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((4944 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((4944 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((4944 + 8|0))>>2] = $81;
     HEAP32[((4944 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((4944 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((4944 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((4944 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((4944 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((4944 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((4944 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((4944 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((4944 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((4944 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((4944 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((4944 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((4944 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((4944 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[4944>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[4944>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((4944 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((4944 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((4944 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((4944 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((4944 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((4944 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((4944 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((4944 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((4944 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((4944 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((4944 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((4944 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((4944 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((4944 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((4944 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((4944 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((4944 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((4944 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[4944>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          if ($431) {
           $432 = $428 | $429;
           HEAP32[4944>>2] = $432;
           $$sum14$pre$i = (($426) + 2)|0;
           $$pre$i25 = ((4944 + ($$sum14$pre$i<<2)|0) + 40|0);
           $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
          } else {
           $$sum17$i = (($426) + 2)|0;
           $433 = ((4944 + ($$sum17$i<<2)|0) + 40|0);
           $434 = HEAP32[$433>>2]|0;
           $435 = HEAP32[((4944 + 16|0))>>2]|0;
           $436 = ($434>>>0)<($435>>>0);
           if ($436) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((4944 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((4944 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((4944 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((4944 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((4944 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((4944 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((4944 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((4944 + 20|0))>>2] = $516;
   HEAP32[((4944 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((4944 + 8|0))>>2] = 0;
   HEAP32[((4944 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((4944 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((4944 + 12|0))>>2] = $530;
  $531 = HEAP32[((4944 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((4944 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[5416>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((5416 + 8|0))>>2] = $540;
    HEAP32[((5416 + 4|0))>>2] = $540;
    HEAP32[((5416 + 12|0))>>2] = -1;
    HEAP32[((5416 + 16|0))>>2] = -1;
    HEAP32[((5416 + 20|0))>>2] = 0;
    HEAP32[((4944 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[5416>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((5416 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((4944 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((4944 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((4944 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((4944 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((4944 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((4944 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((5416 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((4944 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((4944 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((5416 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((4944 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((4944 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((4944 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((4944 + 432|0))>>2] = $633;
  $634 = HEAP32[((4944 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((4944 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((4944 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((4944 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((4944 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((4944 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((4944 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((4944 + 460|0))>>2] = 0;
    $641 = HEAP32[5416>>2]|0;
    HEAP32[((4944 + 36|0))>>2] = $641;
    HEAP32[((4944 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((4944 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((4944 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((4944 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((4944 + 24|0))>>2] = $654;
    HEAP32[((4944 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((5416 + 16|0))>>2]|0;
    HEAP32[((4944 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((4944 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((4944 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((4944 + 24|0))>>2] = $684;
       HEAP32[((4944 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((5416 + 16|0))>>2]|0;
       HEAP32[((4944 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((4944 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((4944 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((4944 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((4944 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L348: do {
       if ($730) {
        $731 = HEAP32[((4944 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((4944 + 12|0))>>2] = $732;
        HEAP32[((4944 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((4944 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((4944 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((4944 + 8|0))>>2] = $738;
         HEAP32[((4944 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((4944 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           if (!($755)) {
            $756 = HEAP32[((4944 + 16|0))>>2]|0;
            $757 = ($750>>>0)<($756>>>0);
            if ($757) {
             _abort();
             // unreachable;
            }
            $758 = (($750) + 12|0);
            $759 = HEAP32[$758>>2]|0;
            $760 = ($759|0)==($721|0);
            if (!($760)) {
             _abort();
             // unreachable;
            }
           }
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[4944>>2]|0;
            $765 = $764 & $763;
            HEAP32[4944>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           if ($766) {
            $$pre57$i$i = (($752) + 8|0);
            $$pre$phi58$i$iZ2D = $$pre57$i$i;
           } else {
            $767 = HEAP32[((4944 + 16|0))>>2]|0;
            $768 = ($752>>>0)<($767>>>0);
            if ($768) {
             _abort();
             // unreachable;
            }
            $769 = (($752) + 8|0);
            $770 = HEAP32[$769>>2]|0;
            $771 = ($770|0)==($721|0);
            if ($771) {
             $$pre$phi58$i$iZ2D = $769;
            } else {
             _abort();
             // unreachable;
            }
           }
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((4944 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((4944 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if (!($802)) {
            $$sum30$i$i = (($tsize$246$i) + 28)|0;
            $$sum113$i = (($$sum30$i$i) + ($720))|0;
            $803 = (($tbase$247$i) + ($$sum113$i)|0);
            $804 = HEAP32[$803>>2]|0;
            $805 = ((4944 + ($804<<2)|0) + 304|0);
            $806 = HEAP32[$805>>2]|0;
            $807 = ($721|0)==($806|0);
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if ($cond$i$i) {
              $808 = 1 << $804;
              $809 = $808 ^ -1;
              $810 = HEAP32[((4944 + 4|0))>>2]|0;
              $811 = $810 & $809;
              HEAP32[((4944 + 4|0))>>2] = $811;
              break;
             }
            } else {
             $812 = HEAP32[((4944 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break;
             }
            }
            $819 = HEAP32[((4944 + 16|0))>>2]|0;
            $820 = ($R$1$i$i>>>0)<($819>>>0);
            if ($820) {
             _abort();
             // unreachable;
            }
            $821 = (($R$1$i$i) + 24|0);
            HEAP32[$821>>2] = $774;
            $$sum3132$i$i = $720 | 16;
            $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
            $822 = (($tbase$247$i) + ($$sum114$i)|0);
            $823 = HEAP32[$822>>2]|0;
            $824 = ($823|0)==(0|0);
            do {
             if (!($824)) {
              $825 = HEAP32[((4944 + 16|0))>>2]|0;
              $826 = ($823>>>0)<($825>>>0);
              if ($826) {
               _abort();
               // unreachable;
              } else {
               $827 = (($R$1$i$i) + 16|0);
               HEAP32[$827>>2] = $823;
               $828 = (($823) + 24|0);
               HEAP32[$828>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
            $829 = (($tbase$247$i) + ($$sum115$i)|0);
            $830 = HEAP32[$829>>2]|0;
            $831 = ($830|0)==(0|0);
            if (!($831)) {
             $832 = HEAP32[((4944 + 16|0))>>2]|0;
             $833 = ($830>>>0)<($832>>>0);
             if ($833) {
              _abort();
              // unreachable;
             } else {
              $834 = (($R$1$i$i) + 20|0);
              HEAP32[$834>>2] = $830;
              $835 = (($830) + 24|0);
              HEAP32[$835>>2] = $R$1$i$i;
              break;
             }
            }
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((4944 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[4944>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         if ($851) {
          $852 = $848 | $849;
          HEAP32[4944>>2] = $852;
          $$sum26$pre$i$i = (($846) + 2)|0;
          $$pre$i25$i = ((4944 + ($$sum26$pre$i$i<<2)|0) + 40|0);
          $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
         } else {
          $$sum29$i$i = (($846) + 2)|0;
          $853 = ((4944 + ($$sum29$i$i<<2)|0) + 40|0);
          $854 = HEAP32[$853>>2]|0;
          $855 = HEAP32[((4944 + 16|0))>>2]|0;
          $856 = ($854>>>0)<($855>>>0);
          if ($856) {
           _abort();
           // unreachable;
          } else {
           $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
          }
         }
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        if ($861) {
         $I7$0$i$i = 0;
        } else {
         $862 = ($qsize$0$i$i>>>0)>(16777215);
         if ($862) {
          $I7$0$i$i = 31;
         } else {
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        }
        $885 = ((4944 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((4944 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((4944 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L444: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L444;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((4944 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L348;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((4944 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((4944 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((4944 + 24|0))>>2] = $958;
    HEAP32[((4944 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((5416 + 16|0))>>2]|0;
    HEAP32[((4944 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((4944 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((4944 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((4944 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((4944 + 448|0))+12>>2]|0;
    HEAP32[((4944 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((4944 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((4944 + 460|0))>>2] = 0;
    HEAP32[((4944 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((4944 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[4944>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      if ($990) {
       $991 = $987 | $988;
       HEAP32[4944>>2] = $991;
       $$sum10$pre$i$i = (($985) + 2)|0;
       $$pre$i$i = ((4944 + ($$sum10$pre$i$i<<2)|0) + 40|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
      } else {
       $$sum11$i$i = (($985) + 2)|0;
       $992 = ((4944 + ($$sum11$i$i<<2)|0) + 40|0);
       $993 = HEAP32[$992>>2]|0;
       $994 = HEAP32[((4944 + 16|0))>>2]|0;
       $995 = ($993>>>0)<($994>>>0);
       if ($995) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((4944 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((4944 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((4944 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L499: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L499;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((4944 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((4944 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((4944 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((4944 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((4944 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((4944 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((4944 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((4944 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((4944 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((4944 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[4944>>2]|0;
     $36 = $35 & $34;
     HEAP32[4944>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((4944 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((4944 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((4944 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((4944 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((4944 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((4944 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((4944 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((4944 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((4944 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((4944 + 12|0))>>2] = $122;
   HEAP32[((4944 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((4944 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((4944 + 20|0))>>2] = 0;
   HEAP32[((4944 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((4944 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((4944 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((4944 + 8|0))>>2] = $130;
   HEAP32[((4944 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((4944 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((4944 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[4944>>2]|0;
     $154 = $153 & $152;
     HEAP32[4944>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((4944 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((4944 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((4944 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((4944 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((4944 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((4944 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((4944 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((4944 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((4944 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((4944 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((4944 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((4944 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((4944 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[4944>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[4944>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((4944 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((4944 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((4944 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((4944 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((4944 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((4944 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((4944 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((4944 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((4944 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((4944 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((4944 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((4944 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _strcasecmp($_l,$_r) {
 $_l = $_l|0;
 $_r = $_r|0;
 var $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$0$lcssa = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$_l]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $19 = 0;$r$0$lcssa = $_r;
  } else {
   $2 = $0&255;
   $6 = $0;$7 = $2;$l$03 = $_l;$r$04 = $_r;
   while(1) {
    $3 = HEAP8[$r$04]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $19 = $6;$r$0$lcssa = $r$04;
     break L1;
    }
    $5 = ($6<<24>>24)==($3<<24>>24);
    if (!($5)) {
     $8 = (_tolower(($7|0))|0);
     $9 = HEAP8[$r$04]|0;
     $10 = $9&255;
     $11 = (_tolower(($10|0))|0);
     $12 = ($8|0)==($11|0);
     if (!($12)) {
      break;
     }
    }
    $13 = (($l$03) + 1|0);
    $14 = (($r$04) + 1|0);
    $15 = HEAP8[$13]|0;
    $16 = $15&255;
    $17 = ($15<<24>>24)==(0);
    if ($17) {
     $19 = 0;$r$0$lcssa = $14;
     break L1;
    } else {
     $6 = $15;$7 = $16;$l$03 = $13;$r$04 = $14;
    }
   }
   $$pre$pre = HEAP8[$l$03]|0;
   $19 = $$pre$pre;$r$0$lcssa = $r$04;
  }
 } while(0);
 $18 = $19&255;
 $20 = (_tolower(($18|0))|0);
 $21 = HEAP8[$r$0$lcssa]|0;
 $22 = $21&255;
 $23 = (_tolower(($22|0))|0);
 $24 = (($20) - ($23))|0;
 STACKTOP = sp;return ($24|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcat(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    var pdestEnd = 0;
    pdestEnd = (pdest + (_strlen(pdest)|0))|0;
    do {
      HEAP8[((pdestEnd+i)|0)]=HEAP8[((psrc+i)|0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))|0)])|0));
    return pdest|0;
}
function _tolower(chr) {
    chr = chr|0;
    if ((chr|0) < 65) return chr|0;
    if ((chr|0) > 90) return chr|0;
    return (chr - 65 + 97)|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)|0)]=HEAP8[(((psrc+i)|0)|0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))|0)])|0));
    return pdest|0;
}

// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&3](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&1](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&3](a1|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&3](a1|0,a2|0,a3|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
  }

function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0) { p0 = p0|0; nullFunc_vi(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(2); }
  function b3(p0) { p0 = p0|0; nullFunc_ii(3);return 0; }
  function b4(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(4); }
  function b5(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(5);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,_cabx_open,_cabx_read,_cabx_write,_cabx_seek,_cabd_extract,_cabd_prepend,_cabd_append,_cabd_param,_cabd_sys_read,_cabd_sys_write,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_vi = [b1,_cabx_close,_cabx_free,b1];
  var FUNCTION_TABLE_vii = [b2,_cabd_close];
  var FUNCTION_TABLE_ii = [b3,_cabx_tell,_cabd_error,b3];
  var FUNCTION_TABLE_viii = [b4,_cabx_msg,_cabx_copy,b4];
  var FUNCTION_TABLE_iii = [b5,_cabx_alloc,_cabd_open,_cabd_search,_noned_decompress,_mszipd_decompress,_qtmd_decompress,_lzxd_decompress,_mszipd_flush_window,_my_mktime_localtime_r,b5,b5,b5,b5,b5,b5];

  return { _strlen: _strlen, _strcat: _strcat, _free: _free, _main: _main, _tolower: _tolower, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strcpy: _strcpy, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiii: dynCall_iiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iii: dynCall_iii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iii": nullFunc_iii, "invoke_iiii": invoke_iiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iii": invoke_iii, "_readdir_r": _readdir_r, "_send": _send, "_fread": _fread, "_lseek": _lseek, "__reallyNegative": __reallyNegative, "_vfprintf": _vfprintf, "_chmod": _chmod, "___assert_fail": ___assert_fail, "_fsync": _fsync, "_fflush": _fflush, "_opendir": _opendir, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "_utime": _utime, "___setErrNo": ___setErrNo, "_ferror": _ferror, "__formatString": __formatString, "_putchar": _putchar, "_fseek": _fseek, "_readdir": _readdir, "_pread": _pread, "_printf": _printf, "_fclose": _fclose, "_umask": _umask, "_localtime": _localtime, "_write": _write, "_ftell": _ftell, "_isupper": _isupper, "___errno_location": ___errno_location, "_stat": _stat, "_recv": _recv, "_fputc": _fputc, "_mkport": _mkport, "_read": _read, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_mknod": _mknod, "_mkdir": _mkdir, "_closedir": _closedir, "_fopen": _fopen, "_close": _close, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr, "_stdout": _stdout }, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _strcat = Module["_strcat"] = asm["_strcat"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _tolower = Module["_tolower"] = asm["_tolower"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



//# sourceMappingURL=cabextract.js.map